var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AccessCertificateResponse.html",[0,1.338,1,3.899]],["body/interfaces/AccessCertificateResponse.html",[0,1.862,1,6.63,2,3.171,3,0.073,4,0.082,5,0.073,6,5.899,7,4.227,8,5.899,9,0.763,10,6.615,11,5.297,12,1.742,13,0.251,14,1.022,15,6.585,16,1.904,17,0.88,18,8.455,19,0.618,20,0.317,21,0.006,22,3.369,23,1.992,24,5.11,25,3.229,26,3.688,27,3.099,28,3.637,29,6.63,30,0.082,31,0.005,32,0.005]],["title/classes/AllowListPolicy.html",[33,0.204,34,2.617]],["body/classes/AllowListPolicy.html",[3,0.059,4,0.066,5,0.059,9,0.619,13,0.203,14,0.895,19,0.549,20,0.333,21,0.006,30,0.113,31,0.004,32,0.004,33,0.398,34,3.895,35,1.054,36,3.392,37,4.782,38,3.899,39,5.042,40,5.381,41,3.423,42,1.179,43,5.364,44,3.887,45,0.425,46,5.364,47,5.364,48,1.708,49,5.364,50,0.184,51,1.617,52,4.089,53,5.762,54,2.143,55,2.515,56,2.368,57,2.829,58,1.28,59,3.997,60,3.997,61,3.997,62,3.697,63,2.508,64,3.392,65,2.862,66,4.498,67,4.498,68,3.697,69,5.799,70,4.301,71,2.954,72,3.697,73,3.697,74,2.954,75,3.534,76,2.391,77,3.266,78,2.954,79,2.954,80,5.004,81,2.638,82,1.646,83,3.697,84,2.954,85,3.697]],["title/classes/ApiKeyConfig.html",[33,0.204,86,3.132]],["body/classes/ApiKeyConfig.html",[3,0.054,4,0.06,5,0.054,9,0.561,13,0.184,14,0.838,17,0.529,19,0.552,20,0.347,21,0.006,23,2.202,30,0.108,31,0.004,32,0.004,33,0.383,35,0.955,42,1.104,45,0.398,48,0.925,50,0.176,51,1.466,54,1.943,56,2.316,57,2.143,58,1.16,65,2.395,86,5.328,87,3.204,88,2.299,89,6.157,90,4.31,91,5.114,92,5.458,93,2.789,94,4.862,95,1.394,96,3.977,97,4.198,98,4.862,99,2.763,100,2.761,101,2.857,102,1.259,103,2.678,104,2.54,105,3.345,106,2.838,107,4.032,108,3.351,109,4.188,110,3.059,111,5.328,112,2.49,113,5.328,114,3.524,115,4.799,116,1.903,117,1.466,118,4.963,119,3.524,120,4.799,121,3.524,122,3.351,123,3.075,124,3.524,125,1.793,126,2.182,127,2.857,128,3.204,129,2.456,130,2.857,131,3.892,132,3.524,133,3.524,134,2.857,135,2.598,136,2.857,137,2.857,138,1.984]],["title/controllers/AppController.html",[139,1.433,140,3.646]],["body/controllers/AppController.html",[3,0.078,4,0.087,5,0.078,13,0.268,19,0.549,21,0.006,30,0.087,31,0.005,32,0.005,33,0.303,42,1.18,45,0.426,50,0.196,102,1.833,139,2.538,140,6.458,141,2.56,142,6.313,143,1.913,144,9.297,145,7.079,146,1.583,147,1.22,148,5.323,149,1.436,150,5.13,151,4.879,152,7.079,153,6.313,154,3.783,155,6.313,156,5.808,157,6.313]],["title/modules/AppModule.html",[158,1.538,159,3.646]],["body/modules/AppModule.html",[3,0.064,4,0.05,5,0.064,20,0.211,21,0.006,22,2.422,30,0.05,31,0.004,32,0.004,33,0.173,48,1.295,50,0.227,74,2.221,126,1.329,140,5.224,141,2.101,147,0.695,149,1.179,158,2.203,159,7.567,160,1.798,161,2.037,162,2.155,163,2.155,164,1.984,165,3.439,166,2.037,167,3.597,168,3.597,169,3.597,170,5.959,171,4.674,172,6.403,173,5.959,174,5.668,175,5.722,176,5.959,177,5.201,178,5.007,179,5.722,180,5.959,181,5.668,182,3.104,183,2.155,184,2.155,185,4.034,186,5.224,187,3.4,188,4.934,189,2.843,190,1.329,191,4.034,192,3.309,193,2.292,194,4.034,195,3.309,196,4.034,197,3.597,198,2.923,199,5.81,200,3.597,201,3.309,202,2.551,203,3.828,204,4.034,205,2.551,206,1.934,207,4.034,208,4.034,209,2.658,210,4.034,211,4.034,212,4.034,213,3.597,214,4.034,215,3.095,216,2.923,217,4.034,218,4.767,219,4.034,220,4.034,221,4.034,222,4.004,223,4.457,224,4.034,225,3.597,226,4.034,227,4.034,228,4.034,229,4.034,230,4.034,231,3.302,232,4.21,233,1.474,234,4.767,235,3.309,236,3.095,237,2.475,238,1.612,239,1.984,240,3.674,241,4.034,242,4.034,243,4.034,244,4.034,245,4.034,246,2.923,247,4.034,248,4.034,249,4.034,250,4.034,251,2.923,252,2.221,253,4.034,254,4.034,255,4.034,256,4.034,257,3.597,258,4.034,259,4.034,260,4.034,261,4.034,262,4.034,263,4.146,264,3.674,265,5.81,266,4.034,267,2.037,268,3.095,269,4.034,270,2.221,271,1.547,272,5.181,273,4.034,274,2.78,275,4.034,276,0.917,277,4.034,278,3.302,279,3.597,280,4.034,281,4.034,282,4.034,283,3.095,284,4.034,285,4.034,286,4.21,287,3.597,288,5.81,289,4.034,290,4.034,291,4.034,292,4.034]],["title/classes/AttestationBasedPolicy.html",[33,0.204,84,2.617]],["body/classes/AttestationBasedPolicy.html",[3,0.059,4,0.066,5,0.059,13,0.204,14,0.896,19,0.517,20,0.333,21,0.006,30,0.113,31,0.004,32,0.004,33,0.398,34,2.963,35,1.057,36,3.403,37,4.504,38,3.903,39,5.046,40,5.385,41,3.426,42,1.182,44,3.899,45,0.426,48,1.664,50,0.185,51,1.622,52,4.093,53,5.768,54,2.15,55,2.519,56,2.369,57,2.832,58,1.284,59,4.003,60,4.003,61,4.003,62,3.709,63,2.516,64,3.403,65,2.866,66,4.504,67,4.504,68,3.709,69,5.806,70,4.305,71,2.963,72,3.709,73,3.709,74,2.963,75,3.546,76,2.399,77,3.276,78,2.963,79,2.963,80,5.327,81,2.646,82,1.651,83,3.709,84,3.903,85,3.709,293,5.381,294,5.381,295,4.798,296,4.128,297,5.381]],["title/controllers/AuthController.html",[139,1.433,298,3.646]],["body/controllers/AuthController.html",[3,0.042,4,0.047,5,0.042,9,1.059,12,1.478,13,0.146,17,0.419,20,0.265,21,0.006,23,2.153,30,0.047,31,0.004,32,0.004,33,0.165,42,1.105,45,0.399,48,0.732,50,0.2,74,2.119,82,2.817,88,2.255,90,3.1,93,1.753,95,0.663,96,2.762,99,2.187,102,0.997,138,2.291,139,2.197,141,1.392,143,1.276,146,1.915,147,0.663,148,2.434,149,1.479,270,4.601,298,4.308,299,3.432,300,7.288,301,5.912,302,6.499,303,5.615,304,3.848,305,4.105,306,5.214,307,3.418,308,3.167,309,3.848,310,8.091,311,3.848,312,5.086,313,3.299,314,4.716,315,4.401,316,4.005,317,5.979,318,5.615,319,4.607,320,3.87,321,3.442,322,5.086,323,3.432,324,3.848,325,5.086,326,5.281,327,5.615,328,4.609,329,2.184,330,4.804,331,5.007,332,4.069,333,3.848,334,5.615,335,5.615,336,3.784,337,5.007,338,3.27,339,0.933,340,1.693,341,5.615,342,3.848,343,5.117,344,7.637,345,5.281,346,6.499,347,3.848,348,3.848,349,5.615,350,4.308,351,5.007,352,3.092,353,4.804,354,5.912,355,5.439,356,1.998,357,4.069,358,5.912,359,6.358,360,2.536,361,3.848,362,2.691,363,4.569,364,3.432,365,3.432,366,3.848,367,3.432,368,3.432,369,2.952,370,3.848,371,3.432,372,3.848,373,2.536,374,3.848,375,1.604,376,1.636,377,3.848,378,4.607,379,5.591,380,3.848,381,4.607,382,3.249,383,3.432,384,3.432,385,2.952,386,3.848,387,3.157,388,3.157,389,2.789,390,3.432,391,3.848,392,5.615,393,3.848,394,2.789,395,2.652,396,2.789,397,3.432,398,3.848,399,3.442,400,0.903,401,2.343,402,3.848,403,3.432,404,3.157,405,2.261]],["title/modules/AuthModule.html",[158,1.538,170,3.444]],["body/modules/AuthModule.html",[3,0.049,4,0.055,5,0.049,21,0.006,30,0.055,31,0.004,32,0.004,33,0.191,50,0.229,95,0.769,141,2.258,147,0.769,149,0.906,158,2.329,160,1.99,161,2.255,162,2.385,163,2.385,164,2.195,165,3.636,166,3.636,170,7.17,171,4.832,174,5.86,177,5.377,178,5.176,182,3.336,183,2.385,184,2.385,187,2.849,188,4.524,189,2.415,190,1.471,209,2.941,213,3.981,215,3.425,216,3.235,231,2.537,232,3.235,233,0.966,298,5.523,343,2.823,363,5.86,364,3.981,406,3.981,407,3.981,408,3.981,409,3.981,410,5.602,411,6.774,412,6.16,413,6.774,414,5.176,415,4.464,416,5.523,417,5.523,418,7.2,419,3.425,420,3.981,421,2.623,422,1.784,423,5.567,424,2.941,425,3.077,426,2.849,427,1.419,428,3.235,429,2.537,430,3.662,431,4.464,432,4.464,433,3.235,434,3.981,435,5.567,436,3.425,437,4.464,438,4.464,439,4.383,440,3.669,441,3.425,442,3.948,443,3.981,444,3.981,445,4.464,446,1.471,447,3.425,448,4.464,449,3.981,450,4.464,451,3.662,452,4.464,453,3.662,454,6.42,455,6.243,456,4.464,457,4.464,458,3.077,459,4.464,460,3.425,461,1.984,462,4.464,463,4.464,464,4.464,465,3.981,466,3.662,467,1.821,468,2.823]],["title/interfaces/AuthResponse.html",[0,1.338,469,3.444]],["body/interfaces/AuthResponse.html",[0,1.866,2,3.177,3,0.073,4,0.082,5,0.073,9,0.764,12,2.13,13,0.251,14,1.023,19,0.608,20,0.331,21,0.006,23,1.994,30,0.082,31,0.005,32,0.005,93,2.07,308,3.418,469,6.328,470,5.91,471,3.767,472,3.441,473,6.682,474,7.461,475,7.214,476,8.09,477,8.09,478,6.638,479,6.207,480,4.666,481,3.878,482,3.167,483,3.64,484,6.628,485,3.65]],["title/injectables/AuthService.html",[363,3.276,486,0.996]],["body/injectables/AuthService.html",[3,0.042,4,0.047,5,0.042,9,0.441,11,2.172,12,1.471,13,0.145,16,1.384,17,0.608,19,0.364,20,0.24,21,0.006,22,1.593,25,1.527,30,0.047,31,0.004,32,0.004,33,0.164,45,0.397,50,0.203,81,1.88,82,2.477,88,1.913,90,3.088,95,0.963,96,3.248,116,1.496,129,1.931,138,2.28,143,1.27,146,1.624,147,0.659,149,1.134,150,4.049,155,3.409,156,3.136,157,3.409,189,2.868,190,1.259,231,2.172,233,1.918,238,2.639,239,2.748,270,4,301,4.983,302,6.478,308,3.025,314,2.105,315,3.705,316,1.832,320,2.635,323,4.983,328,4.176,330,2.77,332,2.77,336,3.429,337,4.983,338,2.843,339,1.355,340,1.685,343,5.405,344,6.478,345,2.77,350,2.933,352,2.105,353,2.77,355,5.418,362,1.832,363,5.007,367,3.409,368,3.409,371,3.409,376,2.251,378,5.418,385,4.287,387,3.136,388,3.136,389,2.77,390,3.409,394,2.77,404,3.136,412,5.494,414,2.327,433,5.264,434,3.409,435,3.409,439,2.327,441,2.933,444,3.409,461,2.456,486,1.171,487,1.437,488,3.409,489,2.577,490,2.216,491,2.045,492,3.823,493,4.351,494,3.823,495,3.823,496,3.823,497,7.729,498,1.593,499,2.105,500,3.533,501,2.77,502,2.062,503,3.136,504,3.823,505,3.446,506,2.635,507,4.584,508,4.287,509,2.043,510,2.933,511,3.823,512,2.933,513,3.136,514,4.707,515,5.327,516,3.533,517,2.933,518,5.588,519,3.823,520,3.823,521,5.588,522,3.823,523,3.823,524,3.136,525,3.823,526,2.822,527,3.823,528,1.985,529,3.823,530,3.823,531,3.823,532,3.823,533,2.216,534,3.823,535,3.823,536,1.356,537,2.77,538,3.823,539,3.823,540,1.745,541,1.88,542,3.409,543,3.136,544,3.136,545,3.136,546,3.136,547,2.933,548,2.635,549,3.823,550,3.823,551,5.418,552,3.823,553,5.588,554,3.823,555,3.851,556,3.823,557,3.409,558,3.823,559,3.533,560,4.584,561,3.823,562,3.823,563,3.823,564,2.246,565,5.588,566,2.519,567,2.933,568,1.704,569,2.77,570,3.823,571,2.77,572,3.823,573,3.409,574,3.823,575,2.933,576,3.823,577,3.823,578,3.823,579,3.823,580,2.172,581,3.823,582,3.823,583,2.933,584,2.417,585,3.409,586,2.933,587,2.77,588,3.823]],["title/classes/AuthenticationMethodAuth.html",[33,0.204,589,2.894]],["body/classes/AuthenticationMethodAuth.html",[0,1.499,3,0.059,4,0.066,5,0.059,12,1.401,13,0.202,14,0.89,17,0.58,19,0.459,20,0.326,21,0.006,30,0.113,31,0.004,32,0.004,33,0.392,35,1.045,42,1.173,45,0.423,50,0.184,51,1.605,54,2.127,55,2.236,56,2.283,57,2.714,58,1.27,65,3.033,79,2.931,88,2.209,90,4.078,97,2.763,104,3.024,105,2.688,106,2.645,110,2.545,112,3.154,117,2.529,125,2.906,126,2.597,138,3.559,267,4.686,271,2.041,316,3.779,482,2.754,589,4.284,590,4.985,591,3.366,592,5.516,593,5.304,594,4.746,595,5.322,596,5.322,597,5.322,598,2.268,599,3.875,600,4.85,601,3.654,602,4.85,603,3.668,604,3.24,605,4.929,606,2.844,607,1.722,608,4.985,609,3.668,610,3.507,611,2.083,612,3.366,613,3.24,614,3.668,615,3.668,616,3.24,617,3.366,618,3.507]],["title/interfaces/AuthenticationMethodInterface.html",[0,1.338,592,3.006]],["body/interfaces/AuthenticationMethodInterface.html",[0,1.513,2,2.575,3,0.059,4,0.066,5,0.059,12,1.415,13,0.204,14,0.895,17,0.585,19,0.462,20,0.327,21,0.006,30,0.113,31,0.004,32,0.004,33,0.392,50,0.185,51,1.62,54,2.147,55,2.25,56,2.289,57,2.724,58,1.282,65,3.249,79,2.958,88,2.217,90,4.091,97,2.789,104,3.038,105,2.713,106,2.657,110,2.56,112,2.978,117,2.135,125,2.92,126,2.609,138,3.738,267,4.751,271,2.061,316,3.796,482,2.771,589,3.271,590,3.397,591,3.397,592,5.533,593,5.008,598,2.289,599,3.899,600,4.88,601,3.676,602,4.88,603,3.703,604,3.271,605,5.279,606,2.871,607,1.738,608,5.008,609,3.703,610,3.54,611,2.103,612,3.397,613,3.271,614,3.703,615,3.703,616,3.271,617,3.397,618,3.54]],["title/classes/AuthenticationMethodNone.html",[33,0.204,616,2.894]],["body/classes/AuthenticationMethodNone.html",[0,1.525,3,0.06,4,0.067,5,0.06,12,1.426,13,0.205,14,0.9,17,0.59,19,0.464,20,0.319,21,0.006,30,0.113,31,0.004,32,0.004,33,0.393,35,1.064,42,0.903,45,0.326,50,0.185,51,1.633,54,2.164,55,2.262,56,2.294,57,2.732,58,1.292,65,3.054,79,2.982,88,2.224,90,4.101,97,2.811,104,3.049,105,2.735,106,2.667,110,2.574,112,3.175,117,2.146,125,2.931,126,2.619,138,3.579,267,4.704,271,2.077,316,3.811,482,2.786,589,3.297,590,4.501,591,3.424,592,5.547,593,5.028,598,2.307,599,3.919,600,4.905,601,3.695,602,4.905,603,3.732,604,3.297,605,4.962,606,2.893,607,1.752,608,5.028,609,3.732,610,3.568,611,2.119,612,3.424,613,3.297,614,3.732,615,3.732,616,4.333,617,3.424,618,3.568,619,4.829,620,5.415]],["title/classes/AuthenticationMethodPresentation.html",[33,0.204,613,2.894]],["body/classes/AuthenticationMethodPresentation.html",[0,1.499,3,0.059,4,0.066,5,0.059,12,1.401,13,0.202,14,0.89,17,0.58,19,0.459,20,0.326,21,0.006,30,0.113,31,0.004,32,0.004,33,0.392,35,1.045,42,1.173,45,0.423,50,0.184,51,1.605,54,2.127,55,2.236,56,2.283,57,2.714,58,1.27,65,3.033,79,2.931,88,2.209,90,4.078,97,2.763,104,3.024,105,2.688,106,2.645,110,2.545,112,3.154,117,2.529,125,2.906,126,2.597,138,3.559,267,4.686,271,2.041,316,3.779,482,2.754,589,3.24,590,4.985,591,3.366,592,5.516,593,4.985,594,4.746,598,2.268,599,3.875,600,4.85,601,3.654,602,4.85,603,3.668,604,3.24,605,4.929,606,2.844,607,1.722,608,5.304,609,3.668,610,3.507,611,2.083,612,3.366,613,4.284,614,3.668,615,3.668,616,3.24,617,3.366,618,3.507,621,5.322,622,5.322,623,5.322]],["title/classes/AuthenticationUrlConfig.html",[33,0.204,593,3.006]],["body/classes/AuthenticationUrlConfig.html",[0,1.43,3,0.056,4,0.063,5,0.056,9,0.586,12,1.337,13,0.192,14,0.863,17,0.896,19,0.502,20,0.329,21,0.006,30,0.111,31,0.004,32,0.004,33,0.387,35,0.997,42,1.137,45,0.41,50,0.18,51,1.531,54,2.029,55,2.168,56,2.301,57,2.663,58,1.212,65,2.977,79,2.796,88,2.328,90,4.349,97,2.637,104,2.954,105,2.565,106,2.881,110,3.105,112,2.895,117,2.056,125,3.035,126,2.976,138,3.608,267,4.562,271,2.616,316,4.116,482,2.669,589,3.092,590,4.87,591,3.211,592,5.206,593,5.206,598,2.164,599,4.533,600,5.674,601,4.274,602,5.674,603,4.701,604,4.152,605,4.837,606,2.714,607,1.643,608,4.87,609,3.5,610,3.346,611,1.988,612,3.211,613,3.092,614,3.5,615,3.5,616,3.092,617,3.211,618,3.346,624,5.078,625,5.078,626,5.078]],["title/classes/AuthorizationResponse.html",[33,0.204,627,3.444]],["body/classes/AuthorizationResponse.html",[3,0.076,4,0.085,5,0.076,9,0.792,13,0.26,14,1.045,19,0.6,20,0.25,21,0.006,30,0.085,31,0.005,32,0.005,33,0.354,35,1.349,42,1.145,45,0.413,50,0.16,56,2.259,58,1.638,308,3.235,329,3.187,336,4.778,471,3.902,472,4.292,480,4.417,481,4.411,627,5.99,628,7.371,629,6.123,630,4.857]],["title/controllers/AuthorizeController.html",[139,1.433,631,3.646]],["body/controllers/AuthorizeController.html",[3,0.045,4,0.051,5,0.045,9,0.681,11,3.359,12,2.427,13,0.156,17,0.82,20,0.311,21,0.006,30,0.051,31,0.004,32,0.004,33,0.177,42,1.256,45,0.453,48,0.785,50,0.21,95,1.298,102,1.07,106,1.983,139,2.403,141,1.494,143,1.343,146,1.908,147,0.712,148,2.612,149,1.528,193,2.348,233,0.894,238,1.65,263,5.197,278,5.239,308,3.478,314,4.965,329,2.812,336,4.864,338,3.712,339,1.827,340,2.271,356,2.145,357,4.283,362,1.98,373,2.722,376,2.486,389,2.993,490,2.315,491,1.163,502,1.845,533,1.386,536,3.365,601,3.068,631,4.534,632,3.684,633,1.98,634,4.131,635,5.27,636,4.534,637,5.91,638,4.963,639,5.294,640,6.901,641,7.532,642,3.684,643,5.771,644,4.131,645,4.131,646,5.27,647,4.131,648,4.131,649,5.458,650,5,651,4.131,652,4.131,653,6.179,654,4.131,655,4.131,656,4.131,657,4.131,658,4.131,659,2.907,660,5.27,661,2.722,662,2.847,663,2.515,664,2.207,665,4.756,666,3.169,667,3.583,668,2.722,669,4.201,670,4.131,671,3.169,672,1.885,673,3.169,674,4.131,675,4.131,676,1.76,677,4.131,678,4.131,679,4.131,680,4.131,681,4.763,682,4.131,683,3.684,684,3.389,685,2.993,686,3.169,687,3.684,688,4.131,689,3.684,690,4.131,691,4.131,692,3.169,693,4.131,694,4.131,695,4.131]],["title/classes/AuthorizeQueries.html",[33,0.204,643,3.006]],["body/classes/AuthorizeQueries.html",[3,0.059,4,0.066,5,0.059,13,0.202,14,0.89,17,1.084,19,0.649,20,0.348,21,0.006,30,0.066,31,0.004,32,0.004,33,0.301,35,1.045,42,1.593,45,0.575,50,0.124,55,3.057,56,2.45,58,1.27,353,5.713,643,4.45,681,4.985,696,8.578,697,3.366,698,5.713,699,7.883,700,7.883,701,7.883,702,5.713,703,7.883,704,7.883,705,5.194,706,5.713,707,6.586,708,5.322,709,5.322,710,5.322,711,5.322,712,5.322,713,4.746,714,5.322,715,5.322,716,4.746,717,4.746,718,5.322]],["title/injectables/AuthorizeService.html",[486,0.996,669,2.894]],["body/injectables/AuthorizeService.html",[0,1.164,3,0.028,4,0.032,5,0.028,12,2.099,13,0.098,17,0.846,19,0.569,20,0.306,21,0.006,22,1.076,30,0.051,31,0.003,32,0.003,33,0.111,41,1.618,45,0.467,48,0.491,50,0.196,65,0.933,82,0.792,88,1.088,90,2.418,93,0.806,95,1.339,107,3.148,110,2.496,116,2.314,117,0.778,125,2.18,126,1.948,129,2.612,138,2.413,143,0.939,146,1.684,147,0.445,149,1.401,189,2.316,190,0.85,193,1.467,233,1.986,238,2.066,239,1.269,263,3.148,267,3.268,268,3.967,270,2.847,276,1.766,278,4.282,315,1.237,316,1.237,321,1.34,329,2.775,338,3.042,339,1.885,340,1.246,352,1.421,394,1.87,396,1.87,461,2.47,473,2.849,482,2.532,486,0.866,487,0.97,490,2.982,491,1.164,502,2.353,505,3.232,509,1.379,512,3.171,514,1.421,528,1.34,533,2.899,536,3.324,555,1.779,559,1.632,566,1.7,568,2.305,569,1.87,571,1.87,575,1.98,580,2.349,598,1.1,601,3.359,604,2.517,605,1.516,606,1.379,607,1.337,611,2.024,639,3.967,642,2.301,643,5.041,649,1.87,650,3.747,661,3.407,662,1.779,664,1.379,667,3.764,668,1.7,669,2.517,671,1.98,672,1.178,681,3.27,698,4.285,702,4.285,719,1.98,720,3.686,721,4.134,722,4.242,723,4.134,724,4.242,725,4.134,726,4.242,727,1.516,728,3.39,729,4.26,730,4.414,731,2.581,732,2.581,733,3.171,734,2.581,735,5.664,736,3.391,737,2.581,738,5.308,739,2.581,740,2.581,741,1.467,742,2.146,743,3.391,744,2.581,745,2.581,746,2.581,747,3.391,748,2.581,749,2.581,750,2.581,751,3.939,752,4.851,753,4.851,754,2.834,755,2.117,756,4.851,757,1.87,758,1.421,759,2.117,760,1.98,761,1.87,762,2.117,763,2.995,764,3.171,765,2.995,766,2.117,767,2.117,768,3.391,769,2.117,770,3.391,771,2.614,772,4.851,773,4.091,774,2.117,775,2.117,776,1.98,777,2.117,778,2.117,779,1.98,780,1.7,781,1.98,782,1.98,783,2.117,784,1.98,785,2.117,786,1.98,787,2.117,788,2.117,789,3.391,790,2.117,791,1.98,792,2.117,793,2.117,794,4.056,795,2.117,796,2.117,797,2.117,798,2.117,799,2.117,800,4.242,801,3.967,802,2.088,803,3.391,804,3.171,805,2.117,806,4.851,807,3.391,808,5.254,809,2.117,810,3.391,811,3.391,812,3.391,813,3.391,814,3.391,815,2.033,816,3.391,817,2.117,818,2.117,819,2.117,820,2.117,821,2.117,822,2.117,823,2.117,824,3.391,825,2.117,826,2.117,827,1.571,828,1.34,829,2.117,830,1.98,831,2.117,832,1.467,833,2.117,834,2.117,835,1.98,836,1.632,837,3.391,838,1.467,839,2.117,840,4.242,841,2.117,842,2.117,843,2.117,844,2.36,845,2.117,846,2.117,847,1.87,848,3.391,849,2.117,850,3.391,851,2.209,852,2.117,853,4.242,854,2.117,855,2.117,856,2.117,857,2.117,858,2.117,859,1.7,860,2.614,861,1.779,862,2.117,863,1.98,864,2.117,865,3.967,866,2.117,867,2.117,868,2.117,869,4.242,870,0.916,871,2.117,872,2.117,873,3.967,874,2.117,875,2.117,876,2.117]],["title/entities/CertEntity.html",[877,1.211,878,2.617]],["body/entities/CertEntity.html",[3,0.053,4,0.06,5,0.053,7,3.601,9,1.006,11,4.274,12,2.127,13,0.184,14,0.836,15,5.45,16,1.771,17,0.72,19,0.592,20,0.349,21,0.006,23,2.15,24,4.18,25,2.641,26,3.017,27,2.535,30,0.082,31,0.004,32,0.004,33,0.208,42,1.515,45,0.546,48,1.772,50,0.154,276,1.709,399,3.432,400,2.095,405,4.966,427,1.541,446,2.661,480,4.316,870,2.345,877,2.058,878,3.64,879,2.267,880,3.978,881,5.071,882,5.894,883,3.798,884,3.905,885,4.448,886,4.419,887,4.849,888,4.746,889,3.091,890,5.345,891,4.849,892,3.168,893,4.849,894,3.8,895,4.849,896,2.67,897,3.367,898,2.755,899,4.849,900,2.816,901,2.301,902,4.849,903,5.45,904,4.849,905,4.419,906,4.849,907,3.757,908,3.757,909,1.978,910,2.755,911,1.978,912,3.601]],["title/classes/ClaimsQuery.html",[33,0.204,59,2.4]],["body/classes/ClaimsQuery.html",[3,0.042,4,0.047,5,0.042,7,1.708,9,0.645,12,2.252,13,0.145,14,0.708,16,1.693,17,0.72,19,0.608,20,0.339,21,0.006,25,2.236,26,1.749,27,1.469,28,2.333,30,0.103,31,0.004,32,0.004,33,0.374,35,0.752,41,2.846,42,1.102,45,0.398,48,1.728,50,0.194,51,1.155,52,4.145,54,1.531,55,2.888,56,2.289,57,2.699,58,0.914,59,2.827,60,3.34,61,3.34,70,3.804,76,2.495,82,1.175,88,1.474,100,2.333,102,0.992,104,2.147,106,1.285,110,2.024,116,1.499,125,2.438,126,1.262,206,3.17,238,2.906,252,2.11,276,0.871,307,1.499,329,1.262,400,1.552,427,1.218,446,2.178,467,1.563,480,4.317,481,1.836,482,2.588,483,1.597,485,2.11,564,2.251,598,1.632,607,1.811,630,2.251,659,1.884,663,4.428,672,1.749,832,2.177,838,2.177,851,2.047,870,1.359,877,1.684,883,1.935,884,1.989,885,3.082,886,3.289,888,3.289,889,1.791,892,3.486,894,2.439,897,2.333,898,1.597,900,1.632,901,1.334,905,3.289,907,2.177,908,2.177,909,1.563,910,2.333,911,1.563,912,2.817,913,4.599,914,2.251,915,3.831,916,3.416,917,3.416,918,3.831,919,2.827,920,3.641,921,3.688,922,2.991,923,3.758,924,2.524,925,4.357,926,2.423,927,4.026,928,2.524,929,4.792,930,4.792,931,4.599,932,4.133,933,4.133,934,4.357,935,2.524,936,2.524,937,4.026,938,2.524,939,2.524,940,2.524,941,2.524,942,2.332,943,2.524,944,2.524,945,3.688,946,4.428,947,2.524,948,2.047,949,2.524,950,2.906,951,2.524,952,2.423,953,2.047,954,3.4,955,2.332,956,2.251,957,2.177,958,2.332,959,1.989,960,2.524]],["title/controllers/ClientController.html",[139,1.433,417,3.646]],["body/controllers/ClientController.html",[3,0.051,4,0.057,5,0.051,9,0.531,13,0.174,16,1.996,17,0.903,19,0.594,20,0.302,21,0.006,30,0.057,31,0.004,32,0.004,33,0.197,42,1.383,45,0.499,50,0.209,95,1.43,102,1.192,139,2.206,141,1.664,143,1.449,146,2.037,147,0.793,149,1.683,231,2.615,271,3.746,308,3.247,315,4.219,338,1.801,339,2.012,340,1.923,356,3.799,360,3.032,362,2.206,365,4.103,376,2.614,417,4.892,439,2.802,440,3.747,461,2.027,493,5.467,498,1.918,499,2.534,501,3.335,502,1.437,526,3.221,547,3.53,633,2.206,881,4.892,961,4.103,962,6.377,963,6.377,964,4.892,965,4.892,966,4.892,967,4.602,968,5.674,969,4.734,970,4.602,971,3.136,972,4.602,973,4.202,974,4.602,975,4.602,976,5.686,977,4.602,978,4.602,979,4.602,980,4.602,981,6.377,982,4.602,983,2.005,984,2.534,985,4.103,986,2.91,987,3.335,988,3.775,989,3.53,990,4.602,991,4.602,992,4.602,993,4.602,994,4.602,995,4.602,996,4.602,997,4.602,998,4.602,999,4.602,1000,4.602,1001,4.602,1002,4.602,1003,4.602,1004,4.602]],["title/classes/ClientCredentialsDto.html",[33,0.204,325,3.646]],["body/classes/ClientCredentialsDto.html",[3,0.078,4,0.087,5,0.078,13,0.268,14,1.065,19,0.606,20,0.306,21,0.006,30,0.087,31,0.005,32,0.005,33,0.361,35,1.39,42,1.403,45,0.506,50,0.165,56,2.419,58,1.689,325,6.458,353,6.51,354,8.011,1005,8.011,1006,6.313,1007,7.079,1008,7.079]],["title/entities/ClientEntity.html",[442,3.006,877,1.211]],["body/entities/ClientEntity.html",[3,0.055,4,0.062,5,0.055,9,1.015,13,0.19,14,0.854,17,0.959,19,0.597,20,0.327,21,0.006,23,1.665,26,3.735,27,3.139,30,0.062,31,0.004,32,0.004,33,0.289,42,1.468,45,0.529,48,1.711,50,0.191,55,2.146,56,2.084,58,1.194,70,3.321,103,2.756,276,1.737,305,3.237,315,4.663,400,2.22,427,1.59,442,4.271,446,2.696,447,3.839,468,4.271,498,3.186,499,2.756,514,4.209,526,4.316,541,4.202,877,1.72,879,2.34,881,5.181,892,3.664,896,2.756,897,2.815,898,2.815,909,3.486,910,2.815,1009,4.463,1010,3.968,1011,4.894,1012,7.851,1013,4.463,1014,5.004,1015,4.463,1016,5.004,1017,6.753,1018,5.004,1019,5.004,1020,6.753,1021,5.004,1022,5.004,1023,6.753,1024,5.004,1025,5.004,1026,5.004,1027,4.894,1028,6.753,1029,6.022,1030,5.181]],["title/classes/ClientSecretResponseDto.html",[33,0.204,989,3.646]],["body/classes/ClientSecretResponseDto.html",[3,0.082,4,0.091,5,0.082,13,0.281,14,1.094,19,0.564,20,0.27,21,0.006,30,0.091,31,0.005,32,0.005,33,0.318,35,1.457,45,0.446,471,4.215,526,4.855,989,6.637,1031,7.715,1032,6.613]],["title/classes/ClientView.html",[33,0.204,1033,3.444]],["body/classes/ClientView.html",[0,1.78,3,0.07,4,0.078,5,0.07,9,0.986,13,0.24,14,0.994,16,1.325,17,0.974,19,0.654,20,0.325,21,0.006,30,0.105,31,0.005,32,0.005,33,0.271,35,1.242,45,0.538,50,0.147,77,3.849,106,2.121,233,1.369,276,1.943,340,2.827,439,4.785,440,3.715,460,4.851,472,3.283,514,5.066,515,4.358,541,4.206,659,3.11,968,4.97,986,3.998,987,4.582,1033,5.695,1034,4.851,1035,6.323,1036,6.323,1037,6.323,1038,6.323,1039,4.851,1040,4.851,1041,4.851,1042,4.851,1043,4.851,1044,5.187,1045,5.638,1046,5.638,1047,5.638,1048,5.638]],["title/interfaces/ClientsProvider.html",[0,1.338,440,2.793]],["body/interfaces/ClientsProvider.html",[0,1.537,2,2.616,3,0.06,4,0.067,5,0.06,9,0.629,13,0.207,16,1.673,17,1.016,19,0.659,20,0.328,21,0.006,30,0.098,31,0.005,32,0.005,33,0.234,45,0.543,50,0.127,77,3.323,95,1.555,106,1.831,143,1.626,146,2.018,233,1.181,276,1.998,339,2.188,340,2.911,439,4.356,440,4.204,460,4.187,472,4.144,514,5.137,515,5.501,541,2.684,584,3.451,659,2.684,964,5.489,965,5.489,966,5.489,968,5.357,986,3.451,987,3.955,1033,3.955,1034,4.187,1039,5.489,1040,5.489,1041,5.489,1042,5.489,1043,5.489,1044,4.478,1045,4.867,1046,4.867,1047,4.867,1048,4.867,1049,5.87,1050,5.87,1051,6.38,1052,5.458,1053,5.458,1054,5.458,1055,5.458,1056,5.458,1057,4.867,1058,5.458]],["title/classes/CreateClientDto.html",[33,0.204,968,3.006]],["body/classes/CreateClientDto.html",[3,0.08,4,0.09,5,0.08,21,0.006,30,0.09,31,0.005,32,0.005,33,0.311,35,1.426,38,3.809,50,0.199,102,1.88,233,1.849,276,1.941,400,2.005,442,4.59,526,4.315,968,5.403,1059,6.473,1060,6.473,1061,8.544,1062,4.59,1063,5.955]],["title/classes/CreateTenantDto.html",[33,0.204,1064,3.276]],["body/classes/CreateTenantDto.html",[3,0.074,4,0.083,5,0.074,13,0.256,14,1.035,17,0.891,20,0.246,21,0.006,30,0.083,31,0.005,32,0.005,33,0.351,35,1.327,38,3.65,42,1.127,45,0.406,48,1.557,50,0.213,55,2.602,56,2.086,58,1.612,70,3.324,102,1.75,233,1.772,382,3.65,446,2.226,493,5.394,498,3.671,499,3.722,541,4.332,1062,4.274,1064,5.643,1065,7.301,1066,6.027,1067,8.187,1068,6.027,1069,6.759,1070,5.545]],["title/entities/CredentialConfig.html",[877,1.211,1071,2.617]],["body/entities/CredentialConfig.html",[3,0.035,4,0.04,5,0.035,9,0.769,13,0.122,14,0.622,16,1.249,17,1.017,19,0.594,20,0.346,21,0.006,23,1.47,25,1.287,28,2.781,30,0.082,31,0.003,32,0.003,33,0.364,34,3.283,37,1.83,39,4.17,40,4.45,42,1.519,45,0.548,48,1.757,50,0.198,51,1.797,55,2.744,56,2.231,57,2.628,58,1.422,63,1.506,65,1.164,66,1.83,67,1.83,71,3.283,78,3.283,81,2.932,82,1.508,84,3.674,93,2.083,95,1.238,99,2.793,100,2.049,101,1.892,102,0.834,104,2.287,117,1.797,130,1.892,131,3.92,134,3.92,135,1.721,136,1.892,137,2.888,237,2.094,276,1.355,362,1.543,400,1.687,427,1.023,446,2.198,467,2.006,607,1.042,611,1.924,706,2.333,707,2.219,802,3.37,870,2.367,877,1.252,878,3.674,879,1.506,892,4.294,894,2.907,896,2.707,897,3.386,898,2.781,900,2.094,901,1.711,909,1.314,910,2.485,911,1.314,912,2.54,914,1.892,919,2.483,920,3.283,922,2.626,950,3.095,953,1.721,954,3.541,1071,2.707,1072,2.333,1073,4.32,1074,4.32,1075,4.32,1076,3.388,1077,3.388,1078,4.574,1079,4.796,1080,3.37,1081,3.562,1082,4.915,1083,3.22,1084,4.598,1085,2.871,1086,3.22,1087,4.383,1088,3.22,1089,3.22,1090,3.22,1091,2.642,1092,2.483,1093,3.22,1094,3.22,1095,3.771,1096,3.771,1097,3.771,1098,3.771,1099,3.562,1100,3.771,1101,3.771,1102,3.771,1103,3.771,1104,3.771,1105,3.771,1106,3.22,1107,2.871,1108,3.771,1109,3.22,1110,3.22,1111,4.915,1112,4.915,1113,3.22,1114,3.22,1115,3.22,1116,3.22,1117,3.22,1118,4.219,1119,4.033,1120,3.22,1121,3.22,1122,3.22,1123,2.47,1124,3.22,1125,3.22,1126,3.562,1127,2.47,1128,2.122,1129,2.333,1130,2.219,1131,2.47,1132,4.952,1133,1.584,1134,3.674,1135,2.122,1136,2.47,1137,2.47,1138,2.47,1139,2.122,1140,3.562,1141,2.47,1142,2.47,1143,2.47,1144,2.47,1145,2.333,1146,1.96,1147,2.122]],["title/classes/CredentialConfigCreate.html",[33,0.204,1148,3.444]],["body/classes/CredentialConfigCreate.html",[3,0.08,4,0.089,5,0.08,21,0.006,23,2.103,30,0.089,31,0.005,32,0.005,33,0.31,35,1.423,38,3.804,50,0.199,102,1.876,117,2.184,276,1.939,400,2.003,1062,4.581,1071,3.989,1074,6.183,1148,6.183,1149,6.459,1150,5.557,1151,8.533,1152,5.943]],["title/classes/CredentialConfigMapping.html",[33,0.204,1153,3.646]],["body/classes/CredentialConfigMapping.html",[3,0.07,4,0.078,5,0.07,9,0.733,13,0.241,14,0.997,16,1.796,19,0.559,20,0.231,21,0.006,26,3.599,27,3.025,30,0.097,31,0.005,32,0.005,33,0.367,35,1.249,38,2.834,42,1.06,45,0.382,50,0.2,52,3.687,56,2.184,58,1.517,63,2.973,88,2.257,102,1.647,233,1.376,276,1.445,400,1.492,472,4.451,607,2.981,611,3.508,802,3.211,883,3.211,884,3.301,1062,4.021,1153,6.05,1154,5.216,1155,7.033,1156,5.094,1157,6.358,1158,5.216,1159,4.382,1160,5.67,1161,4.878,1162,4.878,1163,4.021,1164,5.67]],["title/injectables/CredentialConfigService.html",[486,0.996,1165,3.132]],["body/injectables/CredentialConfigService.html",[3,0.032,4,0.035,5,0.088,7,1.277,9,0.785,13,0.109,16,1.969,17,0.787,19,0.602,20,0.263,21,0.006,22,2.309,23,1.107,30,0.035,31,0.003,32,0.003,33,0.237,45,0.47,48,0.854,50,0.213,51,0.864,53,1.888,58,0.684,76,2.002,82,1.699,88,2.058,93,0.895,95,1.245,117,2.664,129,1.447,135,1.531,143,1.02,146,1.839,147,0.494,149,1.272,187,2.05,189,2.533,190,0.944,202,1.812,203,1.888,205,1.812,206,2.153,233,1.892,237,2.901,239,1.409,276,2.008,286,2.076,307,1.121,332,3.254,339,1.752,340,2.178,350,2.198,376,2.277,400,2.166,422,1.145,426,3.297,427,0.911,486,0.941,487,1.077,489,1.965,490,2.423,491,1.765,502,1.958,516,1.812,517,2.198,528,2.332,533,2.423,540,2.528,607,2.712,659,2.209,676,1.221,728,3.531,758,1.578,844,1.308,877,1.991,879,2.1,983,3.29,1071,4.691,1076,2.552,1148,4.934,1152,2.351,1156,3.563,1165,4.131,1166,6.971,1167,5.665,1168,2.198,1169,2.268,1170,4.491,1171,3.095,1172,3.684,1173,2.865,1174,2.959,1175,4.543,1176,2.865,1177,5.538,1178,4.491,1179,2.865,1180,2.332,1181,4.305,1182,5.926,1183,3.254,1184,4.491,1185,4.005,1186,2.865,1187,3.817,1188,4.491,1189,2.865,1190,2.865,1191,4.013,1192,3.095,1193,2.865,1194,4.491,1195,2.865,1196,3.254,1197,4.013,1198,4.437,1199,4.491,1200,3.254,1201,1.488,1202,3.684,1203,2.076,1204,2.351,1205,1.975,1206,2.351,1207,1.975,1208,2.555,1209,2.076,1210,2.076,1211,3.684,1212,2.865,1213,4.81,1214,2.351,1215,2.076,1216,3.254,1217,2.076,1218,2.076,1219,2.076,1220,2.076,1221,4.544,1222,2.734,1223,2.351,1224,2.351,1225,3.817,1226,2.351,1227,5.777,1228,2.84,1229,2.351,1230,2.198,1231,2.351,1232,2.351,1233,2.351,1234,2.351,1235,2.865,1236,4.544,1237,4.544,1238,2.351,1239,2.198,1240,2.351,1241,2.351,1242,5.538,1243,2.351,1244,3.684,1245,2.555,1246,2.351,1247,2.351,1248,2.198,1249,2.351,1250,2.351,1251,2.198,1252,2.351,1253,2.351,1254,5.538,1255,4.249,1256,2.865,1257,4.013,1258,3.817,1259,3.684,1260,3.254,1261,3.684,1262,1.812,1263,2.959,1264,3.649,1265,2.865,1266,2.351,1267,2.555,1268,2.865,1269,2.555,1270,2.865,1271,2.351,1272,2.865,1273,2.865,1274,2.076,1275,2.351,1276,2.865,1277,2.198,1278,2.865,1279,2.865]],["title/classes/CredentialIssuerMetadataDto.html",[33,0.204,1280,3.646]],["body/classes/CredentialIssuerMetadataDto.html",[3,0.057,4,0.064,5,0.057,9,0.6,13,0.197,14,0.876,19,0.616,20,0.34,21,0.006,27,2.658,30,0.064,31,0.004,32,0.004,33,0.223,35,1.022,45,0.555,76,3.09,82,2.55,126,3.041,154,4.441,314,4.577,320,4.777,321,3.598,336,4.315,467,2.122,479,3.99,510,5.317,513,5.686,568,4.357,607,3.024,611,3.485,901,2.413,1010,3.056,1134,4.767,1156,3.939,1225,3.585,1280,5.317,1281,6.159,1282,8.335,1283,4.267,1284,2.864,1285,7.794,1286,7.794,1287,7.794,1288,6.95,1289,7.794,1290,7.794,1291,7.794,1292,5.201,1293,6.93,1294,5.201,1295,3.703,1296,6.93,1297,5.201,1298,6.95,1299,5.201,1300,5.201,1301,5.201,1302,6.18,1303,5.201,1304,6.93,1305,5.201,1306,4.219,1307,4.638,1308,5.201]],["title/classes/CredentialQuery.html",[33,0.204,60,2.4]],["body/classes/CredentialQuery.html",[3,0.041,4,0.046,5,0.041,7,1.662,9,0.632,12,2.235,13,0.141,14,0.694,16,1.677,17,0.833,19,0.605,20,0.342,21,0.006,25,2.868,26,1.701,27,1.43,28,2.713,30,0.102,31,0.003,32,0.003,33,0.371,35,0.732,41,2.147,42,1.275,45,0.46,48,1.718,50,0.193,51,1.124,52,4.05,54,1.489,55,2.872,56,2.302,57,2.676,58,0.889,59,1.882,60,3.625,61,3.287,70,3.762,76,2.445,82,1.143,88,1.444,100,2.286,102,0.965,104,2.496,106,1.25,110,1.983,116,1.459,125,2.399,126,1.228,206,1.787,238,2.868,252,2.052,276,0.847,296,2.859,307,1.459,329,1.228,400,1.528,427,1.185,446,2.144,467,1.521,480,4.275,481,1.787,482,2.547,483,1.554,485,2.052,564,2.19,598,1.588,607,1.775,630,2.19,659,1.833,663,4.37,672,1.701,832,2.118,838,2.118,851,1.992,870,1.322,877,1.658,883,1.882,884,1.935,885,3.02,886,3.223,888,3.223,889,1.743,892,3.44,894,2.39,897,2.286,898,1.554,900,1.588,901,1.298,905,3.223,907,2.118,908,2.118,909,1.521,910,2.286,911,1.521,912,2.773,913,5.059,914,2.19,919,2.77,920,3.584,921,3.614,922,2.931,923,3.699,924,2.456,925,4.288,926,2.357,927,3.962,928,2.456,929,4.729,930,4.729,931,4.539,932,4.087,933,4.079,934,4.288,935,2.456,936,2.456,937,4.37,938,2.456,939,2.456,940,2.456,941,4.288,942,3.962,943,4.288,944,2.456,945,3.614,946,4.37,947,2.456,948,1.992,949,2.456,950,2.848,951,2.456,952,2.357,953,1.992,954,3.356,955,2.269,956,2.19,957,2.118,958,2.269,959,1.935,960,2.456,1309,3.727,1310,3.727,1311,3.727,1312,3.727,1313,3.324,1314,3.324,1315,3.727]],["title/classes/CredentialSetQuery.html",[33,0.204,61,2.4]],["body/classes/CredentialSetQuery.html",[3,0.042,4,0.048,5,0.042,7,1.721,9,0.649,12,2.257,13,0.146,14,0.712,16,1.53,17,0.723,19,0.604,20,0.337,21,0.006,25,2.249,26,1.762,27,1.481,28,2.769,30,0.103,31,0.004,32,0.004,33,0.374,35,0.758,41,2.203,42,0.938,45,0.338,48,1.73,50,0.195,51,1.164,52,4.087,54,1.543,55,2.892,56,2.262,57,2.706,58,0.921,59,1.95,60,3.355,61,3.687,70,3.817,76,2.961,82,1.185,88,1.482,100,2.346,102,1,104,2.159,106,1.295,110,2.035,116,2.6,125,2.449,126,1.272,206,1.851,238,2.917,252,3.658,276,0.877,307,1.511,329,1.272,400,1.559,427,1.227,446,2.188,467,1.576,480,4.329,481,1.851,482,2.6,483,1.61,485,2.126,564,2.269,598,1.645,607,1.821,630,2.269,659,1.899,663,4.444,672,1.762,832,2.194,838,2.194,851,2.063,870,1.37,877,1.692,883,1.95,884,2.005,885,3.099,886,3.307,888,3.307,889,1.805,892,3.499,894,2.453,897,2.346,898,1.61,900,1.645,901,1.344,905,3.307,907,2.194,908,2.194,909,1.576,910,2.346,911,1.576,912,2.83,913,4.201,914,2.269,919,2.843,920,3.658,921,3.709,922,3.008,923,3.775,924,2.544,925,4.377,926,2.442,927,4.044,928,2.544,929,4.81,930,4.81,931,4.616,932,4.147,933,4.148,934,4.377,935,2.544,936,2.544,937,4.044,938,2.544,939,2.544,940,2.544,941,2.544,942,2.351,943,2.544,944,2.544,945,4.377,946,4.444,947,2.544,948,2.063,949,2.544,950,2.922,951,2.544,952,2.442,953,2.063,954,3.413,955,2.351,956,2.269,957,2.194,958,2.351,959,2.005,960,2.544,1316,3.168,1317,3.861,1318,3.861,1319,3.861,1320,3.861]],["title/controllers/CredentialsController.html",[139,1.433,1321,3.646]],["body/controllers/CredentialsController.html",[3,0.057,4,0.064,5,0.057,9,0.6,13,0.197,16,1.742,17,0.849,19,0.508,20,0.284,21,0.006,30,0.064,31,0.004,32,0.004,33,0.223,42,1.299,45,0.469,50,0.208,88,2.188,95,1.343,117,2.61,139,2.35,141,1.881,143,1.575,146,2.064,147,0.896,149,1.581,271,3.541,308,3.051,338,2.713,339,1.89,356,4.047,375,2.168,376,2.421,400,1.951,498,2.168,568,2.319,607,3.024,633,2.493,676,2.216,969,4.643,973,3.427,983,2.266,984,2.864,1148,6.023,1156,4.724,1165,5.135,1167,3.769,1169,3.5,1180,3.598,1196,5.022,1206,4.267,1207,3.585,1321,5.979,1322,4.638,1323,6.93,1324,6.394,1325,6.93,1326,7.794,1327,4.638,1328,5.201,1329,5.201,1330,5.201,1331,5.201,1332,5.201,1333,3.289,1334,3.289,1335,3.289,1336,4.267,1337,3.585,1338,4.267,1339,3.99,1340,4.566,1341,5.201,1342,5.201,1343,5.201,1344,3.585,1345,3.99,1346,5.201]],["title/controllers/CredentialsMetadataController.html",[139,1.433,1347,3.646]],["body/controllers/CredentialsMetadataController.html",[3,0.063,4,0.071,5,0.063,9,0.664,13,0.218,16,1.919,17,0.807,19,0.635,20,0.315,21,0.006,27,2.842,30,0.071,31,0.005,32,0.005,33,0.247,42,1.235,45,0.446,48,1.095,50,0.191,82,2.273,88,1.951,95,1.277,102,1.492,139,1.737,141,2.083,143,1.684,146,1.831,147,0.993,148,3.643,149,1.503,276,2.144,339,1.797,373,3.795,375,2.401,376,2.386,401,4.511,489,2.629,607,2.963,633,2.761,676,2.454,932,3.959,1077,4.914,1079,5.264,1187,5.264,1284,4.08,1340,5.397,1347,5.684,1348,6.284,1349,6.72,1350,5.137,1351,5.76,1352,5.76,1353,5.76,1354,5.76,1355,5.76,1356,5.76,1357,5.76,1358,5.137,1359,5.76,1360,5.76,1361,5.76,1362,7.409,1363,5.76,1364,5.76,1365,5.76,1366,5.76]],["title/injectables/CredentialsService.html",[486,0.996,1340,3.132]],["body/injectables/CredentialsService.html",[3,0.031,4,0.035,5,0.031,9,0.326,13,0.107,16,1.505,17,0.736,19,0.575,20,0.283,21,0.006,23,1.095,30,0.035,31,0.003,32,0.003,33,0.121,45,0.432,48,0.537,50,0.209,63,1.321,81,3.06,82,1.909,88,2.267,93,0.882,95,1.166,96,1.389,116,2.148,117,1.655,129,3.142,143,1.009,146,1.831,147,0.487,149,1.262,189,2.61,190,0.931,233,1.887,276,1.929,307,1.106,339,1.64,340,2.165,362,1.354,376,2.508,382,3.348,401,4.117,404,2.318,405,2.61,422,1.129,426,2.839,427,0.898,429,1.606,461,2.282,467,1.153,486,0.931,487,1.062,489,1.576,490,2.848,491,1.752,502,2.112,505,3.015,509,2.373,516,1.787,528,1.467,533,2.52,536,3.182,566,2.926,583,2.167,586,4.21,587,3.977,599,2.446,607,2.85,664,1.51,728,3.512,741,1.606,742,1.467,751,4.371,754,3.836,757,2.047,758,1.556,773,3.934,794,3.974,802,4.348,815,2.699,827,1.72,828,1.467,870,1.002,932,2.373,950,1.467,971,1.389,983,1.231,1071,3.426,1073,3.218,1076,2.524,1077,3.119,1079,4.117,1080,3.142,1092,2.772,1118,1.787,1128,1.861,1129,2.047,1130,1.947,1152,2.318,1156,2.524,1169,2.243,1187,3.787,1191,3.218,1200,2.047,1201,1.467,1208,2.519,1288,4.894,1295,1.51,1340,4.099,1367,2.519,1368,5.488,1369,5.488,1370,5.488,1371,4.441,1372,2.519,1373,4.571,1374,6.221,1375,4.736,1376,2.825,1377,2.825,1378,6.763,1379,2.825,1380,4.441,1381,3.218,1382,5.935,1383,2.825,1384,2.825,1385,2.825,1386,2.825,1387,4.441,1388,2.825,1389,6.221,1390,5.488,1391,1.947,1392,3.961,1393,4.441,1394,3.656,1395,2.167,1396,2.167,1397,3.961,1398,2.167,1399,3.961,1400,2.167,1401,2.047,1402,2.519,1403,1.66,1404,2.047,1405,1.947,1406,2.825,1407,1.66,1408,4.441,1409,3.961,1410,2.825,1411,2.825,1412,5.548,1413,2.825,1414,2.825,1415,2.825,1416,4.441,1417,4.441,1418,4.441,1419,6.763,1420,2.825,1421,4.441,1422,2.825,1423,5.488,1424,2.825,1425,2.825,1426,2.825,1427,4.441,1428,2.519,1429,4.441,1430,4.441,1431,2.825,1432,2.825,1433,2.825,1434,2.825,1435,2.825,1436,2.318,1437,2.825,1438,2.825,1439,2.825,1440,2.825,1441,2.519,1442,2.825,1443,2.519,1444,2.318,1445,2.825,1446,2.825,1447,1.72,1448,3.061,1449,2.167,1450,2.825,1451,2.825,1452,2.825,1453,2.318,1454,1.861,1455,2.318,1456,2.519,1457,4.441,1458,5.548,1459,2.825,1460,2.825,1461,2.825,1462,2.047,1463,2.167,1464,2.825,1465,1.947,1466,4.441,1467,2.047,1468,2.825,1469,2.825,1470,2.825,1471,2.825,1472,4.441]],["title/modules/CryptoImplementatationModule.html",[158,1.538,1473,3.444]],["body/modules/CryptoImplementatationModule.html",[3,0.075,4,0.084,5,0.075,21,0.006,30,0.084,31,0.005,32,0.005,33,0.291,50,0.206,147,1.169,158,2.854,160,3.025,161,3.427,162,3.626,163,3.626,164,3.337,165,4.456,166,4.456,182,4.385,183,3.626,184,3.626,187,3.097,188,5.947,190,2.235,312,6.296,1262,4.291,1375,6.053,1403,3.987,1404,4.917,1473,6.993,1474,6.051,1475,6.051,1476,6.051,1477,4.677,1478,6.785]],["title/interfaces/CryptoImplementation.html",[0,1.338,1479,3.276]],["body/interfaces/CryptoImplementation.html",[0,2.301,2,2.747,3,0.063,4,0.071,5,0.063,9,0.661,13,0.217,14,0.934,17,0.804,19,0.596,20,0.333,21,0.006,23,2.127,30,0.071,31,0.005,32,0.005,45,0.491,95,1.408,143,1.678,146,1.827,339,1.791,340,2.842,376,2.151,461,2.347,483,3.079,827,4.975,828,4.481,1381,6.254,1403,5.071,1428,7.696,1477,5.948,1479,5.09,1480,4.702,1481,6.059,1482,7.385,1483,6.059,1484,5.352,1485,7.081,1486,7.385,1487,7.385,1488,5.731,1489,6.586,1490,5.632,1491,6.586,1492,9.425,1493,5.731,1494,6.621,1495,6.059,1496,6.586,1497,5.731,1498,6.269,1499,6.586,1500,3.95,1501,3.776,1502,4.702,1503,3.624]],["title/injectables/CryptoImplementationService.html",[486,0.996,1375,2.894]],["body/injectables/CryptoImplementationService.html",[3,0.063,4,0.07,5,0.063,13,0.215,17,0.8,20,0.267,21,0.006,30,0.091,31,0.005,32,0.005,33,0.243,45,0.489,50,0.208,93,1.775,95,1.266,106,2.464,143,1.669,146,2.04,147,0.98,149,1.807,189,2.886,190,1.872,339,1.781,375,2.369,376,1.656,405,4.316,458,5.063,461,1.806,486,1.539,487,2.137,491,1.6,505,2.534,580,4.889,828,4.625,863,4.361,865,5.635,870,2.606,1262,5.634,1375,4.472,1381,5.323,1394,3.34,1395,4.361,1396,4.361,1403,5.055,1477,5.93,1479,5.61,1503,5.634,1504,4.663,1505,8.603,1506,8.139,1507,5.684,1508,5.684,1509,7.346,1510,5.684,1511,5.635,1512,7.058,1513,5.684,1514,5.684,1515,7.258,1516,8.139,1517,6.834,1518,5.684]],["title/modules/CryptoModule.html",[158,1.538,171,2.701]],["body/modules/CryptoModule.html",[3,0.069,4,0.077,5,0.069,21,0.006,30,0.077,31,0.005,32,0.005,33,0.268,50,0.224,141,2.826,147,1.08,158,2.755,160,2.793,161,3.164,162,3.348,163,3.348,164,3.081,165,4.301,166,4.301,171,5.536,182,4.175,183,3.348,184,3.348,187,2.859,421,3.681,422,2.503,446,2.574,728,4.602,878,3.45,911,2.556,1519,5.587,1520,5.587,1521,5.587,1522,6.224,1523,6.265,1524,6.533,1525,5.587,1526,6.265,1527,6.265,1528,5.149,1529,5.587,1530,6.265,1531,5.587]],["title/classes/DBKeyService.html",[33,0.204,1532,3.646]],["body/classes/DBKeyService.html",[3,0.028,4,0.031,5,0.07,7,1.126,9,0.291,13,0.096,14,0.514,16,1.617,17,0.912,19,0.639,20,0.334,21,0.006,22,3.116,23,2.365,24,4.323,30,0.063,31,0.003,32,0.003,33,0.108,35,0.496,38,1.811,44,5.417,45,0.511,48,0.772,50,0.206,93,0.789,95,1.444,96,2.507,143,0.923,146,1.979,149,1.606,189,2.294,190,0.832,222,1.741,233,1.784,276,2.098,338,2.286,339,2.031,340,2.69,362,1.211,376,1.864,399,3.732,400,1.605,401,2.473,405,2.387,426,3.28,461,1.62,489,2.652,490,2.885,491,1.144,502,2.785,505,1.811,533,2.588,540,1.854,568,1.811,683,3.623,727,1.484,728,2.383,741,3.886,742,1.311,754,3.445,827,3.896,844,1.854,870,0.896,878,1.391,903,4.232,971,2.872,983,1.77,1011,4.232,1076,5.269,1147,2.677,1169,2.052,1181,1.391,1198,2.387,1262,4.047,1375,3.555,1394,1.484,1403,2.387,1404,1.83,1407,1.484,1465,2.8,1479,3.513,1490,2.8,1494,3.117,1495,2.072,1500,4.411,1501,5.332,1515,2.252,1528,1.664,1532,3.117,1533,6.409,1534,2.252,1535,2.8,1536,5.578,1537,4.545,1538,4.063,1539,4.063,1540,6.666,1541,3.333,1542,4.48,1543,3.623,1544,3.623,1545,4.791,1546,4.182,1547,4.063,1548,3.333,1549,2.526,1550,4.063,1551,3.333,1552,2.252,1553,2.526,1554,4.063,1555,3.117,1556,4.063,1557,2.526,1558,2.8,1559,4.48,1560,4.063,1561,6.4,1562,2.526,1563,3.848,1564,5.208,1565,2.526,1566,2.526,1567,2.526,1568,3.623,1569,3.693,1570,2.526,1571,4.063,1572,2.526,1573,2.569,1574,3.623,1575,2.526,1576,3.623,1577,4.232,1578,5.84,1579,2.526,1580,2.252,1581,2.526,1582,1.83,1583,5.84,1584,3.623,1585,2.526,1586,4.182,1587,1.276,1588,1.741,1589,3.333,1590,1.938,1591,1.741,1592,2.072,1593,1.938,1594,1.938,1595,2.252,1596,2.072,1597,2.526,1598,2.526,1599,2.526,1600,2.526,1601,4.545,1602,6.4,1603,2.072,1604,2.526,1605,4.063,1606,2.526,1607,2.526,1608,2.526,1609,2.526,1610,2.526,1611,2.526,1612,2.526,1613,2.526,1614,2.072,1615,2.526,1616,2.526,1617,2.526,1618,2.526,1619,2.526,1620,5.097,1621,2.526,1622,2.526,1623,2.526,1624,2.526,1625,2.526,1626,2.252,1627,2.526,1628,2.252,1629,2.526,1630,2.252,1631,5.097,1632,4.063,1633,3.623,1634,4.063,1635,2.526,1636,2.526,1637,2.526,1638,2.526,1639,2.526,1640,2.526]],["title/classes/DCQL.html",[33,0.204,946,2.894]],["body/classes/DCQL.html",[3,0.043,4,0.048,5,0.043,7,1.723,9,0.65,12,2.258,13,0.146,14,0.712,16,1.53,17,0.724,19,0.599,20,0.337,21,0.006,25,2.251,26,1.764,27,1.483,28,2.348,30,0.103,31,0.004,32,0.004,33,0.375,35,0.759,41,2.205,42,0.939,45,0.339,48,1.731,50,0.195,51,1.166,52,4.088,54,1.545,55,2.893,56,2.263,57,2.707,58,0.922,59,1.952,60,3.689,61,3.689,70,3.818,76,2.511,82,2.039,88,1.483,100,2.348,102,1.001,104,2.161,106,1.297,110,2.037,116,1.513,125,2.45,126,1.273,206,1.853,238,2.918,252,2.129,276,0.878,296,4.322,307,1.513,329,1.273,400,1.56,427,1.229,446,2.19,467,1.577,480,4.33,481,1.853,482,2.601,483,1.611,485,2.129,564,2.271,598,1.647,607,1.823,630,2.271,659,1.901,663,4.446,672,1.764,832,2.197,838,2.197,851,2.066,870,1.371,877,1.693,883,1.952,884,2.007,885,3.102,886,3.31,888,3.31,889,1.807,892,3.501,894,2.455,897,2.348,898,1.611,900,1.647,901,1.346,905,3.31,907,2.197,908,2.197,909,1.577,910,2.348,911,1.577,912,2.832,913,4.203,914,2.271,919,2.845,920,3.66,921,3.712,922,3.01,923,3.777,924,2.547,925,4.38,926,2.445,927,4.047,928,2.547,929,4.812,930,4.812,931,4.619,932,4.148,933,4.151,934,4.38,935,2.547,936,2.547,937,4.047,938,2.547,939,2.547,940,2.547,941,2.547,942,2.353,943,2.547,944,2.547,945,3.712,946,4.727,947,4.38,948,2.066,949,2.547,950,2.925,951,2.547,952,2.445,953,2.066,954,3.415,955,2.353,956,2.271,957,2.197,958,2.353,959,2.007,960,2.547,1314,3.447,1641,3.866,1642,3.866,1643,3.866]],["title/modules/DatabaseModule.html",[158,1.538,172,3.444]],["body/modules/DatabaseModule.html",[3,0.071,4,0.079,5,0.071,20,0.289,21,0.006,30,0.079,31,0.005,32,0.005,33,0.275,48,1.508,50,0.21,147,1.106,149,1.609,158,2.566,160,2.861,172,5.747,187,3.62,188,5.747,189,3.017,190,2.114,205,5.016,206,3.076,231,3.647,232,4.65,233,1.717,235,5.265,287,5.723,421,3.771,422,2.564,1467,4.65,1644,6.417,1645,7.931,1646,6.417,1647,7.931,1648,5.723,1649,8.608,1650,6.417,1651,6.417,1652,7.073,1653,6.417,1654,5.723,1655,6.417,1656,5.723,1657,6.417,1658,5.265,1659,6.417,1660,6.507,1661,6.417,1662,5.723,1663,6.417]],["title/classes/Display.html",[33,0.204,1134,2.617]],["body/classes/Display.html",[3,0.042,4,0.047,5,0.042,9,0.836,13,0.144,14,0.704,16,0.797,17,0.93,19,0.615,20,0.339,21,0.006,23,0.938,25,1.521,28,2.322,30,0.089,31,0.004,32,0.004,33,0.366,34,3.627,35,0.747,37,2.163,39,3.627,40,4.26,42,1.388,45,0.501,48,1.706,50,0.206,51,1.679,55,2.851,56,2.4,57,2.762,58,1.329,63,1.779,65,1.376,66,2.163,67,2.163,71,3.627,78,3.627,81,1.872,82,1.709,84,3.992,93,2.264,95,1.435,99,3.165,100,2.322,101,2.236,102,0.986,104,2.526,117,1.147,130,2.236,131,4.26,134,3.273,135,2.033,136,2.236,137,2.236,237,2.373,276,0.865,362,1.824,400,1.307,427,1.209,446,2.17,467,1.553,611,1.49,706,2.758,802,3.327,870,1.976,877,1.419,878,3.627,892,3.991,894,2.427,897,3.022,898,2.322,900,1.621,901,1.325,909,1.553,910,2.746,911,1.553,912,2.807,919,2.813,920,3.627,922,2.976,950,1.976,953,2.033,954,3.768,1071,2.096,1072,2.758,1073,2.758,1074,2.758,1075,2.758,1076,2.163,1077,2.163,1078,2.92,1079,4.414,1080,2.813,1084,4.54,1095,2.92,1096,2.92,1097,2.92,1098,2.92,1099,2.758,1100,2.92,1101,2.92,1102,2.92,1103,2.92,1104,2.92,1105,2.92,1108,2.92,1118,4.166,1126,4.036,1127,2.92,1128,2.508,1129,2.758,1130,2.623,1131,2.92,1132,5.738,1133,1.872,1134,4.248,1135,4.34,1136,5.053,1137,5.053,1138,5.053,1139,4.34,1140,4.036,1141,2.92,1142,2.92,1143,2.92,1144,2.92,1145,2.758,1146,2.317,1147,2.508,1664,3.806,1665,4.273,1666,3.806,1667,3.806,1668,3.806,1669,3.806,1670,3.806,1671,3.806]],["title/controllers/DisplayController.html",[139,1.433,1672,3.646]],["body/controllers/DisplayController.html",[3,0.06,4,0.067,5,0.06,9,0.918,13,0.206,17,0.777,20,0.259,21,0.006,30,0.067,31,0.005,32,0.005,33,0.233,42,1.189,45,0.429,50,0.21,95,1.229,139,2.549,141,1.964,143,1.621,146,1.89,147,0.936,149,1.447,154,4.816,271,3.738,308,3.527,338,2.791,339,1.73,356,4.134,375,2.264,376,2.463,461,2.267,483,2.973,498,2.264,540,3.859,633,2.604,676,2.314,889,3.335,969,4.517,971,4.158,984,2.991,1134,5.367,1207,3.744,1333,3.435,1334,3.435,1335,3.435,1337,3.744,1672,5.471,1673,4.844,1674,7.963,1675,7.132,1676,5.432,1677,7.83,1678,6.127,1679,5.432,1680,5.432,1681,5.432,1682,5.828,1683,5.432,1684,4.844,1685,5.432,1686,5.432,1687,5.432,1688,5.432]],["title/classes/DisplayCreateDto.html",[33,0.204,1678,3.444]],["body/classes/DisplayCreateDto.html",[3,0.081,4,0.09,5,0.081,21,0.006,30,0.09,31,0.005,32,0.005,33,0.314,35,1.438,38,3.828,50,0.2,102,1.896,233,1.859,400,2.015,1062,4.63,1150,5.616,1678,6.222,1689,6.528,1690,8.586,1691,4.63,1692,6.528]],["title/entities/DisplayEntity.html",[877,1.211,1691,3.006]],["body/entities/DisplayEntity.html",[3,0.065,4,0.073,5,0.065,13,0.223,14,0.95,19,0.587,20,0.335,21,0.006,30,0.093,31,0.005,32,0.005,33,0.386,42,1.38,45,0.498,48,1.658,50,0.21,51,1.775,56,2.221,57,2.678,58,1.405,93,2.584,95,1.015,102,1.525,126,1.94,154,4.015,276,1.881,400,2.114,427,1.872,446,2.872,877,1.914,879,2.753,894,3.274,896,3.243,897,3.634,898,3.133,900,3.202,901,2.616,909,2.403,910,3.133,911,2.403,912,2.509,919,3.795,954,2.753,1123,4.518,1134,4.138,1135,3.88,1139,3.88,1691,4.752,1693,4.518,1694,5.889,1695,5.889,1696,6.318,1697,5.889,1698,5.889,1699,5.997]],["title/classes/DisplayImage.html",[33,0.204,1132,3.276]],["body/classes/DisplayImage.html",[3,0.045,4,0.051,5,0.045,9,0.68,13,0.156,14,0.746,16,0.863,19,0.606,20,0.323,21,0.006,23,1.015,25,1.645,28,2.457,30,0.093,31,0.004,32,0.004,33,0.374,34,3.792,35,0.808,37,2.339,39,3.792,40,4.418,42,0.686,45,0.247,48,1.734,50,0.21,51,1.777,55,2.898,56,2.367,57,2.822,58,1.406,63,1.924,65,1.488,66,2.339,67,2.339,71,3.792,78,3.792,81,2.024,82,1.809,84,4.141,93,2.348,95,1.371,99,3.35,100,2.457,101,2.419,102,1.066,104,2.641,117,1.241,130,2.419,131,4.418,134,3.464,135,2.199,136,2.419,137,2.419,237,2.512,276,0.935,362,1.973,400,1.384,427,1.308,446,2.269,467,1.679,611,1.611,706,2.983,802,3.478,870,2.091,877,1.502,878,3.792,892,4.087,894,2.568,897,3.135,898,2.457,900,1.754,901,1.433,909,1.679,910,2.871,911,1.679,912,2.934,919,2.977,920,3.792,922,3.15,950,2.137,953,2.199,954,3.872,1071,2.266,1072,2.983,1073,2.983,1074,2.983,1075,2.983,1076,2.339,1077,2.339,1078,3.158,1079,4.578,1080,2.977,1084,4.747,1095,3.158,1096,3.158,1097,3.158,1098,3.158,1099,2.983,1100,3.158,1101,3.158,1102,3.158,1103,3.158,1104,3.158,1105,3.158,1108,3.158,1118,4.355,1126,4.272,1127,3.158,1128,2.712,1129,2.983,1130,2.837,1131,3.158,1132,5.707,1133,3.387,1134,4.141,1135,2.712,1136,3.158,1137,3.158,1138,3.158,1139,2.712,1140,4.272,1141,3.158,1142,3.158,1143,3.158,1144,3.158,1145,2.983,1146,2.506,1147,2.712,1700,4.116]],["title/classes/DisplayInfo.html",[33,0.204,1696,3.444]],["body/classes/DisplayInfo.html",[3,0.066,4,0.074,5,0.066,13,0.227,14,0.962,19,0.604,20,0.337,21,0.006,30,0.094,31,0.005,32,0.005,33,0.388,35,1.179,42,1.392,45,0.502,48,1.446,50,0.211,51,1.81,56,2.358,57,2.702,58,1.432,93,1.874,95,1.439,102,1.554,126,1.977,154,3.207,276,1.364,400,1.785,427,1.908,446,2.751,877,1.938,894,2.615,897,3.171,898,2.502,900,2.557,901,2.09,909,2.449,910,3.171,911,2.449,912,2.557,919,3.842,954,2.806,1134,3.305,1135,5.502,1139,5.502,1665,4.605,1691,3.796,1693,4.605,1696,6.362,1699,6.362,1701,6.002,1702,6.002,1703,6.002]],["title/classes/DisplayLogo.html",[33,0.204,1699,3.444]],["body/classes/DisplayLogo.html",[3,0.068,4,0.077,5,0.068,13,0.236,14,0.984,19,0.597,20,0.324,21,0.006,30,0.096,31,0.005,32,0.005,33,0.392,35,1.222,42,1.037,45,0.374,48,1.479,50,0.213,51,1.875,56,2.332,57,2.746,58,1.484,93,1.942,95,1.072,102,1.611,126,2.796,154,3.323,276,1.413,400,1.826,427,1.977,446,2.796,877,1.982,894,2.71,897,3.243,898,2.593,900,2.65,901,2.165,909,2.538,910,3.243,911,2.538,912,2.65,919,3.929,954,2.908,1134,3.425,1135,4.098,1139,4.098,1691,3.933,1693,4.771,1696,6.151,1699,6.444,1704,6.22]],["title/injectables/DisplayService.html",[486,0.996,1682,3.276]],["body/injectables/DisplayService.html",[3,0.059,4,0.066,5,0.059,9,0.913,13,0.204,16,1.764,17,0.862,19,0.586,20,0.288,21,0.006,30,0.066,31,0.004,32,0.004,33,0.23,45,0.476,50,0.204,95,1.365,143,1.609,146,1.882,147,0.926,149,1.437,154,4.801,233,1.163,271,3.229,276,2.082,339,1.921,340,2.538,376,2.452,400,2.109,422,2.147,426,3.842,427,1.707,461,2.25,483,2.952,486,1.484,487,2.02,489,2.987,491,1.993,502,1.678,676,2.289,889,3.311,971,4.505,1134,5.359,1185,6.314,1201,2.789,1207,3.703,1548,4.408,1677,7.802,1678,6.101,1682,4.88,1684,4.791,1691,4.478,1692,4.791,1705,4.791,1706,5.372,1707,5.372,1708,7.92,1709,5.372,1710,5.372,1711,5.372,1712,5.372,1713,5.372,1714,5.372]],["title/classes/EC_Public.html",[33,0.204,1563,3.132]],["body/classes/EC_Public.html",[3,0.06,4,0.067,5,0.06,9,0.624,13,0.205,14,0.9,19,0.587,20,0.319,21,0.006,22,3.964,23,2.39,25,3.177,30,0.088,31,0.004,32,0.004,33,0.362,35,1.064,45,0.508,50,0.126,76,3.544,106,2.388,112,2.676,305,3.811,306,4.84,307,2.119,313,3.182,329,1.784,399,4.765,471,3.077,481,2.596,509,3.803,580,4.045,629,4.829,692,5.46,754,4.205,861,4.905,1010,4.672,1281,5.78,1503,4.501,1563,4.69,1587,2.735,1591,6.046,1715,7.53,1716,6.478,1717,7.439,1718,7.09,1719,5.761,1720,6.099,1721,6.729,1722,6.729,1723,5.415,1724,6.347,1725,5.839,1726,6.347,1727,5.415,1728,6.478,1729,4.829,1730,3.732]],["title/classes/EmbeddedDisclosurePolicy.html",[33,0.204,39,2.617]],["body/classes/EmbeddedDisclosurePolicy.html",[3,0.06,4,0.068,5,0.06,13,0.208,14,0.908,19,0.553,20,0.335,21,0.006,30,0.114,31,0.005,32,0.005,33,0.4,34,3.02,35,1.077,36,3.468,37,4.546,38,3.783,39,4.976,40,5.41,41,3.131,42,0.914,45,0.33,48,1.675,50,0.186,51,1.653,52,4.118,53,5.804,54,2.191,55,2.542,56,2.406,57,2.85,58,1.308,59,4.04,60,4.04,61,4.04,62,3.78,63,2.564,64,3.468,65,2.893,66,4.546,67,4.546,68,3.78,69,5.849,70,4.332,71,3.02,72,3.78,73,3.78,74,3.02,75,3.614,76,2.445,77,3.339,78,3.02,79,3.02,80,5.059,81,2.697,82,1.683,83,3.78,84,3.02,85,3.78,1731,5.484]],["title/injectables/EncryptionService.html",[486,0.996,1522,3.006]],["body/injectables/EncryptionService.html",[3,0.045,4,0.051,5,0.045,9,0.919,13,0.156,16,1.862,17,0.868,19,0.622,20,0.302,21,0.006,22,3.456,23,2.104,30,0.051,31,0.004,32,0.004,33,0.177,45,0.479,48,0.785,50,0.193,95,1.373,143,1.343,146,1.853,147,0.712,149,1.4,189,1.386,233,1.494,276,2.129,278,2.348,305,2.833,306,3.598,329,2.97,339,2.01,340,2.403,352,3.254,376,2.415,399,4.532,400,2.199,422,1.65,426,3.438,486,1.238,487,1.553,489,2.097,490,2.981,491,2.121,502,1.29,526,2.086,533,2.527,685,4.283,754,3.308,983,3.007,1171,4.073,1180,3.068,1181,4.565,1187,3.598,1192,4.073,1201,2.145,1339,4.534,1444,3.389,1465,4.073,1485,3.389,1501,3.894,1511,4.534,1522,4.763,1528,3.894,1529,3.684,1546,4.849,1573,3.737,1584,3.684,1586,3.389,1587,2.086,1588,2.847,1589,4.849,1590,3.169,1601,5.27,1633,3.684,1719,2.993,1732,3.684,1733,3.894,1734,9.218,1735,5.91,1736,5.91,1737,5.91,1738,4.849,1739,4.131,1740,4.131,1741,5.91,1742,4.131,1743,4.131,1744,5.91,1745,7.532,1746,7.003,1747,5.91,1748,5.91,1749,4.131,1750,4.131,1751,5.27,1752,4.131,1753,4.131,1754,4.131,1755,4.131,1756,5.27,1757,3.684,1758,3.684,1759,4.131,1760,4.131,1761,5.661,1762,4.131,1763,5.91,1764,4.131,1765,3.684,1766,4.131,1767,4.131,1768,4.131,1769,4.131,1770,4.131]],["title/entities/FileEntity.html",[877,1.211,1771,3.444]],["body/entities/FileEntity.html",[3,0.07,4,0.079,5,0.07,13,0.241,14,0.998,16,1.932,19,0.585,20,0.312,21,0.006,23,1.946,30,0.079,31,0.005,32,0.005,33,0.273,42,1.43,45,0.516,48,1.705,50,0.184,276,1.95,400,2.236,427,2.024,446,2.955,877,2.011,879,2.978,890,4.028,894,3.44,896,3.507,897,3.739,898,3.291,900,3.364,901,2.749,909,2.599,910,3.291,911,2.599,912,2.714,1030,6.582,1771,5.721,1772,5.68,1773,6.37,1774,6.37,1775,6.37]],["title/interfaces/FileStorage.html",[0,1.338,1776,3.132]],["body/interfaces/FileStorage.html",[0,1.529,2,2.604,3,0.06,4,0.067,5,0.06,13,0.206,17,1.015,19,0.649,20,0.334,21,0.006,22,2.973,23,2.324,30,0.104,31,0.005,32,0.005,45,0.528,50,0.127,95,1.513,126,2.623,143,1.621,146,1.963,233,1.176,338,3.117,339,2.129,340,2.869,467,2.216,502,1.696,524,4.457,537,5.168,741,3.087,983,3.107,1080,3.602,1198,4.191,1284,3.927,1776,4.699,1777,4.167,1778,6.36,1779,6.109,1780,5.77,1781,5.471,1782,5.432,1783,5.851,1784,5.432,1785,4.844,1786,5.432,1787,4.167,1788,5.432,1789,4.457,1790,5.77,1791,6.486,1792,6.533,1793,6.127,1794,5.432,1795,3.936,1796,4.51,1797,4.457,1798,4.844,1799,5.432,1800,3.744,1801,5.432,1802,5.432,1803,4.844,1804,4.167,1805,5.432,1806,5.432,1807,5.432,1808,4.167,1809,3.936,1810,4.844]],["title/classes/FileUploadDto.html",[33,0.204,1811,3.646]],["body/classes/FileUploadDto.html",[3,0.079,4,0.089,5,0.103,13,0.273,14,1.076,19,0.555,20,0.31,21,0.006,25,3.401,30,0.089,31,0.005,32,0.005,33,0.309,35,1.417,42,1.203,45,0.434,50,0.168,100,3.548,102,1.868,1316,5.918,1811,6.53,1812,7.59,1813,6.432,1814,6.983,1815,7.213]],["title/injectables/FilesService.html",[486,0.996,1816,3.132]],["body/injectables/FilesService.html",[3,0.042,4,0.047,5,0.107,9,0.84,13,0.146,16,1.624,17,0.881,19,0.608,20,0.294,21,0.006,22,1.604,23,2.188,26,3.326,27,2.795,30,0.047,31,0.004,32,0.004,33,0.165,45,0.487,50,0.2,75,2.536,93,1.202,95,1.394,126,1.85,143,1.276,146,1.915,147,0.663,149,1.572,189,2.803,190,1.268,206,1.845,231,2.187,233,1.751,237,2.392,238,1.538,271,2.154,276,1.946,283,6.208,329,1.268,339,1.962,340,2.44,376,2.357,400,1.899,401,3.418,422,1.538,426,3.326,427,1.223,461,1.223,486,1.177,487,1.447,490,2.715,491,1.581,502,2.276,533,2.715,661,2.536,870,1.365,983,2.447,1163,4.609,1180,3.784,1181,3.092,1182,5.979,1187,3.418,1200,4.069,1201,1.998,1228,4.901,1262,2.434,1284,3.651,1407,2.261,1771,2.789,1776,4.802,1779,4.308,1781,4.308,1787,4.308,1791,5.591,1795,5.281,1796,2.434,1797,3.157,1798,5.007,1800,2.652,1809,2.789,1816,3.7,1817,3.432,1818,5.615,1819,5.615,1820,6.63,1821,3.848,1822,6.63,1823,3.848,1824,3.848,1825,5.979,1826,5.615,1827,3.848,1828,5.615,1829,5.615,1830,3.848,1831,3.848,1832,3.848,1833,5.912,1834,6.358,1835,3.848,1836,5.615,1837,5.615,1838,5.615,1839,5.007,1840,4.069,1841,5.615,1842,5.615,1843,3.848,1844,3.848,1845,3.432,1846,3.848,1847,3.848,1848,5.615,1849,3.848,1850,3.848,1851,3.848,1852,3.848,1853,2.952,1854,3.848,1855,3.848,1856,3.848,1857,3.848,1858,3.848,1859,3.848,1860,3.848,1861,3.848,1862,3.848,1863,3.848,1864,3.848,1865,3.848,1866,3.848,1867,3.848,1868,3.848,1869,3.848,1870,3.157,1871,3.848,1872,3.848,1873,3.848,1874,3.848,1875,3.848]],["title/interfaces/GenerateTokenOptions.html",[0,1.338,1876,3.646]],["body/interfaces/GenerateTokenOptions.html",[0,1.371,2,2.334,3,0.054,4,0.06,5,0.054,13,0.184,14,0.838,17,0.881,19,0.608,20,0.274,21,0.006,28,2.03,30,0.082,31,0.004,32,0.004,33,0.209,50,0.197,74,2.681,138,1.987,147,0.839,149,1.529,189,2.529,190,1.604,233,1.996,239,2.395,252,2.681,308,3.418,321,2.528,328,3.079,340,1.999,343,5.117,352,4.15,375,2.03,395,3.356,412,3.208,461,2.776,486,1.389,489,1.727,490,2.224,500,4.192,501,3.529,505,3.36,506,3.356,507,6.638,508,6.207,509,2.602,516,3.079,526,3.807,528,2.528,533,2.224,540,3.863,551,6.945,555,5.577,559,5.117,567,3.736,568,3.36,780,3.208,815,3.979,828,2.528,844,3.44,870,1.727,969,3.26,1092,2.459,1263,3.208,1484,3.529,1542,5.086,1558,3.356,1587,2.459,1876,5.782,1877,3.995,1878,3.995,1879,5.086,1880,4.342,1881,4.342,1882,4.342,1883,4.342,1884,3.995,1885,4.342,1886,3.995,1887,4.342,1888,5.911,1889,5.911,1890,5.911,1891,5.911,1892,4.342,1893,4.342,1894,6.721,1895,5.911,1896,4.342,1897,5.439,1898,4.342,1899,4.342,1900,4.342,1901,4.342,1902,4.342,1903,4.342,1904,4.342,1905,3.995,1906,4.342,1907,3.995,1908,4.342,1909,4.342,1910,3.736,1911,4.342]],["title/controllers/HealthController.html",[139,1.433,1912,3.646]],["body/controllers/HealthController.html",[3,0.071,4,0.079,5,0.071,9,0.741,13,0.244,21,0.006,30,0.079,31,0.005,32,0.005,33,0.275,42,1.072,45,0.387,50,0.185,139,1.938,141,2.325,143,1.804,146,1.775,147,1.108,149,1.304,239,4.741,314,4.372,489,2.817,491,1.81,502,2.479,633,3.082,636,6.092,1535,5.473,1660,6.515,1912,6.903,1913,5.733,1914,9.416,1915,7.941,1916,7.081,1917,8.998,1918,7.941,1919,6.515,1920,7.941,1921,6.429,1922,6.429,1923,7.941,1924,7.941,1925,5.275,1926,6.429,1927,5.733,1928,6.429,1929,6.429]],["title/modules/HealthModule.html",[158,1.538,173,3.444]],["body/modules/HealthModule.html",[3,0.081,4,0.09,5,0.081,21,0.006,30,0.09,31,0.005,32,0.005,33,0.314,50,0.212,141,3.105,147,1.262,158,2.778,160,3.264,173,6.222,187,3.341,1912,6.99,1925,6.006,1930,7.321,1931,8.586,1932,7.321]],["title/injectables/InternalClientsProvider.html",[433,3.444,486,0.996]],["body/injectables/InternalClientsProvider.html",[3,0.044,4,0.05,5,0.044,9,0.909,13,0.152,16,1.85,17,0.922,19,0.643,20,0.308,21,0.006,30,0.05,31,0.004,32,0.004,33,0.172,45,0.521,50,0.206,95,1.459,112,1.51,143,1.316,146,1.892,147,0.692,149,1.599,189,2.755,190,1.323,233,1.609,276,2.102,315,1.924,339,2.053,340,1.746,375,1.674,400,1.85,422,1.604,426,3.393,427,1.276,433,4.196,440,3.402,442,2.539,454,6.056,472,3.86,486,1.213,487,1.51,490,2.961,491,1.13,498,1.674,499,2.211,502,1.254,514,5.253,515,5.833,526,3.981,533,2.278,541,3.876,547,3.08,584,3.662,727,2.359,742,2.084,877,1.023,964,4.442,965,4.442,966,4.442,968,4.701,986,2.539,987,2.909,988,3.294,1027,4.196,1039,4.442,1040,4.442,1041,4.442,1042,4.442,1043,4.442,1044,3.294,1049,4.751,1050,4.751,1051,5.163,1057,5.163,1063,3.294,1201,2.084,1262,2.539,1271,4.751,1933,7.87,1934,3.294,1935,5.659,1936,4.015,1937,4.015,1938,4.015,1939,4.015,1940,4.015,1941,3.58,1942,4.015,1943,4.015,1944,2.909,1945,4.015,1946,3.58,1947,4.015,1948,4.015,1949,4.015,1950,4.015,1951,5.79,1952,4.015,1953,4.015,1954,4.015,1955,6.056,1956,6.056,1957,6.056,1958,6.791,1959,6.791,1960,4.015,1961,4.015,1962,5.163,1963,4.015,1964,4.015,1965,4.015,1966,4.015,1967,4.015]],["title/interfaces/InternalTokenPayload.html",[0,1.338,500,3.006]],["body/interfaces/InternalTokenPayload.html",[0,2.215,2,3.036,3,0.07,4,0.078,5,0.07,11,3.6,12,2.072,13,0.24,14,0.995,16,1.649,19,0.558,20,0.23,21,0.006,30,0.106,31,0.005,32,0.005,38,3.508,41,2.479,50,0.2,147,1.092,149,1.285,233,1.703,271,3.018,308,3.504,400,2.009,446,2.592,447,4.86,483,2.641,498,3.568,499,3.488,500,4.975,540,2.891,541,3.115,548,6.17,742,3.289,877,2.004,901,2.205,969,4.402,1968,4.86,1969,6.455,1970,5.423,1971,5.197,1972,5.197,1973,5.197,1974,5.197]],["title/entities/IssuanceConfig.html",[802,2.4,877,1.211]],["body/entities/IssuanceConfig.html",[3,0.037,4,0.042,5,0.037,9,0.891,12,1.803,13,0.128,14,0.646,16,1.54,17,0.937,19,0.504,20,0.335,21,0.006,26,2.332,27,1.96,28,2.13,29,4.192,30,0.042,31,0.003,32,0.003,33,0.263,42,1.477,45,0.533,48,1.771,50,0.192,51,1.022,55,2.455,56,1.567,57,2.216,58,0.808,81,2.513,82,1.568,88,2.173,90,2.389,93,2.503,95,1.06,99,2.904,100,2.13,101,1.991,102,0.878,110,2.476,116,2,117,2.065,125,2.956,127,3.002,130,1.991,131,3.614,134,3.002,135,1.811,136,1.991,137,3.002,267,1.711,276,1.398,320,3.521,329,1.683,400,1.882,427,1.077,446,2.256,467,2.085,480,3.659,589,4.474,598,1.444,607,2.216,611,3.599,612,4.885,613,4.474,616,4.703,617,2.143,802,2.58,808,3.702,870,2.928,877,1.744,879,1.584,881,3.92,883,3.106,884,3.193,885,3.771,886,3.614,888,4.024,889,2.389,892,3.703,894,2.984,896,1.866,897,2.855,898,2.13,900,2.177,901,1.779,905,3.614,907,2.904,908,2.904,909,1.383,910,2.13,911,1.383,912,2.621,914,1.991,916,3.022,919,2.58,920,2.813,922,2.73,953,1.811,954,2.876,959,2.653,1071,3.771,1087,3.022,1091,2.78,1092,1.711,1107,3.022,1119,4.192,1123,2.6,1126,3.702,1140,2.455,1161,4.718,1183,3.702,1191,3.702,1298,4.556,1306,3.111,1307,4.556,1313,3.022,1840,3.702,1975,7.989,1976,6.15,1977,6.15,1978,4.457,1979,6.15,1980,5.484,1981,3.389,1982,3.389,1983,3.022,1984,4.331,1985,3.389,1986,4.556,1987,3.389,1988,3.389,1989,3.389,1990,5.109,1991,5.109,1992,5.109,1993,3.389,1994,3.389,1995,3.389,1996,3.389,1997,3.389,1998,3.389,1999,3.389,2000,3.389,2001,5.109,2002,2.78,2003,3.389,2004,3.389,2005,3.389,2006,3.389,2007,3.389,2008,3.389,2009,3.389,2010,3.389,2011,3.389]],["title/controllers/IssuanceController.html",[139,1.433,2012,3.646]],["body/controllers/IssuanceController.html",[3,0.058,4,0.066,5,0.058,13,0.201,16,1.757,17,0.858,19,0.514,20,0.287,21,0.006,30,0.066,31,0.004,32,0.004,33,0.228,42,1.313,45,0.474,50,0.213,88,2.207,95,1.358,102,1.376,117,2.527,139,1.602,141,1.922,143,1.597,146,2.074,147,0.916,149,1.598,271,3.558,308,3.083,338,2.751,339,1.91,356,4.09,360,3.502,375,2.215,376,2.295,400,1.968,498,2.215,568,2.369,611,3.506,633,2.547,676,2.264,730,4.796,969,4.661,973,3.502,983,2.315,984,2.926,1156,3.995,1159,5.778,1180,3.65,1196,5.094,1324,6.463,1327,4.739,1333,3.361,1334,3.361,1335,3.361,1337,3.663,1338,4.36,1344,3.663,1345,4.077,1447,3.235,2012,5.393,2013,4.739,2014,7.03,2015,7.03,2016,7.025,2017,5.314,2018,5.314,2019,5.314,2020,5.314,2021,5.314,2022,4.739,2023,5.314,2024,4.739,2025,5.314,2026,5.314,2027,5.314,2028,5.393,2029,5.314]],["title/classes/IssuanceDto.html",[33,0.204,1159,3.276]],["body/classes/IssuanceDto.html",[3,0.069,4,0.077,5,0.069,9,0.719,13,0.236,14,0.985,16,1.306,19,0.554,20,0.227,21,0.006,26,2.844,27,2.39,30,0.096,31,0.005,32,0.005,33,0.364,35,1.224,38,3.472,42,1.039,45,0.375,50,0.198,52,3.972,56,1.984,58,1.487,63,2.913,88,2.237,102,1.614,233,1.686,276,1.77,400,1.828,472,4.41,607,2.879,611,3.585,802,3.147,883,3.933,884,4.043,1062,3.94,1153,4.78,1154,5.112,1155,6.969,1156,5.206,1158,5.112,1159,5.367,1160,6.944,1161,5.974,1162,5.974,1163,4.925,1164,7.575,2030,6.231]],["title/injectables/IssuanceService.html",[486,0.996,730,2.894]],["body/injectables/IssuanceService.html",[3,0.031,4,0.035,5,0.074,9,0.325,13,0.107,16,1.676,17,0.781,19,0.606,20,0.261,21,0.006,22,2.285,30,0.035,31,0.003,32,0.003,33,0.235,45,0.468,48,0.843,50,0.218,51,0.85,58,0.673,63,1.319,82,1.361,88,1.637,93,2.24,95,1.237,112,1.06,117,2.163,135,1.507,143,1.412,146,1.969,147,0.486,149,1.456,189,2.518,190,0.929,202,1.784,203,1.858,205,2.805,206,2.126,233,1.993,237,2.879,239,1.387,246,2.044,252,1.553,276,2.053,286,4.897,307,1.104,317,3.639,332,2.044,339,1.74,340,1.337,376,2.33,400,1.762,422,1.127,426,2.837,427,0.896,458,4.284,486,0.93,487,1.06,489,1.574,490,2.847,491,1.75,502,2.428,528,1.464,533,2.746,540,2.502,607,2.321,611,3.41,659,2.696,728,3.51,730,3.784,742,1.464,758,1.553,802,2.769,844,1.287,983,2.389,1071,2.442,1080,1.424,1156,4.822,1158,2.314,1159,5.174,1161,4.206,1165,4.095,1167,2.044,1169,2.24,1171,3.057,1172,3.652,1174,2.929,1175,4.504,1180,2.303,1181,2.442,1191,3.214,1192,3.057,1197,3.973,1198,3.652,1201,1.464,1202,2.314,1203,2.044,1204,2.314,1205,1.944,1209,2.044,1210,2.044,1211,3.639,1213,4.768,1214,2.314,1215,2.044,1216,3.214,1217,2.044,1218,2.044,1219,2.044,1220,2.044,1221,4.498,1222,3.784,1223,2.314,1224,2.314,1225,3.057,1226,2.314,1227,5.174,1228,2.805,1229,2.314,1230,2.164,1231,2.314,1232,2.314,1233,2.314,1234,4.498,1236,3.639,1237,3.639,1238,2.314,1239,2.164,1240,2.314,1241,2.314,1243,2.314,1244,3.639,1246,2.314,1247,2.314,1248,2.164,1249,2.314,1250,2.314,1251,2.164,1252,2.314,1253,2.314,1257,2.044,1258,2.7,1259,2.314,1260,2.044,1261,4.498,1263,1.858,1264,1.858,1266,2.314,1269,2.515,1274,2.044,1275,2.314,1277,3.403,1324,3.639,1336,2.314,1407,2.606,1483,2.314,1559,4.206,1935,4.945,2002,2.314,2016,3.955,2022,2.515,2031,2.515,2032,4.436,2033,5.482,2034,2.82,2035,6.215,2036,2.82,2037,5.482,2038,4.436,2039,2.82,2040,4.436,2041,2.82,2042,2.82,2043,2.82,2044,6.215,2045,2.82,2046,2.82,2047,2.82,2048,4.436,2049,2.82,2050,3.955,2051,2.515,2052,2.82,2053,2.82,2054,2.82,2055,2.515,2056,2.82,2057,2.82,2058,5.482,2059,2.82,2060,2.82,2061,2.82,2062,2.82,2063,5.482,2064,2.314,2065,4.889,2066,4.436,2067,2.82,2068,2.82,2069,4.436,2070,2.82,2071,2.82,2072,2.82,2073,4.436,2074,2.82,2075,2.82,2076,2.82,2077,4.889,2078,2.82,2079,2.515,2080,2.515,2081,2.82,2082,2.82,2083,2.82,2084,4.436,2085,2.82,2086,2.82,2087,2.82,2088,2.82]],["title/controllers/IssuerManagementController.html",[139,1.433,2089,3.646]],["body/controllers/IssuerManagementController.html",[3,0.049,4,0.055,5,0.049,9,0.511,13,0.168,17,0.482,19,0.289,20,0.329,21,0.006,25,1.77,30,0.055,31,0.004,32,0.004,33,0.19,41,1.734,42,0.738,45,0.266,50,0.213,65,1.602,74,2.439,81,2.178,93,2.426,95,0.763,102,1.147,127,2.603,138,1.807,139,1.336,141,1.602,143,1.411,146,0.99,147,0.763,154,2.367,193,2.517,233,1.344,238,1.77,271,3.138,274,4.942,278,4.65,305,3.437,307,1.734,308,2.43,316,2.123,326,4.5,329,2.976,338,3.479,339,1.074,356,2.3,357,4.5,359,5.094,360,2.919,375,1.846,376,1.809,379,5.961,382,2.768,396,3.21,403,3.95,489,2.203,490,2.405,498,1.846,509,2.367,533,2.083,536,2.203,568,1.975,601,3.722,607,2.009,633,2.123,672,2.834,676,1.887,684,3.634,705,5.12,847,3.21,859,4.091,860,4.914,901,1.542,969,3.822,971,3.054,984,2.439,1077,3.529,1133,3.054,1333,2.801,1334,2.801,1335,2.801,1337,3.053,1338,3.634,1447,4.365,1558,3.053,1790,3.21,1814,3.634,2024,3.95,2028,3.398,2089,4.764,2090,5.094,2091,5.094,2092,3.95,2093,6.393,2094,3.95,2095,6.307,2096,3.95,2097,5.537,2098,4.724,2099,3.95,2100,3.95,2101,4.429,2102,4.429,2103,3.634,2104,4.724,2105,4.534,2106,3.21,2107,3.053,2108,3.634,2109,4.429,2110,3.95,2111,3.95,2112,5.537,2113,3.398,2114,6.929,2115,3.95,2116,5.882,2117,3.634,2118,6.929,2119,6.277,2120,3.95,2121,4.429,2122,4.429,2123,4.429,2124,4.429,2125,4.429,2126,4.429,2127,4.429,2128,4.764,2129,3.634,2130,4.429,2131,4.429,2132,4.429,2133,3.95,2134,4.429,2135,3.95,2136,4.429,2137,3.95,2138,3.95,2139,3.95,2140,3.95,2141,3.95,2142,3.95,2143,3.95]],["title/interfaces/IssuerMetadata.html",[0,1.338,2144,3.444]],["body/interfaces/IssuerMetadata.html",[0,2.436,2,3.111,3,0.071,4,0.08,5,0.071,9,0.748,13,0.246,14,1.01,19,0.564,20,0.328,21,0.006,22,3.329,23,1.969,27,3.063,30,0.08,31,0.005,32,0.005,50,0.151,126,2.631,305,3.828,306,4.862,307,3.126,313,5.619,399,4.687,479,6.127,481,3.828,485,4.398,568,4.366,754,3.828,1283,5.325,1284,4.398,1295,3.468,1302,7.122,1587,3.278,2144,5.788,2145,5.787]],["title/classes/IssuerMetadataCredentialConfig.html",[33,0.204,1084,3.276]],["body/classes/IssuerMetadataCredentialConfig.html",[3,0.044,4,0.049,5,0.044,9,0.667,13,0.152,14,0.732,16,0.84,17,0.63,19,0.608,20,0.33,21,0.006,23,0.989,25,2.712,28,2.412,30,0.092,31,0.004,32,0.004,33,0.371,34,3.737,35,0.788,37,2.279,39,3.737,40,4.366,42,1.132,45,0.408,48,1.725,50,0.209,51,1.744,55,2.883,56,2.356,57,2.802,58,1.38,63,1.875,65,1.45,66,2.279,67,2.279,71,3.737,78,3.737,81,1.972,82,1.775,84,4.091,93,2.32,95,1.358,99,3.288,100,2.412,101,2.356,102,1.039,104,2.603,117,1.209,130,2.356,131,4.366,134,3.399,135,2.143,136,2.356,137,2.356,237,2.465,276,0.911,362,1.922,400,1.358,427,1.275,446,2.236,467,1.636,611,1.57,706,4.918,707,2.764,802,3.428,870,2.052,877,1.474,878,3.737,892,4.056,894,2.521,897,3.097,898,2.412,900,1.709,901,1.396,909,1.636,910,2.829,911,1.636,912,2.892,919,2.922,920,3.737,922,3.091,950,2.082,953,2.143,954,3.838,1071,2.208,1072,2.906,1073,2.906,1074,2.906,1075,2.906,1076,2.279,1077,2.279,1078,3.076,1079,4.523,1080,2.922,1084,5.121,1095,3.076,1096,3.076,1097,3.076,1098,3.076,1099,2.906,1100,3.076,1101,3.076,1102,3.076,1103,3.076,1104,3.076,1105,3.076,1108,3.076,1118,4.292,1126,4.192,1127,3.076,1128,2.642,1129,2.906,1130,2.764,1131,3.076,1132,5.43,1133,1.972,1134,4.659,1135,2.642,1136,3.076,1137,3.076,1138,3.076,1139,2.642,1140,4.192,1141,3.076,1142,3.076,1143,3.076,1144,3.076,1145,2.906,1146,2.441,1147,2.642,1665,3.076,2146,4.01,2147,4.01,2148,4.01]],["title/modules/IssuerModule.html",[158,1.538,174,3.276]],["body/modules/IssuerModule.html",[3,0.047,4,0.053,5,0.047,21,0.006,30,0.053,31,0.004,32,0.004,33,0.183,50,0.23,63,1.999,82,1.312,141,2.19,147,0.737,158,2.275,160,1.906,161,2.159,162,2.284,163,2.284,164,2.102,165,3.552,166,3.552,171,4.765,174,6.866,178,5.105,182,3.236,183,2.284,184,2.284,187,2.764,189,2.359,190,1.408,209,2.817,216,3.098,233,0.925,382,1.906,410,5.525,421,2.512,422,1.708,429,2.43,430,3.507,568,1.906,631,5.395,669,5.648,727,2.512,730,5.648,760,3.28,802,3.059,1071,3.335,1130,2.946,1165,6.112,1167,3.098,1321,5.395,1336,3.507,1340,5.525,1347,5.395,1349,3.507,1358,3.812,1391,2.946,1672,5.395,1682,5.779,1691,3.83,2002,3.507,2012,5.395,2051,3.812,2089,5.395,2091,3.507,2105,5.866,2149,3.812,2150,3.812,2151,3.812,2152,3.812,2153,5.525,2154,5.302,2155,5.105,2156,5.302,2157,4.275,2158,5.395,2159,4.174,2160,2.43,2161,6.056,2162,4.388,2163,3.28,2164,3.098,2165,3.507,2166,4.275,2167,4.275,2168,4.275,2169,4.275,2170,4.275,2171,4.275,2172,4.275,2173,4.275,2174,4.275,2175,4.275,2176,4.275,2177,4.275,2178,4.275,2179,6.056,2180,3.812,2181,4.275,2182,4.275]],["title/classes/JwksResponseDto.html",[33,0.204,1730,3.276]],["body/classes/JwksResponseDto.html",[3,0.065,4,0.073,5,0.065,9,0.678,13,0.223,14,0.949,19,0.539,20,0.273,21,0.006,22,3.949,23,2.335,25,3.304,30,0.093,31,0.005,32,0.005,33,0.354,35,1.155,45,0.353,50,0.137,76,4.104,106,1.972,112,2.21,305,3.964,306,5.035,307,2.938,313,4.411,329,2.473,399,4.967,471,3.341,481,3.598,509,3.141,580,3.341,692,4.51,754,4.176,861,4.052,1010,4.859,1281,4.946,1503,3.718,1563,3.873,1587,2.969,1591,5.174,1715,6.694,1716,5.759,1717,7.397,1718,6.694,1719,4.26,1720,4.51,1721,5.759,1722,5.759,1724,5.242,1725,4.823,1726,5.242,1728,5.759,1730,5.174,2183,5.242]],["title/injectables/JwtAuthGuard.html",[411,3.444,486,0.996]],["body/injectables/JwtAuthGuard.html",[3,0.072,4,0.08,5,0.072,13,0.246,17,0.871,20,0.291,21,0.006,30,0.08,31,0.005,32,0.005,33,0.279,38,3.565,45,0.481,48,1.236,50,0.211,95,1.378,143,1.817,146,1.454,147,1.121,149,1.622,233,1.407,339,1.939,375,2.711,411,5.794,419,4.988,486,1.676,487,2.445,491,1.831,1834,6.56,1970,6.226,2184,5.798,2185,7.996,2186,7.13,2187,5.335,2188,7.747,2189,6.502,2190,7.13,2191,6.502,2192,4.112,2193,4.988,2194,6.502,2195,6.56,2196,6.502,2197,6.502,2198,5.798,2199,5.335,2200,5.798,2201,6.502]],["title/injectables/JwtService.html",[412,3.132,486,0.996]],["body/injectables/JwtService.html",[0,1.275,3,0.05,4,0.056,5,0.05,13,0.172,17,0.79,19,0.557,20,0.264,21,0.006,28,2.629,30,0.078,31,0.004,32,0.004,33,0.194,45,0.472,50,0.192,74,3.473,95,1.25,138,1.848,143,1.433,146,1.622,147,0.78,149,1.472,189,2.865,190,1.492,233,1.965,239,3.102,252,3.995,308,3.553,321,3.274,328,3.988,339,1.76,340,2.366,343,5.216,352,4.32,375,1.888,395,3.121,412,4.155,461,2.715,486,1.322,487,1.703,489,2.237,490,2.865,491,1.275,500,4.962,501,3.282,505,3.235,506,3.121,507,6.768,508,6.328,509,2.42,516,2.864,526,3.665,528,2.351,533,2.116,540,3.898,551,5.174,555,3.121,559,2.864,567,3.474,568,3.235,727,2.661,780,4.155,815,4.201,828,2.351,844,3.311,870,1.607,969,3.102,1092,2.287,1263,4.155,1484,3.282,1542,4.838,1558,4.347,1587,2.287,1876,6.019,1877,3.716,1878,3.716,1879,4.838,1880,4.038,1881,4.038,1882,4.038,1883,4.038,1884,3.716,1885,4.038,1886,5.174,1887,6.47,1888,5.624,1889,5.624,1890,5.624,1891,5.624,1892,4.038,1893,4.038,1894,6.47,1895,5.624,1896,4.038,1897,5.174,1898,4.038,1899,4.038,1900,4.038,1901,4.038,1902,4.038,1903,4.038,1904,4.038,1905,5.174,1906,5.624,1907,3.716,1908,4.038,1909,4.038,1910,3.474,1911,6.997,2202,6.306,2203,4.529,2204,4.529,2205,4.529,2206,4.529,2207,4.529]],["title/injectables/JwtStrategy.html",[413,3.444,486,0.996]],["body/injectables/JwtStrategy.html",[3,0.046,4,0.051,5,0.046,9,0.478,13,0.157,17,0.869,19,0.27,20,0.29,21,0.006,23,1.704,30,0.051,31,0.004,32,0.004,33,0.178,38,2.642,45,0.48,48,1.315,50,0.199,77,2.524,95,1.375,117,2.275,143,1.346,146,1.784,147,0.714,149,1.684,151,4.084,189,3.165,190,1.366,198,6.015,233,1.925,237,1.766,239,2.914,252,4.154,263,2.524,307,2.319,313,3.482,315,2.84,319,3.401,328,2.622,331,3.697,339,1.935,340,1.786,351,6.166,352,2.283,376,1.208,405,2.436,413,4.294,414,5.202,419,3.181,446,1.952,449,3.697,458,2.857,461,1.318,486,1.242,487,1.559,490,2.32,491,1.668,500,4.771,501,3.004,502,2.728,505,1.848,528,2.152,533,1.391,540,4.118,541,2.039,567,3.181,568,3.7,584,3.747,659,3.71,727,2.436,741,2.356,815,4.202,844,3.642,877,1.056,1027,3.004,1092,2.094,1260,3.004,1263,2.732,1407,3.482,1484,5.011,1886,3.401,1897,3.401,2128,3.181,2208,3.697,2209,5.925,2210,5.925,2211,6.914,2212,4.146,2213,5.925,2214,4.146,2215,5.925,2216,4.146,2217,5.925,2218,6.914,2219,4.146,2220,4.146,2221,5.925,2222,4.146,2223,5.925,2224,4.146,2225,5.925,2226,3.697,2227,4.146,2228,4.146,2229,3.697,2230,7.544,2231,4.146,2232,4.146,2233,4.146,2234,4.146,2235,4.146,2236,4.146,2237,4.146,2238,4.146,2239,5.925,2240,4.146,2241,6.914,2242,4.146,2243,4.146,2244,3.697,2245,4.146,2246,4.146,2247,3.697,2248,4.146,2249,5.011,2250,5.925,2251,3.697,2252,5.284,2253,3.697,2254,4.146,2255,5.925,2256,4.146,2257,4.146,2258,4.146,2259,4.146,2260,4.146,2261,3.401,2262,4.146,2263,3.697,2264,4.146,2265,4.146,2266,4.146,2267,4.146,2268,4.146,2269,4.146,2270,4.146,2271,4.146,2272,4.146]],["title/classes/Key.html",[23,1.172,33,0.204]],["body/classes/Key.html",[3,0.058,4,0.065,5,0.058,7,2.365,9,0.81,13,0.201,14,0.888,15,3.845,16,1.112,17,0.578,19,0.639,20,0.345,21,0.006,23,2.354,24,3.355,25,2.806,30,0.065,31,0.004,32,0.004,33,0.359,35,1.042,42,1.523,45,0.549,50,0.184,51,1.6,55,2.502,56,2.486,57,2.272,58,1.266,93,1.657,95,0.914,103,2.922,106,1.78,112,2.64,399,4.35,472,2.755,502,2.193,754,4.016,828,4.087,1501,3.496,1503,3.355,1569,3.355,1587,2.68,1603,6.458,1716,4.071,1717,6.427,1719,5.704,1720,6.039,1721,6.427,1722,6.427,1728,5.387,2273,6.391,2274,4.353,2275,7.019,2276,5.306,2277,5.306,2278,5.306,2279,5.306,2280,5.306,2281,5.306,2282,5.306,2283,5.306,2284,4.732,2285,4.732]],["title/controllers/KeyController.html",[139,1.433,1524,3.646]],["body/controllers/KeyController.html",[3,0.05,4,0.056,5,0.05,9,0.519,13,0.17,16,1.962,17,0.852,19,0.556,20,0.285,21,0.006,22,1.876,23,2.325,30,0.056,31,0.004,32,0.004,33,0.193,42,1.304,45,0.47,50,0.211,95,1.348,139,1.357,141,1.627,143,1.426,146,1.906,147,0.775,149,1.467,231,2.557,233,0.974,308,3.737,338,3.692,339,1.897,340,2.57,356,3.754,376,2.64,399,4.062,400,1.474,461,1.995,489,3.024,490,2.86,491,1.267,498,1.876,502,1.405,533,2.106,545,3.691,633,2.157,676,1.917,728,3.381,878,2.477,969,4.639,973,2.964,983,3.15,984,2.477,1011,4.549,1169,3.171,1333,2.845,1334,2.845,1335,2.845,1337,3.101,1344,3.101,1345,4.816,1407,3.689,1524,6.002,1525,4.012,1535,4.327,1536,4.983,1569,4.948,1592,5.15,1593,3.452,1594,3.452,1596,3.691,1780,3.26,2286,4.012,2287,7.23,2288,6.277,2289,6.277,2290,7.23,2291,4.499,2292,4.499,2293,4.499,2294,4.499,2295,4.499,2296,4.499,2297,4.499,2298,6.002,2299,4.499,2300,4.499,2301,6.277,2302,5.15,2303,3.691,2304,4.499,2305,4.499,2306,4.499,2307,4.499,2308,4.499,2309,4.499,2310,4.499,2311,4.499,2312,4.499]],["title/entities/KeyEntity.html",[877,1.211,1528,3.132]],["body/entities/KeyEntity.html",[3,0.061,4,0.068,5,0.061,13,0.21,14,0.914,16,1.852,19,0.556,20,0.341,21,0.006,23,2.386,26,3.3,27,2.773,30,0.089,31,0.005,32,0.005,33,0.238,42,1.474,45,0.532,48,1.723,50,0.188,276,1.828,400,2.167,427,1.763,446,2.808,754,3.856,870,2.565,877,1.842,879,2.593,890,5.087,894,3.714,896,3.054,897,3.553,898,3.014,900,3.08,901,2.517,909,2.263,910,3.014,911,2.263,912,3.427,954,2.593,1081,4.019,1528,4.764,1587,2.801,1746,4.55,1761,7.436,2313,4.55,2314,5.546,2315,5.546,2316,7.23,2317,5.546,2318,5.546,2319,6.599,2320,5.829,2321,5.546,2322,4.255]],["title/classes/KeyImportDto.html",[33,0.204,1569,3.006]],["body/classes/KeyImportDto.html",[3,0.061,4,0.068,5,0.061,7,3.223,9,1.045,13,0.21,14,0.914,15,5.829,16,1.162,17,0.987,19,0.627,20,0.33,21,0.006,23,2.409,24,4.572,25,3.405,30,0.068,31,0.005,32,0.005,33,0.365,35,1.089,42,1.341,45,0.484,50,0.188,51,1.672,55,2.556,56,2.411,57,2.339,58,1.323,93,1.732,95,0.956,103,3.054,106,1.861,112,2.085,399,4.425,472,3.754,502,2.512,754,4.086,828,2.88,1501,5.3,1503,3.507,1569,4.572,1587,2.801,1603,4.55,1665,4.255,1716,4.255,1717,6.539,1719,4.019,1720,4.255,1721,5.546,1722,5.546,1728,5.546,2273,5.875,2274,4.55,2275,4.946,2284,4.946,2285,6.447,2323,6.447,2324,5.546,2325,5.546,2326,5.546]],["title/modules/KeyModule.html",[158,1.538,175,3.444]],["body/modules/KeyModule.html",[3,0.063,4,0.07,5,0.063,21,0.006,30,0.07,31,0.005,32,0.005,33,0.244,45,0.343,50,0.225,143,1.296,146,1.275,147,0.983,149,1.654,158,2.637,160,2.542,165,2.88,166,2.88,175,5.907,187,2.603,188,5.334,189,3.064,190,1.879,198,5.334,231,3.241,232,4.132,233,1.234,235,4.679,312,5.647,420,5.085,421,3.351,422,2.279,426,3.721,451,4.679,461,2.34,728,3.811,878,3.14,1262,4.655,1375,4.963,1403,4.326,1404,4.132,1473,5.334,1528,4.851,1531,5.085,1532,5.647,1536,5.074,1545,6.688,1546,6.04,1588,3.931,1594,4.375,1595,5.085,1596,6.04,2159,5.074,2160,3.241,2327,5.703,2328,7.269,2329,5.703,2330,7.269,2331,6.462,2332,5.703,2333,6.565,2334,5.703,2335,5.703,2336,7.361,2337,5.085,2338,5.085,2339,5.703,2340,5.703]],["title/classes/KeyObj.html",[33,0.204,2341,3.899]],["body/classes/KeyObj.html",[3,0.07,4,0.079,5,0.07,7,4.004,9,0.737,13,0.242,14,1.001,15,6.228,16,1.801,19,0.586,20,0.313,21,0.006,22,3.744,23,2.374,24,5.004,25,3.588,26,4.099,27,3.444,30,0.079,31,0.005,32,0.005,33,0.274,35,1.256,45,0.517,50,0.149,222,4.407,362,3.065,754,3.793,877,2.016,1010,4.65,1500,5.923,1563,5.663,1591,4.407,2273,6.19,2341,6.492,2342,5.701,2343,6.393,2344,6.393,2345,6.393]],["title/classes/KeyResponseDto.html",[33,0.204,322,3.646]],["body/classes/KeyResponseDto.html",[3,0.081,4,0.091,5,0.081,13,0.278,14,1.087,20,0.267,21,0.006,30,0.091,31,0.005,32,0.005,33,0.314,35,1.441,45,0.441,50,0.171,222,5.057,322,6.595,362,3.517,399,4.735,471,4.169,1563,6.009,1591,5.057,2273,5.925,2346,6.542]],["title/classes/KeyService.html",[33,0.204,1536,3.276]],["body/classes/KeyService.html",[0,1.486,3,0.039,4,0.044,5,0.039,7,2.353,9,0.408,13,0.134,16,1.791,17,0.961,19,0.647,20,0.341,21,0.006,22,2.2,23,2.352,24,4.425,30,0.044,31,0.003,32,0.003,33,0.152,35,0.695,45,0.531,50,0.206,95,1.522,96,3.105,143,1.199,146,2.039,147,0.61,149,1.071,189,2.634,190,1.166,238,1.414,276,2.183,338,2.739,339,2.141,340,2.854,376,2.369,426,3.194,427,1.125,461,2.006,478,5.179,489,2.785,491,1.486,505,1.578,540,2.409,686,2.715,727,2.079,741,4.462,751,2.154,754,3.588,794,2.079,827,4.78,878,1.949,903,5.071,971,2.596,1076,5.38,1181,2.906,1255,2.715,1394,2.079,1465,2.439,1481,4.33,1490,3.638,1494,4.049,1536,3.638,1537,4.707,1540,7.62,1541,4.33,1542,4.843,1543,6.676,1544,4.707,1545,5.179,1548,4.33,1551,4.33,1552,4.707,1564,5.629,1568,4.707,1569,4.425,1573,3.338,1574,4.707,1576,3.156,1577,5.071,1580,4.707,1582,2.564,1587,1.787,1592,2.903,1593,2.715,1594,2.715,1626,3.156,1907,2.903,2347,3.156,2348,9.71,2349,3.539,2350,3.539,2351,3.539,2352,3.539,2353,3.539,2354,3.539,2355,3.539,2356,3.539,2357,5.278,2358,3.539,2359,4.707,2360,3.539,2361,3.478,2362,6.998,2363,3.539,2364,3.539,2365,3.539]],["title/injectables/KeycloakClientsProvider.html",[436,3.646,486,0.996]],["body/injectables/KeycloakClientsProvider.html",[3,0.032,4,0.036,5,0.032,9,0.792,13,0.11,14,0.576,16,1.858,17,0.828,19,0.62,20,0.277,21,0.006,30,0.036,31,0.003,32,0.003,33,0.125,45,0.486,48,1.383,50,0.196,82,1.397,95,1.451,112,1.096,117,1.373,143,1.035,146,1.699,147,0.503,149,1.393,189,2.124,190,0.961,233,1.967,237,2.387,239,1.434,271,1.119,276,1.994,315,2.183,319,2.393,339,1.765,340,1.909,343,3.542,345,3.3,346,4.06,378,2.393,400,1.486,422,1.165,426,2.889,427,0.927,436,3.493,440,2.676,442,1.844,453,3.736,460,4.297,461,0.927,472,2.908,486,0.954,487,1.096,489,1.035,490,2.975,491,1.282,498,2.862,499,1.606,502,2.456,506,3.138,514,4.928,515,3.138,516,1.844,526,2.829,528,1.514,533,2.975,537,2.113,540,1.331,541,4.361,542,2.601,543,2.393,544,2.393,545,2.393,547,3.493,548,4.363,584,1.844,742,2.364,764,2.237,847,2.113,877,0.743,889,2.619,931,1.844,952,1.844,964,3.493,965,3.493,966,3.493,968,4.003,971,2.239,986,1.844,987,2.113,988,2.393,1027,2.113,1033,2.113,1039,3.493,1040,3.493,1041,3.493,1042,3.493,1043,3.493,1049,3.736,1050,3.736,1063,2.393,1145,2.113,1201,1.514,1222,1.775,1271,4.596,1448,2.01,1454,3,1541,5.193,1558,2.01,1559,2.237,1587,1.473,1780,2.113,1853,2.237,1919,3.736,1927,2.601,1934,2.393,1941,4.06,1944,5.273,1946,2.601,1955,4.06,1956,4.06,1957,4.06,1962,6.123,1984,2.879,2247,2.601,2249,2.113,2252,2.601,2366,7.37,2367,2.916,2368,5.602,2369,2.916,2370,2.916,2371,2.916,2372,2.916,2373,2.916,2374,7.277,2375,2.01,2376,2.916,2377,2.916,2378,6.33,2379,4.06,2380,3.493,2381,2.916,2382,2.916,2383,2.916,2384,2.916,2385,4.06,2386,4.553,2387,2.916,2388,2.916,2389,2.916,2390,2.916,2391,2.916,2392,4.553,2393,2.601,2394,2.916,2395,2.916,2396,4.553,2397,2.916,2398,2.916,2399,2.393,2400,2.916,2401,2.916,2402,2.916,2403,2.916,2404,2.01,2405,2.916,2406,2.237,2407,2.916,2408,2.916,2409,2.916,2410,2.916,2411,2.916,2412,2.916,2413,2.916,2414,4.553,2415,2.916,2416,2.916,2417,2.916,2418,2.916,2419,2.916,2420,2.916,2421,2.916,2422,2.916,2423,2.916,2424,2.601,2425,4.553,2426,2.601,2427,2.916,2428,2.916,2429,2.916,2430,2.916,2431,4.553,2432,2.916,2433,2.916,2434,2.916,2435,2.916,2436,5.602,2437,2.916,2438,2.916,2439,2.916,2440,2.916,2441,2.916,2442,2.916,2443,2.601,2444,2.916,2445,2.916,2446,2.916,2447,5.602,2448,4.553,2449,4.553,2450,2.916,2451,4.553,2452,2.916,2453,4.553,2454,4.553,2455,2.916,2456,4.553,2457,2.916,2458,2.916,2459,2.916,2460,2.916,2461,2.916,2462,2.601,2463,2.916,2464,2.916,2465,2.916,2466,2.916,2467,2.916,2468,2.916,2469,2.916,2470,2.916,2471,2.916,2472,5.602,2473,2.916,2474,2.916,2475,2.916,2476,2.601,2477,2.916,2478,2.916,2479,2.916,2480,2.916,2481,2.916,2482,2.916,2483,2.916,2484,2.916,2485,2.916,2486,2.916,2487,2.916,2488,2.916,2489,2.916,2490,2.916,2491,2.916]],["title/classes/LocalFileStorage.html",[33,0.204,2492,3.646]],["body/classes/LocalFileStorage.html",[3,0.057,4,0.064,5,0.057,13,0.195,17,0.94,19,0.634,20,0.314,21,0.006,23,2.323,30,0.064,31,0.004,32,0.004,33,0.221,35,1.012,45,0.519,48,0.98,50,0.193,95,1.487,112,2.59,143,1.565,146,1.852,149,1.68,205,3.26,206,2.471,233,1.868,338,3.378,339,2.093,340,2.077,375,2.149,461,1.638,490,2.603,491,1.451,533,1.729,741,2.929,983,3.001,1198,4.048,1205,3.553,1776,5.112,1779,5.285,1780,5.622,1781,5.285,1783,5.652,1787,5.285,1789,4.229,1790,5.622,1791,6.621,1792,6.365,1793,6.001,1795,4.992,1796,3.26,1800,3.553,1804,3.954,1870,4.229,2253,4.597,2492,5.285,2493,4.597,2494,5.155,2495,5.155,2496,6.889,2497,5.155,2498,5.155,2499,5.155,2500,5.155,2501,5.155,2502,5.155,2503,5.155,2504,5.155,2505,5.155,2506,5.155,2507,5.155,2508,4.229,2509,6.889,2510,6.889,2511,5.155,2512,5.155,2513,5.155,2514,6.889,2515,4.597,2516,5.155,2517,5.155,2518,5.155,2519,5.155,2520,5.155,2521,4.597,2522,5.155,2523,5.155,2524,5.155,2525,5.155,2526,4.597,2527,5.155,2528,5.155,2529,5.155]],["title/injectables/LoggerConfigService.html",[486,0.996,2530,3.646]],["body/injectables/LoggerConfigService.html",[0,1.244,3,0.068,4,0.055,5,0.049,9,0.509,13,0.167,14,0.784,17,0.675,19,0.467,20,0.26,21,0.006,28,3.854,30,0.076,31,0.004,32,0.004,33,0.189,45,0.561,50,0.144,88,2.231,95,1.068,106,2.079,117,2.159,143,1.408,146,2.045,147,0.761,149,1.802,189,2.843,190,1.455,201,5.085,233,0.956,234,5.085,236,3.389,237,3.051,239,3.048,240,3.92,246,5.188,251,5.625,305,3.432,339,1.503,375,1.842,486,1.299,487,1.661,489,2.199,491,1.244,502,2.819,676,1.882,727,2.596,844,2.829,1080,2.231,1168,3.389,1169,3.13,1174,3.312,1448,4.272,2375,5.35,2404,4.935,2530,4.755,2531,7.716,2532,6.922,2533,6.922,2534,6.922,2535,6.922,2536,6.922,2537,6.922,2538,6.922,2539,6.198,2540,6.922,2541,6.922,2542,6.198,2543,4.418,2544,6.271,2545,4.418,2546,4.418,2547,7.557,2548,4.418,2549,4.418,2550,4.418,2551,4.418,2552,5.527,2553,4.418,2554,4.418,2555,5.527,2556,5.527,2557,4.491,2558,4.418,2559,5.527,2560,4.491,2561,5.527,2562,5.527,2563,5.527,2564,5.527,2565,5.527,2566,5.527,2567,3.94,2568,3.94,2569,5.955,2570,3.201,2571,3.625,2572,3.625,2573,3.94,2574,5.085,2575,5.085,2576,5.085,2577,5.085,2578,3.94,2579,3.94,2580,3.94,2581,3.94,2582,3.94,2583,3.94,2584,3.94]],["title/interfaces/LoggerConfiguration.html",[0,1.338,2544,3.646]],["body/interfaces/LoggerConfiguration.html",[0,1.445,2,2.46,3,0.076,4,0.063,5,0.056,13,0.194,14,0.869,19,0.335,20,0.314,21,0.006,28,4.012,30,0.085,31,0.004,32,0.004,33,0.22,50,0.16,88,2.038,106,1.722,117,1.547,147,0.884,149,1.867,189,2.597,190,1.69,201,4.21,233,1.111,234,7.07,236,3.937,237,3.298,239,2.524,240,3.245,246,6.245,251,6.245,305,3.963,375,2.139,486,1.439,489,1.82,502,2.417,676,2.186,844,3.135,1080,2.592,1168,3.937,1169,2.592,1174,2.742,1448,3.537,2375,4.734,2404,5.335,2530,3.937,2531,4.21,2532,4.576,2533,4.576,2534,4.576,2535,4.576,2536,4.576,2537,4.576,2538,4.576,2540,4.576,2541,4.576,2544,6.342,2547,7.909,2552,4.576,2555,4.576,2556,4.576,2557,3.718,2559,4.576,2560,3.718,2561,4.576,2562,7.685,2563,7.685,2564,7.685,2565,6.124,2566,6.124,2567,4.576,2568,4.576,2569,6.342,2570,3.718,2571,4.21,2572,4.21,2573,4.576,2574,5.635,2575,5.635,2576,5.635,2577,5.635,2578,4.576,2579,4.576,2580,4.576,2581,4.576,2582,4.576,2583,4.576,2584,4.576]],["title/modules/MetricModule.html",[158,1.538,176,3.444]],["body/modules/MetricModule.html",[3,0.08,4,0.089,5,0.08,21,0.006,30,0.089,31,0.005,32,0.005,33,0.31,50,0.199,147,1.246,158,2.757,160,3.222,176,6.176,187,3.299,237,3.08,238,2.888,314,3.98,424,4.763,425,4.982,1407,4.247,1448,4.982,2585,7.228,2586,7.228,2587,5.545,2588,7.228,2589,5.545,2590,7.228,2591,7.228]],["title/classes/NoneTrustPolicy.html",[33,0.204,78,2.617]],["body/classes/NoneTrustPolicy.html",[3,0.06,4,0.067,5,0.06,9,0.629,13,0.207,14,0.905,19,0.521,20,0.328,21,0.006,30,0.113,31,0.005,32,0.005,33,0.4,34,3.005,35,1.072,36,3.451,37,4.536,38,3.921,39,5.064,40,5.403,41,3.124,42,0.91,44,3.955,45,0.328,48,1.672,50,0.186,51,1.646,52,4.112,53,5.795,54,2.181,55,2.537,56,2.376,57,2.845,58,1.302,59,4.031,60,4.031,61,4.031,62,3.762,63,2.552,64,3.451,65,3.063,66,4.536,67,4.536,68,3.762,69,5.838,70,4.325,71,3.005,72,3.762,73,3.762,74,3.005,75,3.596,76,2.433,77,3.323,78,3.94,79,3.005,80,5.047,81,2.684,82,1.675,83,3.762,84,3.005,85,3.762,619,4.867,2592,5.458]],["title/classes/NotificationRequestDto.html",[33,0.204,2593,3.646]],["body/classes/NotificationRequestDto.html",[3,0.077,4,0.086,5,0.077,13,0.264,14,1.054,19,0.544,20,0.303,21,0.006,30,0.086,31,0.005,32,0.005,33,0.357,35,1.368,42,1.39,45,0.501,50,0.194,56,2.273,58,1.662,103,3.835,697,4.404,713,6.21,717,6.21,1258,5.432,1391,4.8,2593,6.395,2594,7.956,2595,8.922,2596,7.32,2597,6.964,2598,8.336,2599,6.964]],["title/classes/Oauth2AuthorizationServerResponse.html",[33,0.204,2600,3.444]],["body/classes/Oauth2AuthorizationServerResponse.html",[3,0.054,4,0.061,5,0.054,9,0.568,12,1.759,13,0.187,14,0.845,19,0.633,20,0.336,21,0.006,23,1.647,28,2.785,29,5.481,30,0.061,31,0.004,32,0.004,33,0.211,35,0.967,45,0.556,126,3.079,305,3.202,306,4.067,307,2.615,308,2.615,313,3.926,314,5.146,321,4.966,328,5.668,329,1.623,336,5.161,405,3.926,471,2.799,513,6.67,568,3.38,569,5.494,571,5.494,638,4.402,646,7.249,653,6.67,776,5.816,779,5.816,781,5.816,782,5.816,784,5.816,786,5.816,808,4.841,1010,2.894,1281,6.158,1295,4.344,1484,5.891,1840,4.841,2183,4.392,2320,4.841,2600,4.841,2601,8.334,2602,4.925,2603,4.925,2604,8.763,2605,4.925,2606,4.925,2607,4.041,2608,4.925,2609,4.925,2610,6.681,2611,4.392]],["title/classes/OfferRequestDto.html",[33,0.204,2095,3.276]],["body/classes/OfferRequestDto.html",[3,0.053,4,0.06,5,0.053,9,0.93,12,1.271,13,0.183,14,1.02,16,1.69,17,0.988,19,0.592,20,0.342,21,0.006,30,0.081,31,0.004,32,0.004,33,0.345,35,0.948,41,3.41,42,1.452,45,0.546,50,0.197,51,1.456,52,3.082,55,2.682,56,1.912,57,2.132,58,1.152,81,4.527,88,2.123,93,1.508,100,3.128,102,1.25,103,2.659,104,2.528,110,2.383,117,1.987,125,2.972,326,5.438,329,2.171,536,3.09,598,2.057,607,2.818,611,3.156,672,2.204,697,3.053,705,4.945,859,4.343,860,4.745,870,3.09,901,2.295,917,4.306,1080,3.329,1092,3.329,1133,2.375,1162,5.056,1316,3.961,1614,5.407,1978,5.438,2095,4.543,2098,3.181,2104,3.181,2107,5.172,2108,3.961,2119,3.704,2128,6.185,2129,3.961,2612,7.315,2613,6.692,2614,4.828,2615,4.828,2616,4.828,2617,4.828,2618,4.828,2619,5.877,2620,4.828,2621,4.828,2622,5.056,2623,4.828,2624,4.828,2625,4.828,2626,4.828,2627,5.877,2628,5.877,2629,3.961,2630,4.306,2631,4.306,2632,4.306]],["title/classes/OfferResponse.html",[33,0.204,2098,3.132]],["body/classes/OfferResponse.html",[3,0.062,4,0.069,5,0.062,9,0.84,12,1.477,13,0.213,14,1.023,16,1.526,19,0.604,20,0.331,21,0.006,30,0.09,31,0.005,32,0.005,33,0.367,35,1.102,41,3.166,45,0.486,50,0.207,51,1.691,52,3.405,55,2.82,56,1.855,57,2.357,58,1.338,81,4.21,88,1.918,93,1.752,100,3.371,102,1.453,103,3.089,104,2.794,110,2.028,117,1.691,125,2.982,326,5.278,329,1.848,536,3.147,598,2.39,607,2.617,611,2.851,672,2.56,697,3.547,705,3.696,859,3.696,860,3.547,870,2.869,901,1.953,1080,2.833,1133,3.978,1162,4.304,1614,4.602,1978,4.065,2095,3.866,2098,4.799,2104,3.696,2107,5.02,2108,4.602,2119,4.304,2128,5.588,2129,4.602,2612,6.635,2613,5.002,2619,5.002,2622,4.304,2627,5.002,2628,6.495,2629,4.602,2630,5.002,2631,5.002,2632,5.002,2633,5.61,2634,5.61]],["title/controllers/Oid4vciController.html",[139,1.433,2158,3.646]],["body/controllers/Oid4vciController.html",[3,0.053,4,0.059,5,0.053,9,0.552,12,2.342,13,0.181,17,0.814,20,0.306,21,0.006,30,0.059,31,0.004,32,0.004,33,0.205,42,1.246,45,0.449,48,1.246,50,0.217,82,2.011,95,1.385,102,1.24,116,1.874,128,4.923,139,2.253,141,1.731,143,1.489,146,1.881,147,0.825,148,3.028,149,1.63,193,2.721,233,1.036,238,2.618,263,5.594,314,4.634,338,3.401,339,1.812,340,1.976,345,4.749,356,2.486,373,3.155,375,1.996,376,1.909,536,3.518,599,4.988,607,2.723,610,3.155,611,2.565,633,2.295,638,4.318,661,3.155,664,2.558,665,5.15,666,3.673,672,2.185,676,2.04,836,3.028,838,2.721,889,2.239,932,3.502,1172,2.813,1306,3.99,1391,3.3,1733,4.318,2105,4.725,2106,3.469,2154,3.028,2158,5.027,2162,3.469,2163,3.673,2593,6.164,2635,4.27,2636,4.788,2637,5.376,2638,4.788,2639,4.788,2640,4.788,2641,6.553,2642,4.788,2643,4.788,2644,4.788,2645,4.788,2646,4.788,2647,4.788,2648,3.928,2649,5.027,2650,4.788,2651,3.155,2652,4.788,2653,3.928,2654,4.788,2655,4.788,2656,4.27,2657,4.788,2658,4.27,2659,4.788,2660,4.788,2661,4.788,2662,4.788,2663,4.788,2664,4.788,2665,4.788,2666,4.788,2667,4.788,2668,4.788,2669,3.928,2670,4.788]],["title/controllers/Oid4vpController.html",[139,1.433,2671,3.646]],["body/controllers/Oid4vpController.html",[3,0.058,4,0.065,5,0.058,9,0.607,12,1.84,13,0.199,17,0.761,20,0.254,21,0.006,30,0.065,31,0.004,32,0.004,33,0.226,42,1.165,45,0.42,48,1.328,50,0.216,95,1.351,102,1.364,116,2.061,139,2.364,141,1.904,143,1.588,146,1.997,147,0.907,148,3.33,149,1.417,314,3.847,329,2.302,336,3.627,338,3.402,339,1.694,345,5.063,356,3.627,362,2.524,373,3.469,375,2.195,376,2.433,491,1.482,536,3.484,606,4.871,627,6.052,633,2.524,638,4.604,664,2.813,665,4.816,666,4.039,676,2.243,729,5.107,836,4.418,932,3.733,933,3.971,959,3.627,1146,3.206,1181,3.847,1511,4.039,1733,5.167,2154,3.33,2162,5.063,2163,4.039,2648,4.32,2649,5.36,2651,3.469,2653,4.32,2656,4.695,2658,6.23,2671,6.016,2672,4.695,2673,5.265,2674,6.987,2675,6.992,2676,5.265,2677,5.265,2678,5.265,2679,5.405,2680,4.695,2681,5.265,2682,5.265,2683,4.695,2684,4.695,2685,5.265,2686,5.265,2687,5.265,2688,5.265]],["title/modules/Oid4vpModule.html",[158,1.538,2153,3.132]],["body/modules/Oid4vpModule.html",[3,0.063,4,0.071,5,0.063,21,0.006,30,0.071,31,0.005,32,0.005,33,0.245,50,0.225,141,2.668,147,0.986,158,2.642,160,2.551,161,2.89,162,3.057,163,3.057,164,2.814,165,4.124,166,4.124,171,5.195,177,4.665,178,5.565,182,3.942,183,3.057,184,3.057,187,3.367,209,3.77,215,4.39,216,4.146,729,5.712,2153,6.527,2154,5.78,2155,5.565,2156,5.78,2159,5.085,2160,3.252,2162,5.346,2163,4.39,2164,4.146,2165,4.694,2671,6.264,2684,5.102,2689,5.102,2690,5.722,2691,5.102,2692,5.102,2693,5.722,2694,7.281,2695,4.861,2696,5.102,2697,5.722]],["title/injectables/Oid4vpService.html",[486,0.996,729,2.793]],["body/injectables/Oid4vpService.html",[3,0.029,4,0.032,5,0.029,11,2.385,12,2.059,13,0.1,16,0.551,17,0.651,19,0.495,20,0.217,21,0.006,23,0.648,25,1.051,30,0.032,31,0.003,32,0.003,33,0.113,41,2.34,45,0.359,50,0.206,82,2.004,93,0.821,95,1.03,96,2.576,116,1.029,117,0.793,126,1.725,127,1.545,138,1.073,143,0.954,146,1.46,147,0.453,149,0.851,189,2.451,190,0.866,205,1.663,233,1.992,237,1.121,238,2.092,240,3.78,264,2.654,267,2.12,276,1.822,278,2.385,313,1.545,316,3.502,321,1.366,329,1.969,336,3.391,338,1.643,339,1.688,340,1.802,353,3.041,362,2.012,376,2.21,399,1.366,461,1.9,469,1.906,473,2.893,474,3.443,483,1.096,486,0.88,487,0.989,489,0.933,490,2.624,491,1.182,502,2.369,505,2.335,516,2.654,528,2.179,533,2.877,536,3.165,540,1.2,566,3.451,573,2.345,580,3.397,585,2.345,586,2.018,587,1.906,599,1.448,606,3.72,627,4.331,661,2.765,662,1.813,664,1.405,667,3.793,668,1.733,672,1.2,681,1.663,698,1.906,705,1.733,728,3.255,729,2.466,751,1.601,758,1.448,771,2.654,773,4.945,794,1.545,815,2.94,828,2.179,832,1.495,836,2.654,844,3.462,885,1.448,889,1.23,948,2.243,950,2.179,955,3.188,957,2.385,958,2.555,971,2.064,1076,2.385,1092,3.019,1133,1.294,1174,1.405,1183,1.906,1222,3.639,1230,3.22,1267,2.345,1339,3.22,1372,2.345,1394,1.545,1409,2.345,1436,2.158,1453,2.158,1454,3.451,1462,1.906,1463,2.018,1467,3.041,1489,3.743,1494,4.586,1522,4.62,1589,3.443,1590,2.018,1756,2.345,1765,2.345,1978,3.041,1984,1.663,2098,1.733,2155,3.639,2156,4.62,2162,3.041,2164,1.906,2165,2.158,2192,4.13,2399,2.158,2637,5.359,2651,3.451,2675,3.743,2679,5.39,2680,3.743,2683,2.345,2698,2.345,2699,4.197,2700,5.237,2701,4.62,2702,4.62,2703,2.63,2704,4.197,2705,2.63,2706,3.743,2707,3.443,2708,3.443,2709,2.63,2710,4.586,2711,2.63,2712,2.63,2713,4.197,2714,2.158,2715,2.158,2716,2.158,2717,3.451,2718,2.63,2719,2.63,2720,2.158,2721,2.63,2722,5.011,2723,3.22,2724,3.443,2725,2.345,2726,4.197,2727,6.531,2728,5.977,2729,4.197,2730,5.237,2731,2.63,2732,4.197,2733,6.531,2734,2.63,2735,4.197,2736,2.63,2737,2.63,2738,2.63,2739,2.158,2740,2.345,2741,2.63,2742,2.63,2743,2.63,2744,2.63,2745,6.531,2746,3.443,2747,2.63,2748,2.63,2749,2.63,2750,2.63,2751,2.63,2752,2.63,2753,2.63,2754,2.63,2755,2.63,2756,2.63,2757,4.197,2758,2.63,2759,2.63,2760,2.63,2761,2.63,2762,2.63,2763,2.345,2764,2.345,2765,2.63,2766,2.158,2767,2.345,2768,2.63,2769,2.63,2770,4.197,2771,2.63,2772,4.197,2773,2.158,2774,2.63,2775,2.158,2776,2.158,2777,2.63,2778,2.63,2779,2.63,2780,2.63,2781,4.197,2782,4.197,2783,6.531,2784,2.63,2785,2.63,2786,2.63,2787,4.197,2788,2.63,2789,2.63,2790,2.63,2791,4.67,2792,2.63,2793,2.63,2794,4.197,2795,4.197,2796,3.743,2797,4.197,2798,2.63,2799,2.63,2800,2.63,2801,4.197,2802,2.63,2803,2.63,2804,4.197,2805,2.63,2806,5.237,2807,2.63,2808,2.158,2809,2.63,2810,4.197,2811,2.63,2812,2.63,2813,4.197,2814,4.197,2815,2.63,2816,2.63,2817,2.63,2818,2.63,2819,2.63,2820,2.63,2821,2.63,2822,2.63,2823,2.63]],["title/classes/ParResponseDto.html",[33,0.204,673,3.646]],["body/classes/ParResponseDto.html",[3,0.076,4,0.085,5,0.076,12,2.522,13,0.262,14,1.049,19,0.541,20,0.302,21,0.006,30,0.085,31,0.005,32,0.005,33,0.296,35,1.357,45,0.499,336,4.307,389,6.443,467,3.385,471,3.926,564,4.875,653,6.806,673,6.364,681,5.622,1133,4.535,1455,6.806,1456,7.398,2607,5.668,2611,6.16,2824,7.928]],["title/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,1.338,763,3.444]],["body/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,1.309,2,1.436,3,0.033,4,0.037,5,0.033,12,2.089,13,0.113,14,0.588,19,0.543,20,0.268,21,0.006,22,1.249,30,0.057,31,0.003,32,0.003,33,0.128,41,1.82,48,0.569,50,0.203,65,1.083,82,0.919,88,1.224,90,2.664,93,0.935,107,3.469,110,2.322,116,2.514,117,0.903,125,1.714,126,2.116,129,2.878,138,2.62,147,0.516,149,1.493,189,1.911,190,0.987,193,1.702,233,2.029,238,2.276,239,1.473,263,1.823,267,3.511,268,4.371,270,3.137,276,1.672,278,3.65,315,1.436,316,1.436,321,1.555,329,2.529,338,2.721,340,0.903,352,1.649,394,2.17,396,2.17,461,2.59,473,3.204,482,2.721,486,0.974,490,2.468,491,0.843,502,2.297,505,3.422,509,1.6,512,3.567,514,1.649,528,1.555,533,2.991,536,3.216,555,2.064,559,1.894,566,1.974,568,2.54,569,2.17,571,2.17,575,2.298,580,2.642,598,1.276,601,4.12,604,2.83,605,1.76,606,1.6,607,1.504,611,2.23,639,2.298,643,4.061,649,2.17,650,3.369,661,3.754,662,2.064,664,1.6,667,2.958,668,1.974,669,1.823,671,2.298,672,1.367,681,3.603,698,4.654,702,2.17,719,2.298,722,2.457,724,2.457,726,2.457,728,2.664,729,3.348,730,3.469,733,2.298,735,5.704,736,2.457,738,5.269,743,2.457,747,2.457,751,4.233,752,6.036,753,5.269,754,3.078,755,2.457,756,5.269,757,2.17,758,1.649,759,2.457,760,2.298,761,2.17,762,2.457,763,4.129,764,5.333,765,3.369,766,2.457,767,2.457,768,3.814,769,2.457,770,3.814,771,2.94,772,5.269,773,4.396,774,2.457,775,2.457,776,2.298,777,2.457,778,2.457,779,2.298,780,1.974,781,2.298,782,2.298,783,2.457,784,2.298,785,2.457,786,2.298,787,2.457,788,2.457,789,3.814,790,2.457,791,2.298,792,2.457,793,2.457,794,4.323,795,2.457,796,2.457,797,2.457,798,2.457,799,2.457,800,4.674,801,4.371,802,2.348,803,3.814,804,3.567,805,2.457,806,5.269,807,3.814,808,5.563,809,2.457,810,3.814,811,3.814,812,3.814,813,3.814,814,3.814,815,2.286,816,3.814,817,2.457,818,2.457,819,2.457,820,2.457,821,2.457,822,2.457,823,2.457,824,3.814,825,2.457,826,2.457,827,1.823,828,1.555,829,2.457,830,2.298,831,2.457,832,1.702,833,2.457,834,2.457,835,2.298,836,1.894,837,3.814,838,1.702,839,2.457,840,4.674,841,2.457,842,2.457,843,2.457,844,2.6,845,2.457,846,2.457,847,2.17,848,3.814,849,2.457,850,3.814,851,2.484,852,2.457,853,4.674,854,2.457,855,2.457,856,2.457,857,2.457,858,2.457,859,1.974,860,2.94,861,2.064,862,2.457,863,2.298,864,2.457,865,4.371,866,2.457,867,2.457,868,2.457,869,4.674,870,1.063,871,2.457,872,2.457,873,4.371,874,2.457,875,2.457,876,2.457]],["title/interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html",[0,1.338,765,3.444]],["body/interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html",[0,1.301,2,1.425,3,0.033,4,0.037,5,0.033,12,2.084,13,0.113,14,0.584,17,0.503,19,0.561,20,0.278,21,0.006,22,1.239,30,0.057,31,0.003,32,0.003,33,0.127,41,1.809,48,0.565,50,0.203,65,1.075,82,0.912,88,1.217,90,2.651,93,0.928,107,3.452,110,2.312,116,2.503,117,0.896,125,1.704,126,2.107,129,2.863,138,2.609,147,0.512,149,1.488,189,1.902,190,0.979,193,1.689,233,2.027,238,2.265,239,1.462,263,1.809,267,3.498,268,4.349,270,3.122,276,1.666,278,3.634,315,1.425,316,1.425,321,1.543,329,2.522,338,2.711,340,0.896,352,1.636,394,2.154,396,2.154,461,2.584,473,3.185,482,2.711,486,0.968,490,2.46,491,0.837,502,2.29,505,3.412,509,1.588,512,3.545,514,1.636,528,1.543,533,2.986,536,3.212,555,2.048,559,1.879,566,1.958,568,2.527,569,2.154,571,2.154,575,2.28,580,2.626,598,1.266,601,3.596,604,2.813,605,1.746,606,1.588,607,1.495,611,2.219,639,2.28,643,4.044,649,2.154,650,3.348,661,3.736,662,2.048,664,1.588,667,2.944,668,1.958,669,1.809,671,2.28,672,1.356,681,3.585,698,4.634,702,2.154,719,2.28,722,2.438,724,2.438,726,2.438,728,2.651,729,3.331,730,3.452,733,2.28,735,5.683,736,2.438,738,5.247,743,2.438,747,2.438,751,4.217,752,5.247,753,5.247,754,3.065,755,2.438,756,6.017,757,2.154,758,1.636,759,2.438,760,2.28,761,2.154,762,2.438,763,3.348,764,5.314,765,4.108,766,5.247,767,5.247,768,3.791,769,2.438,770,3.791,771,2.922,772,5.247,773,4.38,774,2.438,775,2.438,776,2.28,777,2.438,778,2.438,779,2.28,780,1.958,781,2.28,782,2.28,783,2.438,784,2.28,785,2.438,786,2.28,787,2.438,788,2.438,789,3.791,790,2.438,791,2.28,792,2.438,793,2.438,794,4.309,795,2.438,796,2.438,797,2.438,798,2.438,799,2.438,800,4.651,801,4.349,802,2.334,803,3.791,804,3.545,805,2.438,806,5.247,807,3.791,808,5.547,809,2.438,810,3.791,811,3.791,812,3.791,813,3.791,814,3.791,815,2.273,816,3.791,817,2.438,818,2.438,819,2.438,820,2.438,821,2.438,822,2.438,823,2.438,824,3.791,825,2.438,826,2.438,827,1.809,828,1.543,829,2.438,830,2.28,831,2.438,832,1.689,833,2.438,834,2.438,835,2.28,836,1.879,837,3.791,838,1.689,839,2.438,840,4.651,841,2.438,842,2.438,843,2.438,844,2.588,845,2.438,846,2.438,847,2.154,848,3.791,849,2.438,850,3.791,851,2.469,852,2.438,853,4.651,854,2.438,855,2.438,856,2.438,857,2.438,858,2.438,859,1.958,860,2.922,861,2.048,862,2.438,863,2.28,864,2.438,865,4.349,866,2.438,867,2.438,868,2.438,869,4.651,870,1.054,871,2.438,872,2.438,873,4.349,874,2.438,875,2.438,876,2.438]],["title/classes/PolicyCredential.html",[33,0.204,80,3.006]],["body/classes/PolicyCredential.html",[3,0.058,4,0.065,5,0.058,9,0.604,13,0.199,14,0.881,17,0.908,19,0.51,20,0.341,21,0.006,30,0.112,31,0.004,32,0.004,33,0.396,34,2.886,35,1.029,36,3.314,37,4.446,38,3.717,39,4.779,40,5.1,41,3.062,42,1.304,45,0.47,48,1.65,50,0.182,51,1.58,52,4.058,53,5.718,54,2.094,55,2.486,56,2.356,57,2.808,58,1.25,59,4.211,60,4.211,61,4.211,62,3.612,63,2.451,64,3.314,65,2.829,66,4.446,67,4.738,68,3.612,69,5.746,70,4.268,71,2.886,72,3.612,73,3.612,74,2.886,75,3.453,76,2.337,77,3.191,78,2.886,79,2.886,80,5.272,81,3.848,82,2.4,83,5.392,84,2.886,85,3.612,295,4.674,296,6.002,2825,6.966,2826,5.241,2827,5.241,2828,5.241]],["title/classes/PresentationAttachment.html",[33,0.204,927,2.894]],["body/classes/PresentationAttachment.html",[3,0.042,4,0.047,5,0.042,7,1.7,9,0.761,12,2.249,13,0.144,14,0.706,16,1.521,17,0.718,19,0.607,20,0.339,21,0.006,25,2.9,26,1.741,27,1.463,28,2.325,30,0.103,31,0.004,32,0.004,33,0.373,35,0.749,41,2.183,42,1.1,45,0.397,48,1.743,50,0.194,51,1.15,52,4.074,54,1.524,55,2.885,56,2.287,57,2.696,58,0.91,59,1.926,60,3.331,61,3.331,70,3.798,76,2.487,82,1.17,88,1.469,100,2.325,102,0.988,104,2.14,106,1.28,110,2.017,116,1.493,125,2.432,126,1.256,206,1.828,238,2.9,252,2.1,276,0.867,307,1.493,329,1.256,400,1.548,427,1.212,446,2.173,467,1.556,480,4.31,481,1.828,482,2.581,483,2.749,485,2.1,564,2.241,598,1.625,607,1.805,630,2.241,659,1.876,663,4.418,672,1.741,832,2.168,838,2.168,851,2.038,870,1.353,877,1.68,883,1.926,884,1.98,885,3.072,886,3.278,888,3.278,889,1.783,892,3.479,894,2.431,897,2.325,898,1.59,900,1.625,901,1.328,905,3.278,907,2.168,908,2.168,909,1.556,910,2.325,911,1.556,912,2.81,913,4.589,914,2.241,919,2.817,920,3.632,921,4.346,922,2.981,923,3.748,924,2.513,925,4.782,926,3.528,927,4.418,928,4.346,929,4.782,930,4.782,931,4.589,932,4.126,933,4.124,934,4.346,935,2.513,936,2.513,937,4.015,938,2.513,939,2.513,940,2.513,941,2.513,942,2.322,943,2.513,944,2.513,945,3.676,946,4.418,947,2.513,948,2.038,949,2.513,950,2.896,951,2.513,952,2.412,953,2.038,954,3.393,955,2.322,956,2.241,957,2.168,958,2.322,959,1.98,960,2.513,1068,3.401,2829,3.814,2830,3.814,2831,3.814]],["title/entities/PresentationConfig.html",[877,1.211,948,2.54]],["body/entities/PresentationConfig.html",[3,0.035,4,0.04,5,0.035,7,2.188,9,0.873,12,2.399,13,0.122,14,0.621,16,1.65,17,0.953,19,0.594,20,0.344,21,0.006,25,1.961,26,2.24,27,1.883,28,2.046,30,0.097,31,0.003,32,0.003,33,0.356,41,1.921,42,1.439,45,0.519,48,1.732,50,0.184,51,0.969,52,3.89,54,1.284,55,2.782,56,2.162,57,2.547,58,0.767,59,1.623,60,3.007,61,3.007,70,3.531,76,2.188,82,0.986,88,1.755,100,2.046,102,0.832,104,1.883,106,1.647,110,2.596,116,1.258,125,2.457,126,1.617,206,1.541,238,2.663,252,1.77,276,1.353,307,1.258,329,1.617,400,1.848,427,1.021,446,2.196,467,2.003,480,4.678,481,2.353,482,2.962,483,1.34,485,2.703,564,2.884,598,1.369,607,1.588,630,2.884,659,1.581,663,4.371,672,1.467,832,2.789,838,2.789,851,2.623,870,1.741,877,1.698,879,1.503,883,3.007,884,3.092,885,3.67,886,3.499,888,3.916,889,2.295,890,3.104,892,3.891,894,2.904,896,1.77,897,2.778,898,2.046,900,2.091,901,1.709,905,3.499,907,2.789,908,2.789,909,1.311,910,2.046,911,1.311,912,2.537,913,5.536,914,1.889,919,2.479,920,3.279,921,3.234,922,2.623,923,3.788,924,2.118,925,4.987,926,2.032,927,4.058,928,2.118,929,4.392,930,4.392,931,4.215,932,4.044,933,3.788,934,3.924,935,2.118,936,2.118,937,3.625,938,2.118,939,2.118,940,2.118,941,2.118,942,1.957,943,2.118,944,2.118,945,3.234,946,4.608,947,2.118,948,2.623,949,3.234,950,3.727,951,3.234,952,3.104,953,1.717,954,3.116,955,3.625,956,2.884,957,2.789,958,3.625,959,2.548,960,2.118,1081,2.329,1085,2.866,1119,2.637,1123,2.466,1983,2.866,2832,3.214,2833,3.214,2834,3.214,2835,3.214,2836,3.214,2837,3.214,2838,3.214,2839,3.214,2840,3.214,2841,3.214,2842,3.214,2843,3.214,2844,3.214,2845,3.214,2846,3.214]],["title/classes/PresentationConfigCreateDto.html",[33,0.204,2847,3.444]],["body/classes/PresentationConfigCreateDto.html",[3,0.078,4,0.088,5,0.078,14,0.899,21,0.006,30,0.088,31,0.005,32,0.005,33,0.305,35,1.396,38,3.762,50,0.197,63,3.324,102,1.841,117,2.544,233,1.827,276,1.917,472,3.691,482,2.782,692,5.453,883,4.262,884,4.381,948,3.798,971,3.496,1062,4.495,1150,5.453,2847,6.115,2848,6.339,2849,8.438,2850,5.832]],["title/classes/PresentationDuringIssuanceConfig.html",[33,0.204,608,3.006]],["body/classes/PresentationDuringIssuanceConfig.html",[0,1.48,3,0.058,4,0.065,5,0.058,9,0.606,12,1.838,13,0.199,14,0.883,17,0.572,19,0.511,20,0.337,21,0.006,30,0.112,31,0.004,32,0.004,33,0.39,35,1.033,42,0.876,45,0.316,50,0.183,51,1.585,54,2.101,55,2.218,56,2.321,57,2.701,58,1.254,65,3.018,79,2.895,88,2.351,90,4.175,97,3.624,104,3.005,105,2.655,106,2.8,110,2.524,112,2.946,117,2.104,125,2.889,126,2.581,138,3.545,267,4.602,271,2.016,316,4.001,482,3.267,589,3.201,590,4.414,591,3.325,592,5.279,593,4.955,598,2.24,599,3.843,600,4.811,601,3.624,602,4.811,603,3.623,604,3.201,605,5.105,606,3.73,607,2.258,608,5.279,609,4.811,610,4.599,611,2.732,612,4.414,613,3.201,614,3.623,615,3.623,616,3.201,617,3.325,618,3.464,2851,5.257]],["title/controllers/PresentationManagementController.html",[139,1.433,2852,3.646]],["body/controllers/PresentationManagementController.html",[3,0.042,4,0.047,5,0.042,9,0.443,12,2.254,13,0.146,16,1.695,17,0.793,19,0.475,20,0.331,21,0.006,25,1.536,30,0.047,31,0.004,32,0.004,33,0.165,41,1.505,42,1.214,45,0.438,50,0.212,88,2.13,93,1.752,95,1.255,97,2.913,102,0.996,110,1.39,117,2.336,127,2.259,139,1.159,141,1.39,143,1.275,146,1.952,147,0.662,149,1.344,193,2.185,233,1.214,238,1.536,271,3.521,274,4.566,278,4.402,305,3.176,307,1.505,308,2.851,326,4.066,329,2.876,338,3.269,339,1.766,356,3.44,357,4.066,359,4.603,360,2.533,376,2.256,379,4.304,382,2.501,482,3.417,490,2.223,491,1.082,498,1.602,502,1.752,509,2.054,533,1.882,601,3.44,633,1.843,672,2.561,676,2.39,684,3.154,705,3.697,729,3.893,901,1.338,908,3.189,969,4.515,971,2.759,973,2.533,983,1.675,984,2.117,1077,3.189,1133,2.759,1156,3.189,1172,3.297,1180,2.913,1197,4.066,1198,3.297,1207,2.649,1333,2.431,1334,2.431,1335,2.431,1344,2.649,1447,4.034,1558,2.649,1790,2.785,1814,3.154,2028,5.588,2093,5.908,2094,3.428,2096,3.428,2097,5.003,2098,4.365,2099,3.428,2100,3.428,2103,3.154,2104,4.365,2107,2.649,2110,3.428,2111,3.428,2112,5.003,2113,2.949,2114,6.495,2115,3.428,2116,5.436,2117,3.154,2118,5.003,2119,4.304,2120,3.428,2137,3.428,2138,3.428,2139,3.428,2140,3.428,2141,3.428,2142,3.428,2143,3.428,2679,3.867,2702,4.19,2715,3.154,2720,3.154,2847,5.278,2852,4.304,2853,3.428,2854,5.61,2855,5.908,2856,3.844,2857,3.844,2858,3.844,2859,3.844,2860,6.205,2861,3.844,2862,3.844,2863,3.844,2864,3.844,2865,3.844,2866,3.844,2867,3.428,2868,3.844,2869,3.844,2870,3.844,2871,3.844,2872,3.844,2873,3.844,2874,3.844,2875,3.844,2876,3.844,2877,3.844,2878,3.844,2879,3.844,2880,3.844,2881,3.844]],["title/classes/PresentationRequest.html",[33,0.204,2860,3.646]],["body/classes/PresentationRequest.html",[3,0.062,4,0.069,5,0.062,9,0.648,12,2.438,13,0.213,14,0.922,16,1.528,17,0.794,19,0.475,20,0.348,21,0.006,27,2.796,30,0.09,31,0.005,32,0.005,33,0.312,35,1.104,42,1.349,45,0.487,50,0.17,55,2.317,56,2.062,58,1.341,88,2.395,103,3.094,104,2.796,105,3.682,106,2.446,110,3.348,125,2.984,129,3.682,329,3.125,458,5.025,472,3.785,481,3.495,482,3.624,598,2.394,601,2.917,697,3.553,705,5.333,959,3.785,1133,3.981,2104,4.804,2107,5.579,2116,4.61,2622,6.21,2629,5.982,2679,5.579,2860,5.593,2882,6.571,2883,5.619,2884,5.619,2885,5.619,2886,5.619,2887,7.291,2888,5.982]],["title/interfaces/PresentationRequestOptions.html",[0,1.338,2710,3.646]],["body/interfaces/PresentationRequestOptions.html",[0,1.884,2,3.208,3,0.074,4,0.083,5,0.074,9,0.772,12,2.309,13,0.254,14,1.029,17,1.058,19,0.572,20,0.296,21,0.006,27,3.121,30,0.083,31,0.005,32,0.005,50,0.156,88,2.143,110,3.438,125,3.364,329,2.681,472,4.225,536,3.373,598,2.852,959,4.225,2710,6.999,2882,5.134,2889,5.968,2890,7.257]],["title/modules/PresentationsModule.html",[158,1.538,2695,3.132]],["body/modules/PresentationsModule.html",[3,0.069,4,0.077,5,0.069,21,0.006,30,0.077,31,0.005,32,0.005,33,0.268,50,0.224,63,2.929,141,2.826,147,1.08,158,2.755,160,2.793,161,3.164,162,3.348,163,3.348,164,3.081,165,4.301,166,4.301,182,4.175,183,3.348,184,3.348,187,3.566,421,3.681,422,2.503,948,3.348,2153,5.149,2159,5.386,2160,3.561,2694,6.968,2695,6.375,2702,6.224,2850,5.14,2852,6.533,2867,5.587,2891,5.587,2892,5.587,2893,5.587,2894,5.587,2895,6.78,2896,6.265,2897,5.587,2898,6.265,2899,6.265,2900,6.265]],["title/injectables/PresentationsService.html",[486,0.996,2702,3.006]],["body/injectables/PresentationsService.html",[3,0.021,4,0.024,5,0.061,7,2.667,9,0.772,12,0.853,13,0.073,14,0.41,16,1.989,17,0.693,19,0.601,20,0.27,21,0.006,22,1.752,23,0.473,30,0.024,31,0.002,32,0.002,33,0.18,41,0.751,45,0.466,48,1.211,50,0.206,51,0.578,58,0.458,63,0.897,76,1.444,88,2.195,93,1.541,95,1.241,96,1.593,112,0.721,117,1.804,135,1.025,143,0.736,146,1.843,147,0.331,149,1.692,187,2.253,189,2.136,190,0.632,202,1.213,203,1.264,205,1.213,206,1.552,233,1.872,237,2.713,276,1.979,278,2.806,286,1.39,307,0.751,329,1.067,332,1.39,339,1.747,340,2.337,362,0.92,376,2.499,382,2.201,400,1.978,422,0.767,426,2.731,461,2.214,469,3.577,474,2.657,480,1.73,482,3.358,483,2.789,486,0.679,487,0.721,489,1.149,490,2.245,491,1.39,502,2.465,505,1.873,528,1.681,533,2.337,540,3.18,580,1.841,638,2.134,659,1.593,685,4.335,751,1.168,754,2.014,780,4.196,794,1.903,815,3.945,836,2.048,844,1.478,851,2.638,861,3.403,870,1.491,877,1.524,879,1.514,883,0.969,926,2.657,932,1.73,933,1.841,948,3.849,956,3.515,958,1.168,983,2.403,1075,2.347,1092,1.636,1133,2.942,1146,3.877,1147,2.134,1156,4.094,1169,2.493,1172,3.932,1174,2.245,1175,3.577,1180,1.681,1181,1.783,1182,5.49,1183,1.39,1187,3.006,1191,1.39,1196,3.577,1197,1.39,1198,1.127,1200,2.347,1201,0.996,1202,2.657,1203,1.39,1204,1.574,1205,1.322,1207,1.322,1209,1.39,1210,1.39,1211,2.657,1213,3.787,1214,1.574,1215,1.39,1216,2.347,1217,1.39,1218,1.39,1219,1.39,1220,1.39,1221,3.448,1222,1.972,1223,1.574,1224,1.574,1225,2.232,1226,1.574,1227,4.123,1228,2.048,1229,1.574,1230,1.472,1231,1.574,1232,1.574,1233,1.574,1234,1.574,1236,2.657,1237,2.657,1238,1.574,1239,1.472,1240,1.574,1241,1.574,1243,1.574,1244,1.574,1245,1.711,1246,1.574,1247,1.574,1248,1.472,1249,1.574,1250,1.574,1251,1.472,1252,1.574,1253,1.574,1257,1.39,1258,1.972,1259,1.574,1260,1.39,1261,1.574,1263,1.264,1264,1.264,1266,1.574,1274,1.39,1275,1.574,1295,1.73,1392,3.747,1394,4.843,1395,1.472,1396,1.472,1399,5.679,1400,1.472,1401,4.615,1441,2.888,1458,3.747,1465,1.322,1498,5.684,1500,1.322,1502,6.228,1577,2.347,1582,1.39,1586,1.574,1587,0.969,1588,1.322,1733,3.253,1878,1.574,1935,4.123,2055,1.711,2065,1.711,2077,1.711,2079,1.711,2080,1.711,2160,1.09,2249,1.39,2331,5.048,2361,1.264,2560,2.347,2669,2.657,2702,3.122,2720,1.574,2847,3.997,2850,1.574,2855,3.747,2901,1.711,2902,3.239,2903,6.691,2904,6.368,2905,4.202,2906,4.937,2907,3.239,2908,4.202,2909,3.239,2910,4.202,2911,3.239,2912,1.574,2913,4.965,2914,4.937,2915,3.239,2916,3.239,2917,2.888,2918,3.239,2919,3.239,2920,1.919,2921,3.239,2922,3.239,2923,1.919,2924,1.919,2925,3.239,2926,1.919,2927,1.919,2928,4.937,2929,4.402,2930,1.919,2931,1.919,2932,5.515,2933,4.937,2934,1.919,2935,3.239,2936,3.239,2937,1.919,2938,5.515,2939,1.919,2940,3.239,2941,1.919,2942,4.202,2943,2.484,2944,1.919,2945,3.239,2946,1.919,2947,3.239,2948,1.919,2949,3.239,2950,1.472,2951,1.322,2952,1.919,2953,1.919,2954,1.919,2955,3.239,2956,1.919,2957,1.919,2958,1.919,2959,4.202,2960,1.919,2961,3.239,2962,1.919,2963,1.919,2964,1.472,2965,1.574,2966,1.919,2967,1.919,2968,1.919,2969,1.919,2970,1.919,2971,1.919,2972,1.919,2973,1.919,2974,1.919,2975,1.919,2976,1.919,2977,1.919,2978,3.239,2979,1.919,2980,1.919,2981,1.919,2982,1.919,2983,1.919,2984,1.919,2985,1.919,2986,1.919,2987,4.202,2988,1.919,2989,1.919,2990,1.919,2991,1.919,2992,3.239,2993,1.574,2994,1.919]],["title/entities/RegistrarEntity.html",[877,1.211,2995,3.444]],["body/entities/RegistrarEntity.html",[3,0.07,4,0.078,5,0.07,13,0.24,14,0.995,19,0.612,20,0.326,21,0.006,30,0.078,31,0.005,32,0.005,33,0.271,42,1.492,45,0.538,48,1.702,50,0.183,276,1.945,400,2.161,427,2.013,446,2.949,877,2.004,879,2.962,890,5.412,894,3.428,896,3.488,897,3.731,898,3.28,900,3.352,901,2.739,909,2.585,910,3.28,911,2.585,912,3.647,2995,5.701,2996,5.649,2997,7.632,2998,7.632,2999,6.334,3000,6.334,3001,6.334,3002,6.334]],["title/modules/RegistrarModule.html",[158,1.538,177,3.006]],["body/modules/RegistrarModule.html",[3,0.067,4,0.075,5,0.067,9,0.706,21,0.006,30,0.075,31,0.005,32,0.005,33,0.262,50,0.217,147,1.055,158,2.726,160,3.756,161,3.091,162,3.27,163,3.27,164,3.01,165,4.255,166,4.255,171,5.286,177,6.231,182,4.114,183,3.27,184,3.27,187,4.035,209,4.032,317,6.317,421,3.596,422,2.445,489,2.732,957,4.376,1169,3.889,1535,5.307,2695,6.129,2701,6.254,2995,4.435,3003,5.457,3004,6.12,3005,5.457,3006,5.457,3007,6.12,3008,6.317,3009,6.12,3010,5.457,3011,6.12,3012,6.12]],["title/injectables/RegistrarService.html",[486,0.996,2701,3.006]],["body/injectables/RegistrarService.html",[3,0.025,4,0.028,5,0.025,7,3.89,9,0.544,11,4.916,13,0.085,14,0.469,16,1.264,17,0.746,19,0.592,20,0.27,21,0.006,24,1.426,28,0.94,30,0.028,31,0.002,32,0.003,33,0.097,41,1.45,45,0.489,48,0.704,50,0.186,74,3.571,82,1.137,88,1.589,89,2.554,95,1.491,106,1.243,112,0.848,117,0.68,138,0.92,143,0.842,146,1.817,147,0.389,149,1.649,189,2.487,190,0.743,206,2.261,233,1.728,237,1.579,238,2.182,239,1.822,263,2.256,267,1.871,276,1.847,278,2.106,307,0.883,308,2.539,315,4.276,321,1.171,328,3.454,329,0.743,338,1.846,339,1.662,340,1.647,343,2.343,350,2.843,352,2.04,376,1.889,400,1.522,401,2.256,422,0.901,426,2.493,427,0.717,446,1.799,461,2.537,467,0.92,486,0.776,487,0.848,489,1.937,490,2.902,491,1.538,502,2.725,505,2.103,508,2.843,509,2.52,514,2.04,515,2.554,533,2.727,559,1.426,638,2.441,663,1.373,672,1.029,727,1.325,728,3.568,742,1.171,758,1.242,830,1.73,844,1.691,851,1.98,882,4.87,885,2.04,889,3.033,911,0.92,923,3.104,933,2.106,955,3.325,956,4.595,957,2.106,1027,1.634,1076,2.68,1146,3.949,1156,2.106,1169,1.871,1171,2.554,1172,1.325,1180,1.924,1192,2.554,1196,2.685,1197,4.7,1198,3.811,1201,1.171,1222,1.373,1227,1.554,1255,2.843,1339,2.843,1381,3.957,1407,3.209,1448,3.764,1449,1.73,1454,1.486,1467,2.685,1483,1.85,1500,1.554,1503,1.426,1511,2.843,1535,2.554,1551,1.85,1555,1.73,1628,2.011,1733,2.441,1738,3.04,1758,4.206,1919,3.04,1944,4.7,2133,2.011,2180,2.011,2251,2.011,2261,3.04,2302,4.481,2359,3.304,2361,2.441,2385,2.011,2393,4.206,2406,1.73,2462,5.784,2515,2.011,2669,1.85,2679,3.764,2701,4.102,2702,4.826,2808,1.85,2888,4.481,2995,1.634,2997,3.304,2998,6.111,3008,7.444,3010,2.011,3013,2.011,3014,3.705,3015,3.304,3016,6.486,3017,8.256,3018,3.705,3019,6.853,3020,4.716,3021,4.716,3022,3.705,3023,3.705,3024,4.481,3025,5.461,3026,4.716,3027,3.705,3028,2.843,3029,3.705,3030,2.255,3031,2.255,3032,2.255,3033,2.255,3034,3.705,3035,2.255,3036,3.705,3037,7.984,3038,3.705,3039,2.255,3040,2.255,3041,3.04,3042,2.255,3043,2.255,3044,3.304,3045,3.705,3046,2.255,3047,5.461,3048,2.255,3049,3.705,3050,3.705,3051,3.705,3052,2.255,3053,5.461,3054,2.255,3055,2.011,3056,2.255,3057,2.255,3058,3.705,3059,3.705,3060,3.705,3061,3.705,3062,3.705,3063,2.255,3064,2.255,3065,2.255,3066,3.04,3067,2.255,3068,2.255,3069,3.705,3070,2.011,3071,2.011,3072,2.255,3073,2.255,3074,2.255,3075,2.255,3076,2.255,3077,2.255,3078,6.486,3079,2.255,3080,2.255,3081,3.705,3082,3.705,3083,3.705,3084,2.011,3085,2.255,3086,2.255,3087,3.04,3088,2.255,3089,2.255,3090,2.255,3091,2.255,3092,2.255,3093,2.255,3094,2.255,3095,2.255,3096,2.255,3097,2.255,3098,2.255,3099,2.255,3100,2.255,3101,2.255,3102,2.255,3103,2.255,3104,5.461,3105,2.255,3106,2.255,3107,2.255,3108,2.255,3109,2.255,3110,2.255,3111,2.255,3112,2.255,3113,2.255,3114,2.255,3115,2.255,3116,2.255,3117,4.716,3118,5.461,3119,2.255,3120,3.705,3121,2.255,3122,2.255,3123,3.705,3124,2.255,3125,2.255,3126,2.255,3127,2.255,3128,2.255,3129,2.011,3130,3.705,3131,2.255,3132,2.255,3133,2.255,3134,2.255,3135,2.255,3136,2.255,3137,2.255,3138,3.705,3139,2.255,3140,2.255,3141,2.255,3142,2.255,3143,2.255,3144,2.255]],["title/classes/RegistrationCertificateRequest.html",[33,0.204,923,2.701]],["body/classes/RegistrationCertificateRequest.html",[3,0.071,4,0.08,5,0.071,7,4.019,9,0.746,12,2.098,13,0.245,14,1.008,16,1.81,17,0.868,19,0.52,20,0.29,21,0.006,27,3.056,30,0.08,31,0.005,32,0.005,33,0.341,35,1.27,42,1.328,45,0.479,50,0.186,55,2.532,56,2.03,58,1.543,104,3.313,320,5.492,338,3.624,472,4.137,481,3.82,630,4.682,697,4.089,707,4.456,716,5.766,923,5.124,956,5.298,957,4.529,3145,7.702,3146,8.637,3147,6.466,3148,6.466]],["title/modules/ResolverModule.html",[158,1.538,2895,3.444]],["body/modules/ResolverModule.html",[3,0.075,4,0.085,5,0.075,21,0.006,30,0.085,31,0.005,32,0.005,33,0.294,50,0.207,147,1.181,158,2.867,160,3.055,161,3.461,162,3.662,163,3.662,164,3.37,165,4.475,166,4.475,182,4.411,183,3.662,184,3.662,187,3.128,2159,5.69,2160,3.895,2895,7.007,2913,6.86,3149,6.111,3150,6.111,3151,6.111,3152,6.853,3153,6.853]],["title/injectables/ResolverService.html",[486,0.996,2913,3.276]],["body/injectables/ResolverService.html",[3,0.056,4,0.062,5,0.056,7,2.254,9,0.583,13,0.192,17,0.74,20,0.247,21,0.006,22,3.425,23,2.177,25,2.02,30,0.062,31,0.004,32,0.004,33,0.217,45,0.409,50,0.206,95,1.172,96,4.438,143,1.545,146,1.52,147,0.871,149,1.559,233,1.779,238,2.02,239,3.344,270,3.744,329,1.666,339,1.649,340,2.05,375,2.108,376,1.981,399,3.53,461,2.725,486,1.425,487,1.901,489,2.412,490,2.578,491,1.423,505,3.663,524,4.148,533,1.696,540,3.104,568,3.937,659,2.487,662,3.485,751,3.078,754,4.397,794,3.996,815,3.344,1255,5.217,1284,3.744,1401,3.664,1462,4.927,1577,5.954,1587,2.554,1630,6.064,2144,3.664,2160,2.873,2331,6.399,2361,4.481,2476,4.509,2521,6.064,2912,4.148,2913,4.687,2917,6.064,2950,5.217,2951,3.485,3129,4.509,3154,4.509,3155,6.8,3156,6.8,3157,5.056,3158,6.8,3159,5.056,3160,6.064,3161,6.8,3162,5.056,3163,5.056,3164,4.509,3165,5.056,3166,5.056,3167,5.056,3168,5.056,3169,5.056,3170,5.056,3171,5.056,3172,5.056,3173,5.056,3174,5.056,3175,5.056,3176,5.056,3177,5.056,3178,5.056,3179,6.8,3180,5.056,3181,5.056,3182,5.056,3183,5.056,3184,5.056,3185,5.056,3186,5.056,3187,5.056,3188,5.056,3189,5.056]],["title/classes/RoleDto.html",[33,0.204,369,3.646]],["body/classes/RoleDto.html",[3,0.078,4,0.087,5,0.078,9,0.813,13,0.267,14,1.062,20,0.256,21,0.006,30,0.087,31,0.005,32,0.005,33,0.302,35,1.385,42,1.175,45,0.424,50,0.196,100,3.5,102,1.826,105,4.241,328,5.31,369,6.442,498,4.086,499,3.882,541,4.13,544,5.784,1092,3.561,2117,6.889,3190,6.287,3191,7.05,3192,7.05]],["title/guards/RolesGuard.html",[2587,3.646,3193,3.899]],["body/guards/RolesGuard.html",[3,0.071,4,0.079,5,0.071,13,0.243,17,0.864,20,0.289,21,0.006,28,3.306,30,0.079,31,0.005,32,0.005,33,0.275,45,0.477,48,1.22,50,0.21,95,1.367,112,2.413,143,1.802,146,1.435,147,1.106,149,1.609,233,1.717,271,2.461,339,1.923,375,2.675,486,1.662,491,1.807,498,2.675,1970,6.198,2186,8.019,2187,5.265,2188,7.722,2190,7.073,2192,4.058,2193,4.923,2198,5.723,2199,5.265,2200,5.723,3193,6.507,3194,6.417,3195,5.723,3196,6.417,3197,6.417,3198,6.417,3199,6.507,3200,6.417,3201,7.931,3202,5.723,3203,6.417,3204,6.417]],["title/classes/RootOfTrustPolicy.html",[33,0.204,71,2.617]],["body/classes/RootOfTrustPolicy.html",[3,0.059,4,0.066,5,0.059,9,0.62,13,0.204,14,0.895,19,0.549,20,0.333,21,0.006,30,0.113,31,0.004,32,0.004,33,0.398,34,2.958,35,1.055,36,3.397,37,4.501,38,3.901,39,5.044,40,5.383,41,3.425,42,1.18,44,3.893,45,0.426,48,1.664,50,0.185,51,1.62,52,4.091,53,5.765,54,2.147,55,2.517,56,2.368,57,2.831,58,1.282,59,4,60,4,61,4,62,3.703,63,2.512,64,3.397,65,2.864,66,4.785,67,4.501,68,3.703,69,5.802,70,4.303,71,3.899,72,3.703,73,3.703,74,2.958,75,3.54,76,2.395,77,3.271,78,2.958,79,2.958,80,5.008,81,2.642,82,1.648,83,3.703,84,2.958,85,3.703,3205,5.372,3206,5.372,3207,5.372,3208,5.372]],["title/classes/S3FileStorage.html",[33,0.204,3209,3.646]],["body/classes/S3FileStorage.html",[3,0.047,4,0.053,5,0.047,12,1.136,13,0.163,17,0.961,19,0.634,20,0.306,21,0.006,22,2.946,23,2.382,30,0.053,31,0.004,32,0.004,33,0.185,35,0.847,45,0.506,48,0.82,50,0.179,95,1.449,112,2.291,126,2.328,143,1.385,146,1.811,149,1.644,233,1.662,237,1.837,338,3.171,339,2.039,340,1.837,461,2.672,490,3.117,491,1.716,502,2.206,516,2.727,528,2.239,533,2.718,537,3.125,741,3.463,742,3.164,983,2.655,1092,3.078,1198,3.581,1284,2.375,1776,4.656,1778,6.301,1779,4.675,1780,5.121,1781,4.675,1783,4.999,1785,5.434,1787,4.675,1789,3.538,1790,5.121,1791,6.215,1792,5.797,1793,5.565,1795,5.121,1796,4.469,1797,3.538,1800,2.972,1803,3.846,1804,4.675,1870,3.538,2320,4.416,2424,3.846,2508,3.538,2526,5.434,3209,4.675,3210,3.846,3211,4.313,3212,6.848,3213,8.005,3214,7.066,3215,4.313,3216,5.121,3217,4.313,3218,4.313,3219,4.313,3220,4.313,3221,4.313,3222,6.094,3223,7.066,3224,7.066,3225,6.094,3226,4.675,3227,3.538,3228,3.846,3229,3.846,3230,4.313,3231,8.101,3232,8.409,3233,4.313,3234,6.094,3235,4.313,3236,4.313,3237,4.313,3238,4.313,3239,4.313,3240,4.313,3241,4.313,3242,4.313,3243,4.313,3244,4.313,3245,4.313,3246,4.313,3247,4.313,3248,4.313,3249,4.313,3250,4.313]],["title/classes/SchemaResponse.html",[33,0.204,1118,3.006]],["body/classes/SchemaResponse.html",[3,0.066,4,0.074,5,0.066,9,1.012,13,0.227,14,1.146,17,1.008,19,0.604,20,0.342,21,0.006,30,0.074,31,0.005,32,0.005,33,0.326,35,1.179,42,1.543,45,0.557,50,0.14,52,3.904,55,2.654,56,2.127,58,1.432,104,3.203,116,3.268,305,3.646,471,3.411,659,3.741,707,5.242,901,2.09,1077,5.148,1080,3.842,1118,4.81,1128,6.194,1251,5.835,1348,7.212,1729,5.352,3251,8.35,3252,6.002,3253,8.35,3254,8.35,3255,6.002,3256,6.002,3257,6.002,3258,6.002,3259,6.002,3260,6.002,3261,6.002,3262,6.002,3263,6.002,3264,6.002]],["title/entities/Session.html",[536,1.686,877,1.211]],["body/entities/Session.html",[3,0.029,4,0.033,5,0.029,9,0.308,12,2.356,13,0.101,14,0.763,16,1.648,17,1.031,19,0.599,20,0.337,21,0.006,26,2.417,27,2.031,30,0.065,31,0.003,32,0.003,33,0.115,42,1.53,45,0.552,48,1.827,50,0.178,82,2.256,88,1.847,100,1.773,102,0.693,105,2.149,106,1.427,110,2.182,122,2.932,125,2.428,126,1.988,127,3.546,128,4.34,138,1.736,153,3.794,154,2.273,271,2.031,276,1.203,316,2.039,329,1.401,336,4.184,382,2.936,395,2.932,400,1.726,427,0.85,446,1.988,480,3.225,481,2.893,482,2.987,485,2.343,510,3.264,536,3.149,540,1.942,598,1.14,599,2.343,601,3.133,607,2.544,612,2.69,630,3.546,643,3.349,650,4.373,672,1.942,681,3.349,689,4.723,815,1.316,859,5.599,860,3.349,870,2.141,873,4.063,877,1.678,879,1.251,883,2.675,884,2.75,885,3.862,886,3.112,888,3.546,889,1.989,890,4.973,892,4.565,896,1.473,897,2.516,898,1.773,900,1.813,901,2.101,905,3.112,907,2.418,908,2.418,909,1.092,910,1.773,911,1.092,912,3.434,932,2.273,954,3.439,959,2.209,1010,1.572,1030,2.052,1081,5.329,1092,1.351,1133,2.968,1163,4.651,1169,1.351,1183,4.373,1258,1.629,1264,2.803,1306,4.647,1382,1.939,1391,1.844,1394,1.572,1400,2.052,1401,1.939,1725,3.49,1978,3.838,1980,4.723,2095,3.65,2596,3.49,2637,5.404,2679,3.65,2706,3.794,2715,2.195,2740,4.723,2791,4.723,2796,4.723,3265,2.052,3266,3.349,3267,4.345,3268,5.296,3269,2.675,3270,2.675,3271,2.675,3272,4.254,3273,2.675,3274,2.675,3275,4.723,3276,2.675,3277,4.254,3278,2.675,3279,2.675,3280,2.675,3281,2.675,3282,2.675,3283,2.675,3284,2.675,3285,2.675,3286,5.296,3287,2.675,3288,2.675,3289,2.675,3290,2.675,3291,2.675,3292,4.951,3293,2.675,3294,2.675,3295,4.16,3296,2.675,3297,4.254,3298,2.675,3299,2.675,3300,4.254,3301,4.254,3302,2.675,3303,2.675,3304,4.254,3305,2.675,3306,3.794,3307,3.083,3308,3.794,3309,1.844,3310,2.675,3311,2.675,3312,2.675]],["title/controllers/SessionController.html",[139,1.433,3313,3.646]],["body/controllers/SessionController.html",[3,0.052,4,0.059,5,0.052,9,0.752,13,0.18,16,1.98,17,0.811,19,0.522,20,0.305,21,0.006,27,1.824,30,0.059,31,0.004,32,0.004,33,0.204,42,1.336,45,0.482,50,0.216,82,2.001,93,2.324,95,1.381,102,1.231,139,1.434,141,1.719,143,1.482,146,1.939,147,0.819,149,1.625,154,3.485,271,3.406,308,2.914,338,1.861,339,1.805,340,2.415,356,2.469,360,3.133,376,2.445,382,2.908,401,3.971,428,4.726,429,2.702,491,1.339,498,1.982,502,2.036,536,3.486,543,3.901,633,2.279,667,3.865,676,2.779,969,4.367,973,3.133,983,2.072,984,2.618,1180,3.386,1181,3.591,1187,4.877,1333,3.007,1334,3.007,1335,3.007,1344,3.277,1345,3.648,1373,4.374,1405,3.277,1447,2.895,2028,5.004,2303,3.901,2649,5.004,2943,5.004,3309,4.495,3313,5.004,3314,4.24,3315,7.444,3316,8.011,3317,6.522,3318,6.522,3319,4.755,3320,4.755,3321,4.755,3322,4.755,3323,4.755,3324,4.755,3325,4.755,3326,4.755,3327,5.805,3328,4.755,3329,4.755,3330,3.901,3331,3.648,3332,5.004,3333,4.755,3334,3.901,3335,4.755,3336,4.755,3337,4.755,3338,4.755,3339,4.24,3340,4.755,3341,4.755,3342,4.755,3343,4.755,3344,4.755]],["title/interfaces/SessionLogContext.html",[0,1.338,2717,3.132]],["body/interfaces/SessionLogContext.html",[0,1.664,2,2.832,3,0.065,4,0.073,5,0.065,9,0.681,13,0.224,14,0.952,16,1.578,17,0.982,19,0.633,20,0.341,21,0.006,23,1.856,26,3.437,27,3.348,30,0.073,31,0.005,32,0.005,45,0.355,154,4.024,240,3.737,264,5.52,276,1.984,316,4.322,400,1.946,536,3.364,537,5.457,599,4.965,606,4.818,1163,4.763,1174,4.024,1905,6.179,2192,5.242,2443,6.716,2717,4.962,2723,6.697,2724,7.686,2890,6.716,3015,5.269,3345,5.457,3346,5.269,3347,5.269,3348,5.909,3349,7.531,3350,7.531,3351,7.531]],["title/injectables/SessionLoggerInterceptor.html",[486,0.996,2154,3.006]],["body/injectables/SessionLoggerInterceptor.html",[3,0.04,4,0.045,5,0.04,9,0.815,12,2.364,13,0.137,14,0.677,17,0.695,20,0.288,21,0.006,23,0.89,28,2.233,30,0.045,31,0.003,32,0.003,33,0.155,45,0.425,50,0.191,88,1.41,95,1.218,112,1.357,126,2.77,143,1.217,146,1.58,147,0.622,149,1.434,154,3.776,189,2.932,190,1.189,202,2.283,203,2.378,233,1.981,237,1.538,240,4.469,264,4.774,267,4.247,270,1.988,271,1.384,272,4.777,274,2.488,276,1.217,279,3.219,307,1.413,308,1.413,314,1.988,329,2.104,338,3.514,339,1.549,376,2.304,385,2.769,483,2.233,486,1.122,487,1.357,491,1.99,502,2.682,505,1.609,526,1.823,536,2.983,560,2.961,638,3.529,676,3.369,844,2.915,971,2.634,1146,4.596,1147,4.208,1174,4.033,1175,5.731,1248,2.769,1257,2.616,1258,3.888,1274,3.882,1284,4.157,1658,2.961,1910,4.109,1970,4.871,2154,4.469,2187,2.961,2188,7.048,2192,5.001,2193,2.769,2199,2.961,2399,5.24,2404,3.692,2406,5.421,2569,2.769,2570,2.616,2653,2.961,2707,4.395,2708,2.961,2722,5.421,2723,5.791,2808,2.961,2951,2.488,3024,5.24,3028,5.421,3066,4.395,3084,4.777,3202,3.219,3307,2.616,3345,5.47,3352,3.219,3353,5.356,3354,5.121,3355,5.356,3356,5.356,3357,5.356,3358,5.356,3359,5.356,3360,7.067,3361,3.609,3362,5.356,3363,5.356,3364,5.356,3365,5.356,3366,7.549,3367,5.356,3368,5.356,3369,3.609,3370,5.356,3371,6.387,3372,5.356,3373,7.067,3374,5.356,3375,3.609,3376,3.609,3377,3.609,3378,4.395,3379,3.609,3380,3.609,3381,3.219,3382,3.609,3383,3.609,3384,3.609,3385,3.609,3386,3.609,3387,3.609,3388,3.609,3389,3.609,3390,3.609,3391,3.609,3392,3.609,3393,6.387,3394,3.609,3395,3.609,3396,7.067,3397,3.609,3398,3.609,3399,3.609,3400,3.609,3401,3.219,3402,3.609,3403,3.609,3404,3.609,3405,3.219,3406,3.219,3407,2.769,3408,3.219,3409,3.609,3410,3.609,3411,3.609,3412,3.609,3413,3.609,3414,3.609,3415,5.356,3416,3.609]],["title/injectables/SessionLoggerService.html",[486,0.996,2155,2.894]],["body/injectables/SessionLoggerService.html",[3,0.031,4,0.035,5,0.031,9,0.514,12,1.45,13,0.108,14,0.564,17,0.91,19,0.554,20,0.314,21,0.006,28,3.137,30,0.035,31,0.003,32,0.003,33,0.122,45,0.518,50,0.145,88,1.174,95,1.485,143,1.013,146,1.869,147,0.489,149,1.696,189,2.752,190,0.935,202,1.795,203,1.871,233,1.192,237,1.21,240,4.55,267,3.151,308,2.155,316,3.842,336,3.239,339,2.028,376,1.299,395,4.299,400,0.666,482,1.745,486,0.934,487,1.067,489,1.582,491,1.756,502,2.433,536,3.269,607,2.328,611,1.745,660,4.91,676,2.888,687,3.976,741,4.661,844,4.157,889,1.327,1146,2.715,1174,3.333,1175,5.647,1257,3.231,1258,4.744,1260,3.231,1264,1.871,1274,5.647,1306,4.127,1481,5.118,1910,4.786,1916,3.976,2155,3.798,2192,5.977,2375,5.653,2404,6.316,2557,3.231,2569,2.178,2570,2.057,2596,5.562,2708,3.658,2717,6.3,2724,6.174,2725,2.532,3024,4.517,3028,3.421,3066,3.658,3275,6.045,3307,2.057,3345,6.323,3354,3.231,3405,3.976,3406,7.939,3407,3.421,3408,3.976,3417,2.532,3418,6.238,3419,4.459,3420,4.459,3421,5.506,3422,5.506,3423,4.459,3424,5.506,3425,4.459,3426,5.506,3427,5.506,3428,5.506,3429,4.459,3430,6.238,3431,2.839,3432,4.459,3433,4.459,3434,9.734,3435,2.839,3436,2.839,3437,6.779,3438,2.839,3439,2.839,3440,2.839,3441,4.459,3442,2.839,3443,5.506,3444,2.839,3445,2.839,3446,4.459,3447,2.839,3448,2.839,3449,2.839,3450,2.839,3451,2.839,3452,2.839,3453,2.839,3454,4.459,3455,2.839,3456,2.839,3457,2.839,3458,8.202,3459,8.202,3460,2.839,3461,7.793,3462,2.839,3463,2.839,3464,2.839,3465,2.839,3466,2.839,3467,2.839,3468,2.839,3469,2.839,3470,2.839,3471,2.839,3472,4.459]],["title/modules/SessionModule.html",[158,1.538,178,2.894]],["body/modules/SessionModule.html",[3,0.067,4,0.075,5,0.067,9,0.698,21,0.006,30,0.075,31,0.005,32,0.005,33,0.259,50,0.22,95,1.043,141,2.766,147,1.043,158,2.713,160,2.699,161,3.058,162,3.235,163,3.235,164,2.978,165,4.234,166,4.234,178,5.934,182,4.087,183,3.235,184,3.235,187,3.491,271,2.934,382,3.41,410,6.112,421,3.558,422,2.419,423,6.821,424,3.99,425,4.173,428,4.388,429,3.441,430,4.968,465,5.399,466,4.968,467,2.471,536,2.148,548,4.173,667,5.087,1169,3.863,1535,5.272,3309,6.071,3313,6.432,3331,4.645,3334,4.968,3473,5.399,3474,6.055,3475,5.399,3476,5.399,3477,6.055,3478,6.055,3479,6.055,3480,6.055,3481,5.399]],["title/injectables/SessionPipe.html",[486,0.996,3332,3.646]],["body/injectables/SessionPipe.html",[3,0.069,4,0.077,5,0.069,12,1.653,13,0.238,16,1.639,17,0.852,19,0.556,20,0.285,21,0.006,30,0.077,31,0.005,32,0.005,33,0.269,45,0.47,50,0.199,95,1.348,112,2.36,139,1.892,143,1.778,146,1.403,147,1.082,149,1.587,233,1.359,264,5.39,339,2.067,340,2.359,375,2.616,461,2.486,475,5.597,486,1.639,487,2.36,490,2.859,491,1.767,505,3.488,533,2.106,536,3.321,667,4.86,676,2.674,794,4.597,877,1.599,3331,4.815,3332,6.002,3334,5.149,3482,5.597,3483,7.823,3484,6.276,3485,6.276,3486,7.823,3487,6.276,3488,8.523,3489,7.823,3490,6.276,3491,6.276]],["title/injectables/SessionService.html",[486,0.996,667,2.468]],["body/injectables/SessionService.html",[3,0.034,4,0.038,5,0.034,13,0.117,16,1.758,17,0.872,19,0.585,20,0.291,21,0.006,30,0.038,31,0.003,32,0.003,33,0.132,41,2.912,45,0.513,50,0.192,95,1.38,112,1.157,117,1.432,143,1.079,146,2.037,147,0.531,149,1.624,151,4.491,164,2.335,189,2.601,190,1.014,195,2.526,233,1.848,276,1.867,307,1.205,315,1.476,339,1.942,340,1.965,376,2.444,381,2.526,382,3.864,383,2.745,384,4.235,395,3.996,400,1.53,401,3.967,422,1.23,424,2.028,426,2.974,427,0.978,458,3.273,461,1.509,466,2.526,473,5.783,478,2.526,486,0.995,487,1.157,490,2.908,491,1.337,502,2.035,533,2.362,536,3.309,548,4.853,584,4.452,611,2.269,667,2.465,676,2.023,686,3.643,702,4.201,742,2.465,771,1.947,773,3.003,791,3.643,804,2.362,860,3.003,870,2.057,883,1.555,884,1.598,889,1.439,971,3.205,983,2.069,1171,3.273,1180,3.383,1192,3.273,1201,1.598,1264,3.129,1407,2.79,1454,3.129,1935,5.128,1984,3.003,2302,3.896,2375,2.122,2589,2.362,2943,3.643,2964,2.362,2965,2.526,3266,3.003,3292,5.776,3295,3.996,3307,2.231,3309,5.662,3331,2.362,3481,6.278,3492,2.745,3493,5.346,3494,4.749,3495,6.516,3496,3.078,3497,7.753,3498,5.797,3499,5.346,3500,3.078,3501,4.749,3502,4.749,3503,6.516,3504,3.078,3505,4.749,3506,6.516,3507,3.078,3508,4.749,3509,3.078,3510,4.749,3511,3.078,3512,3.078,3513,4.749,3514,6.516,3515,3.078,3516,4.749,3517,3.078,3518,4.749,3519,5.811,3520,4.749,3521,4.749,3522,4.235,3523,4.235,3524,4.235,3525,4.235,3526,3.078,3527,4.749,3528,3.078,3529,4.749,3530,3.078,3531,4.749,3532,4.749,3533,2.526,3534,3.078,3535,2.362,3536,4.749,3537,3.078,3538,3.078,3539,3.078,3540,3.078,3541,3.078,3542,4.749,3543,4.749,3544,3.078,3545,4.749,3546,3.078,3547,3.078,3548,4.749,3549,3.078,3550,3.078,3551,3.078,3552,3.078,3553,3.078,3554,4.749,3555,4.749,3556,3.078,3557,4.749,3558,4.749,3559,5.797,3560,4.749,3561,3.078,3562,4.756,3563,4.749,3564,3.078,3565,3.078,3566,5.797,3567,4.749,3568,3.078,3569,3.078,3570,3.078,3571,3.078,3572,3.078,3573,3.078,3574,4.749,3575,3.078,3576,3.078,3577,3.078]],["title/controllers/StatusListController.html",[139,1.433,3578,3.646]],["body/controllers/StatusListController.html",[3,0.071,4,0.08,5,0.071,13,0.246,17,0.707,19,0.564,20,0.315,21,0.006,30,0.08,31,0.005,32,0.005,33,0.278,42,1.082,45,0.39,48,1.234,50,0.202,95,1.118,96,3.192,102,1.681,139,1.957,141,2.347,143,1.815,146,1.786,147,1.118,148,4.104,149,1.317,276,1.815,339,1.574,360,4.276,373,4.276,375,2.705,376,1.891,382,3.857,429,4.539,633,3.111,1295,4.623,1373,5.084,1405,4.473,1447,5.267,3578,6.127,3579,5.263,3580,5.787,3581,6.49,3582,7.122,3583,5.787,3584,6.49,3585,6.49,3586,7.987,3587,6.49,3588,6.49,3589,6.49,3590,6.49,3591,5.787,3592,6.49,3593,6.49]],["title/entities/StatusListEntity.html",[877,1.211,3594,3.444]],["body/entities/StatusListEntity.html",[3,0.056,4,0.062,5,0.056,9,0.583,13,0.192,14,0.86,16,1.425,17,0.74,19,0.536,20,0.321,21,0.006,30,0.062,31,0.004,32,0.004,33,0.217,42,1.472,45,0.531,48,1.679,50,0.179,70,3.344,106,2.281,276,1.746,305,3.259,306,4.14,308,2.661,382,4.324,400,2.181,427,1.607,446,2.707,467,3.603,485,3.744,506,4.687,815,4.217,877,2.093,879,2.364,890,4.3,892,3.259,894,2.963,896,2.784,897,3.425,898,2.835,900,2.897,901,2.367,909,2.063,910,2.835,911,2.063,912,2.897,953,2.702,954,3.179,1012,6.064,1081,4.927,1225,5.91,1295,5.131,1394,2.971,1398,3.879,3407,6.578,3579,5.945,3594,4.927,3595,7.403,3596,4.509,3597,7.646,3598,7.683,3599,5.056,3600,5.056,3601,5.056,3602,5.056,3603,5.056,3604,6.064,3605,5.056,3606,5.056]],["title/modules/StatusListModule.html",[158,1.538,410,3.132]],["body/modules/StatusListModule.html",[3,0.069,4,0.078,5,0.069,21,0.006,30,0.078,31,0.005,32,0.005,33,0.27,50,0.222,141,2.839,147,1.088,158,2.764,160,2.814,161,3.187,162,3.372,163,3.372,164,3.104,165,4.315,166,4.315,171,5.327,182,4.194,183,3.372,184,3.372,187,3.583,209,4.158,382,3.499,410,6.383,421,3.708,422,2.522,429,3.587,1373,5.789,1405,4.35,3578,6.555,3579,4.158,3594,5.688,3607,5.628,3608,5.628,3609,5.628,3610,6.311,3611,6.311,3612,7,3613,5.628,3614,4.573,3615,5.628,3616,6.311,3617,6.311]],["title/injectables/StatusListService.html",[486,0.996,1373,2.793]],["body/injectables/StatusListService.html",[3,0.031,4,0.034,5,0.09,9,0.508,13,0.206,16,1.497,17,0.844,19,0.588,20,0.282,21,0.006,30,0.034,31,0.003,32,0.003,33,0.12,45,0.466,50,0.197,65,1.01,76,1.245,88,1.434,93,2.49,95,1.335,96,2.165,143,1,146,1.783,147,0.481,149,1.105,189,2.397,190,0.92,205,3.445,206,1.339,233,1.937,238,1.116,264,2.783,276,2.1,305,2.11,339,1.879,340,1.327,376,1.959,382,4.255,397,4.858,400,1.819,401,2.68,405,1.641,422,1.116,426,3.413,427,0.888,429,4.532,461,2.534,467,2.915,486,0.922,487,1.05,489,1.562,490,2.949,491,1.239,502,2.335,505,1.962,533,2.793,536,2.829,540,2.009,566,3.589,580,1.587,583,3.377,584,4.253,587,2.024,607,1.762,664,1.492,727,1.641,728,3.497,742,1.45,751,2.68,758,1.538,771,1.766,773,3.909,794,2.586,815,3.514,828,1.45,907,1.587,971,3.678,983,1.918,1011,3.19,1092,1.411,1133,1.374,1155,3.611,1171,3.034,1172,1.641,1192,3.034,1198,2.586,1200,4.48,1201,1.45,1222,2.68,1225,3.755,1239,2.143,1295,5.056,1373,2.586,1382,4.874,1394,2.586,1397,2.491,1398,2.143,1447,2.68,1449,5.945,1454,3.589,1462,2.024,1463,2.143,1465,3.034,1555,2.143,1559,3.377,1573,2.783,1577,3.19,1582,2.024,1738,3.611,1751,3.925,1804,3.377,1984,1.766,2261,3.611,2303,2.291,2375,1.925,2406,3.377,2763,2.491,2766,2.291,2773,2.291,2943,4.743,2964,3.377,3044,6.372,3327,4.48,3407,5.945,3579,5.254,3582,3.925,3583,3.925,3594,4.48,3597,2.491,3604,4.858,3612,3.925,3613,2.491,3614,2.024,3615,2.491,3618,2.491,3619,5.447,3620,4.402,3621,4.402,3622,4.402,3623,5.447,3624,5.447,3625,2.793,3626,2.793,3627,2.793,3628,4.402,3629,4.402,3630,2.793,3631,2.793,3632,2.793,3633,2.793,3634,4.402,3635,6.182,3636,4.402,3637,4.402,3638,4.402,3639,2.793,3640,4.402,3641,2.793,3642,4.402,3643,2.793,3644,4.402,3645,2.793,3646,2.793,3647,2.793,3648,2.793,3649,2.793,3650,2.793,3651,2.793,3652,2.793,3653,2.793,3654,2.793,3655,2.793,3656,2.793,3657,2.793,3658,4.402,3659,2.793,3660,2.793,3661,2.793,3662,2.793,3663,6.182,3664,4.402,3665,4.402,3666,2.793,3667,4.402,3668,4.402,3669,2.793,3670,2.793,3671,2.793,3672,4.402,3673,6.726,3674,2.793,3675,2.793,3676,2.793,3677,2.793,3678,2.793,3679,2.793,3680,2.793,3681,4.402,3682,4.402,3683,2.793,3684,2.793,3685,2.793]],["title/entities/StatusMapping.html",[877,1.211,3614,3.444]],["body/entities/StatusMapping.html",[3,0.061,4,0.069,5,0.061,13,0.323,14,0.917,19,0.611,20,0.35,21,0.006,30,0.069,31,0.005,32,0.005,33,0.239,42,1.513,45,0.546,48,1.841,50,0.169,264,5.099,276,1.832,400,2.078,427,1.771,446,2.813,467,2.959,877,1.848,879,2.606,894,4.164,896,3.069,897,3.56,898,3.023,900,3.09,901,2.525,909,3.703,910,3.023,911,2.274,1295,4.308,1382,5.842,3579,6.09,3595,7.582,3614,5.256,3686,4.97,3687,8.853,3688,9.37,3689,5.573,3690,7.253,3691,5.573,3692,5.573,3693,5.573,3694,5.573,3695,5.573]],["title/classes/StatusUpdateDto.html",[33,0.204,3327,3.444]],["body/classes/StatusUpdateDto.html",[3,0.067,4,0.075,5,0.067,13,0.232,14,0.974,16,1.853,17,0.963,18,7.884,19,0.577,20,0.307,21,0.006,30,0.075,31,0.005,32,0.005,33,0.33,35,1.202,42,1.405,45,0.507,50,0.143,54,2.445,55,2.447,56,2.252,58,1.46,82,2.362,88,2.027,129,3.889,264,5.328,271,2.953,382,4.062,467,3.142,536,3.137,607,2.861,851,4.114,922,4.114,1222,4.688,1382,6.105,1984,5.591,2323,5.457,3327,5.58,3330,7.254,3579,5.826,3696,5.021,3697,6.12,3698,6.12,3699,6.12,3700,6.12,3701,6.12]],["title/controllers/StorageController.html",[139,1.433,3702,3.646]],["body/controllers/StorageController.html",[3,0.059,4,0.067,5,0.099,9,0.819,13,0.204,17,0.773,19,0.518,20,0.319,21,0.006,23,1.751,30,0.067,31,0.004,32,0.004,33,0.231,42,1.184,45,0.427,48,1.026,50,0.217,95,1.224,102,1.398,139,2.393,141,1.952,143,1.614,146,1.775,147,0.93,149,1.441,192,4.429,193,3.068,271,3.045,283,6.09,308,2.78,339,1.722,356,3.688,357,5.147,375,2.25,376,2.457,400,1.667,461,1.716,483,2.25,489,1.915,491,1.52,498,2.25,633,2.587,969,4.148,984,2.972,1029,6.334,1228,5.02,1295,3.795,1333,3.413,1334,3.413,1335,3.413,1337,3.72,1795,3.911,1811,5.449,1816,5.557,1833,7.079,1839,7.814,2648,4.429,3401,4.813,3702,5.449,3703,4.813,3704,7.102,3705,5.398,3706,5.398,3707,5.398,3708,5.398,3709,5.398,3710,5.398,3711,7.102,3712,5.398,3713,5.398,3714,7.102,3715,5.398,3716,7.102,3717,5.398,3718,5.398,3719,5.398,3720,5.398,3721,4.813,3722,5.398,3723,5.398,3724,5.398,3725,5.398,3726,5.398,3727,5.398,3728,5.398,3729,5.398,3730,5.398,3731,5.398,3732,5.398,3733,5.398]],["title/modules/StorageModule.html",[158,1.538,179,3.444]],["body/modules/StorageModule.html",[3,0.063,4,0.071,5,0.063,20,0.21,21,0.006,30,0.071,31,0.005,32,0.005,33,0.247,45,0.346,50,0.224,82,1.767,141,2.083,143,1.309,146,1.288,147,0.993,149,1.662,158,2.65,160,2.568,165,2.909,166,2.909,179,5.935,187,2.629,189,2.748,190,1.898,198,5.369,231,3.274,232,4.174,233,1.247,312,5.684,314,3.172,421,3.385,422,2.302,451,4.726,453,4.726,461,2.603,1771,4.174,1776,4.882,1808,5.684,1809,5.369,1816,5.397,1845,5.137,2328,7.304,2330,7.304,2492,5.684,2508,4.726,3209,5.684,3212,6.607,3216,5.935,3226,4.419,3227,4.726,3702,5.684,3721,5.137,3734,4.726,3735,5.76,3736,5.76,3737,5.76,3738,5.76,3739,6.284,3740,5.76,3741,5.76,3742,5.137,3743,5.76,3744,5.76,3745,5.76,3746,8.191,3747,5.137,3748,5.76,3749,5.137,3750,5.76,3751,5.137,3752,5.76,3753,5.76,3754,5.76]],["title/controllers/TenantController.html",[139,1.433,416,3.646]],["body/controllers/TenantController.html",[3,0.058,4,0.065,5,0.058,9,0.907,13,0.201,16,2.036,17,0.856,19,0.584,20,0.286,21,0.006,30,0.065,31,0.004,32,0.004,33,0.227,42,1.396,45,0.503,50,0.203,95,1.355,139,2.371,141,1.916,143,1.594,146,2.041,147,0.913,149,1.699,338,2.074,339,1.907,356,4.084,375,2.208,376,2.439,400,2.29,414,4.788,416,5.382,468,4.436,483,3.279,498,2.208,499,2.917,633,2.539,676,2.257,973,3.491,976,4.724,983,3.427,984,2.917,985,4.724,986,3.35,1064,5.771,1180,3.642,1344,3.651,1447,4.271,1573,4.436,3339,4.724,3755,4.724,3756,6.256,3757,6.256,3758,8.373,3759,7.015,3760,5.298,3761,5.298,3762,4.347,3763,5.298,3764,5.298,3765,5.298,3766,5.298,3767,4.347,3768,5.298,3769,5.298,3770,5.298,3771,5.298,3772,5.298,3773,5.298,3774,5.298,3775,5.298,3776,5.298,3777,5.298]],["title/entities/TenantEntity.html",[446,1.566,877,1.211]],["body/entities/TenantEntity.html",[3,0.061,4,0.068,5,0.061,9,1.044,13,0.209,14,0.911,16,1.682,17,0.785,19,0.59,20,0.329,21,0.006,26,3.289,27,2.764,30,0.089,31,0.005,32,0.005,33,0.309,42,1.471,45,0.531,48,1.618,50,0.187,55,2.29,56,2.167,58,1.317,95,1.521,150,5.222,315,3.455,382,3.935,400,2.27,427,1.754,442,5.38,443,4.922,446,2.374,493,5.816,870,1.958,877,1.836,879,2.581,890,3.49,892,3.847,909,3.274,912,2.352,1010,4.235,1011,5.222,1013,4.922,1015,4.922,1030,5.529,1163,4.558,2064,5.913,3295,3.804,3778,4.528,3779,5.519,3780,7.207,3781,5.519,3782,5.519,3783,5.519,3784,5.519,3785,5.519,3786,6.584,3787,5.519,3788,7.207]],["title/injectables/TenantService.html",[414,2.894,486,0.996]],["body/injectables/TenantService.html",[0,1.47,3,0.038,4,0.043,5,0.038,9,0.722,13,0.132,16,1.936,17,0.81,19,0.543,20,0.271,21,0.006,30,0.064,31,0.003,32,0.003,33,0.149,45,0.501,48,0.663,50,0.217,95,1.346,112,1.312,123,3.302,143,1.187,146,1.938,147,0.601,149,1.059,150,2.528,151,3.599,189,2.716,190,1.149,231,1.983,233,1.69,276,1.422,307,2.044,315,1.672,339,1.804,340,1.574,376,2.024,382,2.328,400,2.227,414,3.179,422,1.394,424,2.299,425,2.404,426,3.171,428,2.528,429,1.983,439,2.124,440,4.083,441,2.676,446,2.289,461,1.66,468,4.705,483,2.177,486,1.094,487,1.312,489,1.238,490,3.077,491,1.47,493,4.124,498,1.454,499,1.921,502,2.707,503,2.862,514,1.921,526,1.762,533,3.052,541,1.716,546,2.862,685,3.784,728,3.785,758,1.921,877,1.33,879,1.631,971,2.568,983,2.727,986,2.206,1064,4.789,1070,2.862,1163,2.206,1180,2.711,1201,1.811,1203,2.528,1205,2.404,1209,2.528,1210,2.528,1215,3.784,1216,3.784,1217,2.528,1218,2.528,1219,2.528,1220,2.528,1227,4.314,1228,2.206,1258,3.179,1277,2.676,1295,2.79,1373,4.757,1405,2.404,1522,5.12,1573,2.206,1588,2.404,1816,5.334,1825,2.862,1935,5.382,1944,5.659,2105,5.12,2106,2.528,2380,2.676,2589,2.676,2701,5.12,2714,2.862,2716,2.862,3087,2.862,3295,3.599,3354,2.528,3493,5.701,3499,5.701,3533,2.862,3535,2.676,3562,4.284,3756,4.657,3757,4.657,3762,4.284,3767,2.862,3789,2.862,3790,5.222,3791,5.222,3792,3.488,3793,5.581,3794,5.581,3795,3.488,3796,4.657,3797,3.488,3798,4.657,3799,3.488,3800,3.488,3801,3.488,3802,3.488,3803,3.488,3804,4.657,3805,3.488,3806,4.006,3807,4.657,3808,4.657,3809,4.657,3810,4.657,3811,3.111,3812,3.111,3813,3.111,3814,3.111,3815,4.657,3816,3.111,3817,3.111,3818,3.111,3819,3.111,3820,3.111,3821,3.111,3822,3.111,3823,3.111,3824,3.111,3825,3.111,3826,3.111,3827,3.111,3828,3.111,3829,3.111,3830,3.111,3831,3.111,3832,3.111,3833,3.111,3834,3.111]],["title/interfaces/Tenants.html",[0,1.338,468,3.006]],["body/interfaces/Tenants.html",[0,1.67,2,1.99,3,0.046,4,0.051,5,0.046,9,0.479,13,0.157,14,0.75,16,1.965,19,0.57,20,0.216,21,0.006,30,0.073,31,0.004,32,0.004,33,0.178,48,0.789,50,0.222,95,0.715,112,1.561,123,2.625,146,1.547,147,0.715,149,1.203,150,3.008,151,2.861,189,2.321,190,1.367,231,2.359,233,1.797,276,1.348,307,1.625,315,1.99,340,1.252,376,2.199,382,2.644,400,2.184,414,2.527,422,1.658,424,2.735,425,2.861,426,2.707,428,3.008,429,2.359,439,2.527,440,3.485,441,3.184,446,1.954,461,1.319,468,4.773,483,1.73,486,1.243,489,1.473,490,2.679,491,1.169,493,3.908,498,1.73,499,2.286,502,2.818,503,3.405,514,2.286,526,3.812,533,3.145,541,2.041,546,3.405,685,3.008,728,3.235,758,2.286,877,1.057,879,1.941,971,2.041,983,2.584,986,2.625,1064,4.087,1070,3.405,1163,2.625,1180,2.155,1201,2.155,1203,3.008,1205,2.861,1209,3.008,1210,3.008,1215,4.297,1216,4.297,1217,3.008,1218,3.008,1219,3.008,1220,3.008,1227,4.769,1228,2.625,1258,2.527,1277,3.184,1295,2.218,1373,4.066,1405,2.861,1522,4.376,1573,2.625,1588,2.861,1816,4.559,1825,3.405,1935,4.769,1944,5.014,2105,4.376,2106,3.008,2380,3.184,2589,3.184,2701,4.376,2714,3.405,2716,3.405,3087,3.405,3295,4.087,3354,3.008,3493,3.405,3499,4.865,3533,3.405,3535,3.184,3562,4.865,3762,3.405,3767,3.405,3789,3.405,3793,3.701,3794,3.701,3796,3.701,3798,3.701,3804,3.701,3806,3.184,3807,3.701,3808,3.701,3809,3.701,3810,3.701,3811,3.701,3812,3.701,3813,3.701,3814,3.701,3815,5.288,3816,3.701,3817,3.701,3818,3.701,3819,3.701,3820,3.701,3821,3.701,3822,3.701,3823,3.701,3824,3.701,3825,3.701,3826,3.701,3827,3.701,3828,3.701,3829,3.701,3830,3.701,3831,3.701,3832,3.701,3833,3.701,3834,3.701]],["title/interfaces/TokenPayload.html",[0,1.338,969,2.337]],["body/interfaces/TokenPayload.html",[0,2.183,2,2.965,3,0.068,4,0.076,5,0.068,9,0.713,11,3.516,12,2.041,13,0.234,14,0.98,16,1.296,17,0.844,19,0.403,20,0.282,21,0.006,30,0.104,31,0.005,32,0.005,38,2.758,41,3.034,50,0.197,147,1.066,149,1.255,233,1.678,271,3.404,308,3.578,400,1.987,446,2.924,447,4.746,483,2.579,498,3.888,499,3.406,500,3.912,540,2.823,541,4.365,548,4.264,742,3.212,877,2.376,901,2.154,969,4.365,1968,4.746,1969,6.36,1970,5.343,1971,5.075,1972,5.075,1973,5.075,1974,5.075]],["title/classes/TokenResponse.html",[33,0.204,330,3.444]],["body/classes/TokenResponse.html",[3,0.077,4,0.086,5,0.077,13,0.265,14,1.058,17,0.911,19,0.604,20,0.325,21,0.006,30,0.086,31,0.005,32,0.005,33,0.3,35,1.376,45,0.557,330,6.063,385,6.862,387,7.339,388,5.749,389,6.482,467,3.414,471,3.982,560,7.339,1032,6.248,2346,6.248,2607,5.749,3835,8.444,3836,7.007]],["title/classes/TrustedAuthorityQuery.html",[33,0.204,937,2.894]],["body/classes/TrustedAuthorityQuery.html",[3,0.043,4,0.048,5,0.043,7,1.725,9,0.65,12,2.258,13,0.147,14,0.713,16,1.531,17,0.421,19,0.609,20,0.342,21,0.006,25,2.253,26,1.766,27,1.484,28,2.35,30,0.103,31,0.004,32,0.004,33,0.375,35,0.76,41,2.86,42,0.94,45,0.339,48,1.748,50,0.195,51,1.167,52,4.089,54,1.546,55,2.894,56,2.264,57,2.708,58,0.923,59,1.955,60,3.359,61,3.359,70,3.82,76,2.513,82,1.187,88,1.485,100,2.35,102,1.002,104,2.162,106,1.298,110,2.039,116,1.515,125,2.452,126,1.275,206,1.855,238,2.92,252,2.131,276,0.879,307,1.515,329,1.275,400,1.561,427,1.23,446,2.191,467,1.579,480,4.332,481,1.855,482,2.603,483,1.613,485,2.131,564,2.274,598,1.649,607,1.824,630,2.274,659,1.903,663,4.449,672,1.766,832,2.199,838,2.199,851,2.068,870,1.373,877,1.694,883,1.955,884,2.009,885,3.105,886,3.313,888,3.313,889,1.809,892,3.503,894,2.457,897,2.35,898,1.613,900,1.649,901,1.347,905,3.313,907,2.199,908,2.199,909,1.579,910,2.35,911,1.579,912,2.834,913,4.206,914,2.274,919,2.848,920,3.662,921,3.715,922,3.013,923,3.78,924,2.55,925,4.382,926,2.447,927,4.049,928,2.55,929,4.815,930,4.815,931,4.621,932,4.15,933,4.153,934,4.382,935,2.55,936,2.55,937,4.449,938,2.55,939,3.715,940,3.715,941,2.55,942,2.356,943,2.55,944,2.55,945,3.715,946,4.449,947,2.55,948,2.068,949,2.55,950,2.927,951,2.55,952,2.447,953,2.068,954,3.417,955,2.356,956,2.274,957,2.199,958,2.356,959,2.009,960,2.55,3837,3.87,3838,3.87,3839,3.87,3840,3.87]],["title/classes/UpdateKeyDto.html",[33,0.204,2298,3.646]],["body/classes/UpdateKeyDto.html",[3,0.08,4,0.09,5,0.08,21,0.006,23,1.801,30,0.09,31,0.005,32,0.005,33,0.313,35,1.435,38,3.823,50,0.2,102,1.892,233,1.856,1062,4.62,1501,5.651,1569,4.62,1593,5.604,2273,5.035,2298,6.579,3696,5.993,3841,8.576]],["title/classes/VCT.html",[33,0.204,1079,2.894]],["body/classes/VCT.html",[3,0.064,4,0.072,5,0.064,9,0.951,13,0.222,14,0.946,17,1.071,19,0.641,20,0.34,21,0.006,30,0.072,31,0.005,32,0.005,33,0.321,35,1.149,38,3.678,42,1.558,45,0.562,50,0.174,55,2.97,56,2.381,58,1.395,95,1.422,100,3.119,102,1.515,116,2.289,237,2.492,707,6.336,1079,5.472,1348,7.26,3842,5.215,3843,8.25,3844,8.25,3845,8.25,3846,5.849,3847,5.849,3848,5.849,3849,5.849,3850,5.849,3851,5.849,3852,5.849,3853,5.849,3854,5.849,3855,7.482]],["title/modules/VerifierModule.html",[158,1.538,180,3.444]],["body/modules/VerifierModule.html",[3,0.07,4,0.078,5,0.07,21,0.006,30,0.078,31,0.005,32,0.005,33,0.271,50,0.222,147,1.09,158,2.767,160,2.819,161,3.193,162,3.378,163,3.378,164,3.11,165,3.193,166,3.193,171,5.329,177,5.93,178,5.709,180,7.193,182,4.199,183,3.378,184,3.378,187,3.587,209,4.166,215,4.851,216,4.582,2153,6.179,2159,5.417,2160,3.593,2695,6.179,2696,5.638,2897,5.638,3856,6.323,3857,6.323,3858,6.323]],["title/classes/WebHookAuthConfig.html",[33,0.204,113,3.132]],["body/classes/WebHookAuthConfig.html",[3,0.056,4,0.062,5,0.056,13,0.191,14,0.859,17,0.55,19,0.501,20,0.351,21,0.006,23,2.024,30,0.109,31,0.004,32,0.004,33,0.386,35,0.992,42,0.842,45,0.304,48,0.96,50,0.179,51,1.522,54,2.017,56,2.249,57,2.198,58,1.204,65,2.456,86,5.059,87,3.326,88,2.257,89,5.66,90,4.288,91,4.855,92,3.658,93,2.564,95,1.323,96,3.341,97,3.527,99,2.869,100,2.832,101,2.966,102,1.307,103,2.78,104,2.606,105,3.431,106,2.875,107,4.674,108,3.48,109,4.296,110,3.099,111,5.411,112,2.554,113,5.647,114,3.658,115,4.923,116,1.976,117,1.522,118,5.059,119,3.658,120,4.923,121,4.923,122,3.48,123,3.193,124,3.658,125,1.861,126,2.238,127,2.966,128,3.326,129,2.55,130,2.966,131,3.992,132,3.658,133,3.658,134,2.966,135,2.698,136,2.966,137,2.966,138,2.06,3859,5.048]],["title/classes/WebHookAuthConfigHeader.html",[33,0.204,111,3.132]],["body/classes/WebHookAuthConfigHeader.html",[3,0.053,4,0.06,5,0.053,9,0.56,13,0.184,14,0.837,17,0.529,19,0.491,20,0.354,21,0.006,23,2.085,30,0.108,31,0.004,32,0.004,33,0.383,35,0.954,42,1.103,45,0.398,48,0.923,50,0.175,51,1.464,54,1.94,56,2.223,57,2.141,58,1.158,65,2.393,86,5.325,87,3.199,88,2.351,89,5.828,90,4.399,91,4.759,92,3.519,93,2.523,95,1.297,96,3.254,97,3.435,99,2.76,100,2.758,101,2.853,102,1.257,103,2.674,104,2.538,105,3.342,106,2.927,107,4.028,108,3.347,109,4.759,110,3.229,111,5.572,112,2.83,113,5.572,114,3.519,115,5.454,116,2.59,117,2.269,118,4.959,119,3.519,120,4.794,121,3.519,122,3.347,123,3.071,124,3.519,125,1.79,126,2.18,127,2.853,128,3.199,129,2.452,130,2.853,131,3.888,132,3.519,133,3.519,134,2.853,135,2.595,136,2.853,137,2.853,138,1.981,3860,4.856,3861,4.856,3862,4.33,3863,4.856]],["title/classes/WebHookAuthConfigNone.html",[33,0.204,118,3.132]],["body/classes/WebHookAuthConfigNone.html",[3,0.055,4,0.062,5,0.055,13,0.19,14,0.854,17,0.545,19,0.498,20,0.352,21,0.006,23,2.017,30,0.109,31,0.004,32,0.004,33,0.386,35,0.983,42,0.834,45,0.301,48,0.951,50,0.178,51,1.509,54,1.999,56,2.243,57,2.185,58,1.194,65,2.442,86,5.036,87,3.297,88,2.25,89,5.64,90,4.336,91,4.834,92,3.626,93,2.555,95,1.317,96,3.321,97,3.506,99,2.844,100,2.815,101,2.941,102,1.296,103,2.756,104,2.59,105,3.411,106,2.954,107,4.111,108,3.449,109,4.271,110,3.184,111,5.392,112,2.874,113,5.63,114,3.626,115,4.894,116,1.959,117,1.509,118,5.392,119,3.626,120,5.539,121,3.626,122,3.449,123,3.165,124,3.626,125,1.845,126,2.225,127,2.941,128,3.297,129,2.527,130,2.941,131,3.968,132,3.626,133,3.626,134,2.941,135,2.674,136,2.941,137,2.941,138,2.042,3862,4.463,3864,5.004]],["title/classes/WebhookConfig.html",[33,0.204,125,1.752]],["body/classes/WebhookConfig.html",[3,0.053,4,0.059,5,0.053,9,0.553,13,0.182,14,0.83,17,0.875,19,0.524,20,0.347,21,0.006,23,1.982,30,0.107,31,0.004,32,0.004,33,0.381,35,0.942,42,1.094,45,0.394,48,1.247,50,0.174,51,1.446,54,1.916,56,2.267,57,2.122,58,1.144,65,2.372,86,4.927,87,3.159,88,2.343,89,5.541,90,4.347,91,5.084,92,3.474,93,2.51,95,1.289,96,3.226,97,3.406,99,2.725,100,2.734,101,2.817,102,1.242,103,2.64,104,2.516,105,3.313,106,2.986,107,3.993,108,3.305,109,4.148,110,3.218,111,5.547,112,2.466,113,5.297,114,3.474,115,4.753,116,1.877,117,1.446,118,5.297,119,3.474,120,4.753,121,3.474,122,4.521,123,4.148,124,3.474,125,2.418,126,2.773,127,3.854,128,4.322,129,3.313,130,2.817,131,3.854,132,3.474,133,3.474,134,3.854,135,2.562,136,2.817,137,3.854,138,3.051,1091,3.934,1092,2.422,3865,4.795,3866,4.795,3867,4.795]],["title/classes/WebhookResponse.html",[33,0.204,3868,3.646]],["body/classes/WebhookResponse.html",[3,0.045,4,0.051,5,0.045,9,0.476,17,0.449,19,0.385,21,0.006,23,1.456,30,0.073,31,0.004,32,0.004,33,0.253,35,0.81,45,0.248,48,0.784,50,0.199,65,2.135,82,2.542,91,2.609,97,3.066,109,3.734,110,3.429,129,2.084,147,0.711,149,1.399,233,1.493,238,2.359,270,4.145,329,2.73,376,2.626,461,1.877,482,2.311,483,1.72,486,1.237,489,1.464,490,2.314,491,1.662,502,2.153,505,2.632,533,2.314,536,3.198,611,2.311,664,2.205,667,3.908,668,2.719,771,3.734,844,2.695,959,3.066,1080,3.802,1172,4.423,1174,2.205,1306,5.313,1733,2.719,1840,2.99,2155,3.595,2156,3.734,2160,2.345,2164,2.99,2192,2.609,2249,6.005,2331,5.455,2651,3.891,2717,4.544,2722,6.816,2739,4.845,2775,5.658,2776,4.845,2950,5.29,2951,2.844,2993,4.845,3266,2.609,3267,4.845,3347,3.679,3806,4.53,3868,5.775,3869,3.385,3870,4.126,3871,5.266,3872,6.149,3873,3.679,3874,3.679,3875,3.679,3876,3.679,3877,3.679,3878,3.679,3879,3.679,3880,7.39,3881,6.713,3882,6.713,3883,5.266,3884,3.679,3885,5.266,3886,5.266,3887,5.266,3888,5.266,3889,7.609,3890,5.266,3891,5.266,3892,5.266,3893,5.266,3894,5.266,3895,5.266,3896,5.266,3897,5.266,3898,3.679,3899,3.679,3900,3.679,3901,3.679,3902,3.679,3903,3.679,3904,5.266,3905,3.679]],["title/injectables/WebhookService.html",[486,0.996,2156,3.006]],["body/injectables/WebhookService.html",[3,0.041,4,0.046,5,0.041,9,0.633,13,0.141,17,0.833,19,0.243,20,0.237,21,0.006,23,0.92,30,0.068,31,0.003,32,0.003,33,0.235,45,0.392,48,1.044,50,0.193,65,1.985,82,2.605,91,3.471,93,1.165,95,1.122,97,2.85,109,3.471,110,3.416,129,2.772,143,1.247,146,1.227,147,0.643,149,1.457,233,1.41,238,2.193,270,3.954,329,2.726,339,1.579,376,2.566,461,1.745,482,2.148,483,2.288,486,1.15,487,1.403,489,1.947,490,2.567,491,2.022,502,2.033,505,2.447,533,2.185,536,3.333,611,2.148,664,1.994,667,4.408,668,2.458,741,2.12,771,3.471,844,2.505,870,1.324,959,1.937,1080,3.289,1172,4.22,1174,1.994,1306,5.558,1733,3.617,1840,3.978,2155,4.372,2156,4.541,2160,2.12,2164,2.704,2192,2.36,2249,5.8,2331,5.996,2651,4.732,2717,5.452,2722,7.004,2739,4.504,2775,5.343,2776,4.504,2912,3.061,2950,4.996,2951,2.572,2993,4.504,3266,3.471,3267,4.504,3806,5.509,3868,4.996,3869,3.061,3871,4.895,3872,6.824,3873,4.895,3874,5.807,3875,3.327,3876,3.327,3877,3.327,3878,3.327,3879,3.327,3880,7.137,3881,6.404,3882,6.404,3883,4.895,3884,3.327,3885,4.895,3886,4.895,3887,4.895,3888,4.895,3889,7.378,3890,4.895,3891,4.895,3892,4.895,3893,4.895,3894,4.895,3895,4.895,3896,4.895,3897,4.895,3898,5.807,3899,3.327,3900,3.327,3901,3.327,3902,3.327,3903,3.327,3904,4.895,3905,3.327,3906,3.731,3907,3.731,3908,3.731,3909,3.731,3910,3.731]],["title/controllers/WellKnownController.html",[139,1.433,186,3.646]],["body/controllers/WellKnownController.html",[3,0.051,4,0.057,5,0.051,9,0.844,13,0.174,17,0.797,20,0.302,21,0.006,23,1.572,30,0.057,31,0.004,32,0.004,33,0.197,42,1.22,45,0.44,48,1.212,50,0.212,95,1.361,96,2.263,102,1.192,116,1.801,139,2.206,141,1.664,143,1.449,146,2.062,147,0.793,148,2.91,149,1.485,181,5.445,186,5.614,222,5.043,223,6.061,225,4.103,276,1.046,305,3.057,306,3.882,307,2.864,313,3.747,321,4.57,336,4.57,339,1.775,340,1.923,358,5.686,362,3.057,373,3.032,375,1.918,376,2.132,379,3.53,400,1.497,491,1.296,536,3.429,568,4,607,2.063,633,2.206,635,8.001,636,4.892,664,2.459,665,5.043,666,3.53,676,1.961,686,3.53,720,6.525,733,3.53,1181,3.511,1187,3.882,1281,5.206,1284,4.847,1730,3.172,1796,5.566,2103,3.775,2135,4.103,2144,5.303,2600,5.303,2649,4.892,3591,4.103,3911,4.103,3912,4.602,3913,7.045,3914,5.686,3915,4.602,3916,4.602,3917,4.602,3918,4.602,3919,6.377,3920,4.602,3921,4.602,3922,4.602,3923,6.482,3924,4.602,3925,4.602,3926,4.602,3927,4.602,3928,5.686,3929,4.602,3930,4.103,3931,4.103,3932,4.103,3933,4.602,3934,4.602,3935,4.602,3936,4.602,3937,4.103,3938,4.602,3939,4.602,3940,4.602,3941,4.602,3942,4.602,3943,4.602,3944,4.602,3945,4.602]],["title/injectables/WellKnownService.html",[181,3.276,486,0.996]],["body/injectables/WellKnownService.html",[3,0.043,4,0.048,5,0.043,9,0.451,11,3.228,12,1.029,13,0.148,17,0.8,19,0.436,20,0.324,21,0.006,23,1.649,30,0.048,31,0.004,32,0.004,33,0.167,45,0.442,50,0.208,93,1.774,95,1.265,143,1.291,146,1.991,147,0.674,149,1.49,181,5.061,222,3.915,223,5.983,233,1.229,257,3.486,274,3.915,276,1.291,305,3.9,306,4.47,307,2.223,308,2.223,313,3.338,320,2.695,321,3.473,336,3.473,339,1.781,340,1.713,352,4.043,362,2.723,376,2.272,399,2.03,400,1.91,481,2.723,486,1.19,487,1.47,489,2.015,490,2.244,491,2.067,502,2.293,533,2.244,536,3.16,540,2.592,557,3.486,568,3.743,583,2.999,584,2.472,586,2.999,587,2.833,607,1.838,636,4.358,649,4.116,664,2.089,669,5.236,676,3.128,728,4.022,742,2.949,758,2.153,773,4.231,815,3.29,828,2.03,950,2.03,1076,3.228,1099,2.833,1181,4.48,1187,3.458,1206,3.208,1280,4.358,1281,5.139,1284,5.112,1375,5.111,1402,3.486,1403,2.297,1404,2.833,1407,2.297,1412,3.486,1436,3.208,1453,3.208,1454,2.576,1462,2.833,1463,2.999,1730,2.695,1796,4.932,1984,2.472,2105,5.309,2106,2.833,2113,4.358,2244,5.065,2600,5.321,2764,3.486,2766,3.208,2767,5.065,2773,3.208,2888,4.66,3160,5.065,3164,3.486,3523,5.065,3913,5.065,3914,5.065,3923,6.024,3928,3.486,3930,3.486,3931,3.486,3932,3.486,3937,3.486,3946,3.486,3947,5.68,3948,5.68,3949,5.68,3950,3.91,3951,3.91,3952,5.68,3953,3.91,3954,5.065,3955,5.68,3956,3.91,3957,5.68,3958,5.68,3959,5.68,3960,5.68,3961,6.024,3962,6.69,3963,5.065,3964,5.68,3965,3.91,3966,3.91,3967,3.91,3968,3.91,3969,3.91,3970,3.91,3971,5.68,3972,3.91,3973,3.91,3974,3.91,3975,3.91]],["title/coverage.html",[3976,5.814]],["body/coverage.html",[0,2.353,1,1.591,5,0.021,6,1.729,7,0.864,8,1.729,12,0.511,20,0.283,21,0.006,22,0.808,23,0.478,27,0.744,31,0.002,32,0.002,33,0.418,34,1.068,36,4.047,39,1.068,59,0.979,60,0.979,61,0.979,64,1.226,71,1.068,78,1.068,80,1.226,84,1.068,86,1.278,87,3.656,111,1.278,113,1.278,117,0.985,118,1.278,125,0.715,139,2.546,140,1.488,142,1.729,164,0.954,181,1.337,186,1.488,218,1.591,223,2.507,298,1.488,299,1.729,308,0.759,321,1.007,322,1.488,325,1.488,330,1.405,336,1.007,355,2.681,363,1.337,369,1.488,411,1.405,412,1.278,413,1.405,414,1.181,416,1.488,417,1.488,429,1.857,433,1.405,436,1.488,439,1.181,440,1.139,442,1.226,446,0.639,461,0.616,468,1.226,469,1.405,470,1.729,471,4.11,486,1.891,488,1.729,500,1.226,526,0.979,536,0.688,541,0.954,568,0.864,589,1.181,590,3.804,591,3.804,592,1.226,593,1.226,608,1.226,613,1.181,616,1.181,627,1.405,628,1.729,631,1.488,632,1.729,643,1.226,665,1.337,667,1.007,669,1.181,673,1.488,696,1.729,697,3.804,719,3.249,728,0.907,729,1.139,730,1.181,761,1.405,763,1.405,765,1.405,802,1.65,827,1.181,835,7.491,877,1.981,878,1.068,880,2.681,903,1.405,913,4.047,914,4.111,923,1.102,927,1.181,937,1.181,946,1.181,948,1.036,961,1.729,968,1.226,969,0.954,984,1.068,989,1.488,1005,1.729,1006,1.729,1009,1.729,1031,1.729,1033,1.405,1034,3.249,1059,1.729,1060,1.729,1064,1.337,1065,1.729,1066,1.729,1071,1.799,1072,4.021,1079,1.181,1084,1.337,1118,1.226,1128,1.278,1132,1.337,1134,1.068,1148,1.405,1149,1.729,1150,3.249,1153,1.488,1154,2.681,1159,1.337,1165,1.278,1166,1.729,1167,1.405,1168,3.249,1174,1.036,1222,6.012,1280,1.488,1281,3.964,1282,1.729,1283,2.681,1306,1.181,1321,1.488,1322,1.729,1340,1.278,1347,1.488,1348,3.249,1349,1.591,1350,1.729,1367,1.729,1373,1.139,1375,1.181,1403,3.761,1477,4.633,1479,1.337,1480,4.078,1490,1.337,1498,1.488,1504,2.681,1512,1.591,1517,1.488,1522,1.226,1524,1.488,1528,1.278,1532,1.488,1533,1.729,1534,2.914,1536,1.337,1563,1.278,1569,1.226,1591,2.252,1672,1.488,1673,1.729,1678,1.405,1682,1.337,1689,1.729,1691,1.226,1693,3.249,1696,1.405,1699,1.405,1705,1.729,1730,1.337,1732,1.729,1771,1.405,1772,1.729,1776,1.278,1777,3.813,1793,1.405,1796,1.226,1800,1.337,1809,1.405,1811,1.488,1812,1.729,1813,1.729,1816,1.278,1817,1.729,1853,1.488,1876,1.488,1877,2.681,1879,1.488,1912,1.488,1913,1.729,1933,1.729,1934,2.681,1968,3.249,1975,2.914,2012,1.488,2013,1.729,2031,1.729,2089,1.488,2090,2.681,2091,1.591,2092,1.729,2095,1.337,2098,1.278,2105,1.226,2144,1.405,2145,1.729,2154,1.226,2155,1.181,2156,1.226,2158,1.488,2184,1.729,2195,1.591,2208,1.729,2273,3.825,2274,2.681,2286,1.729,2298,1.488,2313,2.681,2319,1.591,2333,1.729,2341,1.591,2342,1.729,2347,1.729,2361,4.765,2366,1.729,2426,1.729,2492,1.488,2493,1.729,2530,1.488,2531,2.681,2544,1.488,2587,1.488,2593,1.488,2594,1.729,2600,1.405,2601,1.729,2612,2.681,2635,1.729,2651,1.278,2671,1.488,2672,1.729,2698,1.729,2701,1.226,2702,1.226,2710,1.488,2717,1.278,2746,2.681,2824,1.729,2847,1.405,2848,1.729,2852,1.488,2853,1.729,2860,1.488,2882,2.507,2889,1.729,2901,1.729,2913,1.337,2995,1.405,2996,1.729,3013,1.729,3145,1.729,3154,1.729,3190,1.729,3193,1.591,3195,1.729,3199,1.591,3209,1.488,3210,1.729,3265,2.507,3313,1.488,3314,1.729,3327,1.405,3330,1.591,3332,1.488,3345,4.021,3346,1.729,3352,1.729,3378,1.591,3417,1.729,3482,1.729,3492,1.729,3525,7.972,3578,1.488,3579,3.656,3580,1.729,3594,1.405,3595,2.681,3596,1.729,3614,1.405,3618,1.729,3686,1.729,3696,2.681,3702,1.488,3703,1.729,3734,1.591,3739,1.488,3755,1.729,3778,2.681,3786,1.591,3789,2.681,3835,1.729,3842,1.729,3868,1.488,3869,2.681,3911,1.729,3946,1.729,3976,1.729,3977,1.939,3978,1.939,3979,7.617,3980,1.939,3981,3.268,3982,3.268,3983,4.433,3984,6.935,3985,1.729,3986,9.362,3987,1.729,3988,1.729,3989,7.232,3990,7.918,3991,1.939,3992,1.939,3993,4.235,3994,1.939,3995,3.268,3996,3.268,3997,8.984,3998,1.939,3999,3.268,4000,5.549,4001,1.939,4002,1.939,4003,2.914,4004,2.914,4005,1.729,4006,7.617,4007,6.016,4008,1.939,4009,1.939,4010,5.365,4011,5.549,4012,7.437,4013,2.914,4014,2.914,4015,1.939,4016,1.729,4017,3.268,4018,6.016,4019,1.939,4020,1.939,4021,1.939,4022,1.939,4023,1.939,4024,4.433,4025,4.971,4026,1.729,4027,1.729,4028,4.235,4029,1.729,4030,1.729,4031,1.939,4032,1.729,4033,1.729,4034,6.016,4035,1.939,4036,1.939,4037,4.971,4038,1.939,4039,1.939,4040,1.939,4041,1.939,4042,1.939,4043,1.939,4044,3.268,4045,3.268,4046,2.914,4047,3.268,4048,1.939,4049,4.235,4050,4.235,4051,1.939,4052,1.939,4053,1.729,4054,1.939,4055,1.939,4056,1.939,4057,3.268,4058,1.729,4059,1.939,4060,1.939,4061,1.729,4062,1.729,4063,1.729,4064,3.268,4065,1.729,4066,1.729,4067,1.729,4068,4.971,4069,1.939,4070,1.939,4071,1.729,4072,1.729,4073,5.74,4074,1.729,4075,1.729,4076,1.729,4077,5.365,4078,1.729,4079,1.729,4080,1.729,4081,1.729,4082,1.729,4083,1.729,4084,1.729,4085,1.729,4086,1.729,4087,1.729,4088,1.939,4089,1.939,4090,2.914,4091,1.939,4092,1.939,4093,1.591,4094,1.729,4095,1.939,4096,1.939,4097,1.939]],["title/dependencies.html",[161,2.892,4098,3.525]],["body/dependencies.html",[12,1.475,21,0.006,31,0.005,32,0.005,33,0.312,51,1.689,58,1.336,102,1.45,147,0.965,161,2.829,190,1.845,192,4.595,193,3.183,195,4.595,197,4.994,198,4.058,200,4.994,202,3.542,203,5.325,251,4.058,313,3.291,315,3.874,382,2.497,419,4.296,422,2.238,424,3.69,425,3.86,427,1.78,757,4.058,815,3.578,1284,3.084,1295,2.993,1391,3.86,1394,5.027,1395,4.296,1396,4.296,1398,4.296,1400,4.296,1401,4.058,1582,4.058,1587,2.829,1590,4.296,1925,4.595,2104,3.69,2160,3.183,2193,4.296,2226,4.994,2229,4.994,2379,4.994,2380,4.296,2560,4.058,2951,3.86,3055,4.994,3216,4.058,3226,5.582,3227,4.595,3228,4.994,3229,4.994,3535,4.296,4099,7.276,4100,5.6,4101,5.6,4102,7.276,4103,8.081,4104,5.6,4105,5.6,4106,5.6,4107,5.6,4108,5.6,4109,5.6,4110,5.6,4111,5.6,4112,7.276,4113,8.555,4114,8.555,4115,8.555,4116,5.6,4117,5.6,4118,5.6,4119,5.6,4120,8.081,4121,5.6,4122,5.6,4123,5.6,4124,5.6,4125,5.6,4126,5.6,4127,5.6,4128,5.6,4129,5.6,4130,5.6,4131,5.6,4132,5.6,4133,5.6,4134,5.6,4135,5.6,4136,5.6,4137,5.6,4138,5.6,4139,5.6,4140,5.6,4141,5.6,4142,5.6,4143,5.6,4144,5.6,4145,5.6,4146,5.6,4147,5.6]],["title/miscellaneous/enumerations.html",[4148,2.5,4149,5.106]],["body/miscellaneous/enumerations.html",[12,1.6,13,0.23,20,0.279,21,0.006,31,0.005,32,0.005,65,3.189,87,4.004,90,2.841,91,3.843,93,3.13,105,3.872,106,2.572,107,4.667,108,4.188,109,3.843,138,3.128,329,2.002,468,3.843,482,2.378,493,4.004,498,3.196,590,3.843,591,4.848,605,3.571,617,4.848,618,4.004,697,4.848,933,3.453,1010,3.571,1133,3.77,1264,5.051,2104,5.051,2107,5.283,2113,4.662,2322,4.662,2622,4.662,2882,4.662,3265,4.662,3266,3.843,3292,6.289,3295,5.283,3306,6.836,3307,5.555,3308,6.836,3923,6.289,3961,4.985,3963,5.419,4093,4.985,4148,3.843,4149,5.419,4150,6.076,4151,6.076,4152,5.419,4153,7.666,4154,6.076,4155,6.076,4156,5.419,4157,6.076,4158,6.076,4159,6.076,4160,6.076,4161,6.076,4162,6.076,4163,6.076,4164,6.076,4165,6.076,4166,6.076,4167,6.076,4168,6.076]],["title/miscellaneous/functions.html",[4148,2.5,4169,5.106]],["body/miscellaneous/functions.html",[9,1.087,12,2.044,13,0.196,17,1.004,19,0.609,20,0.33,21,0.006,23,2.236,28,2.152,31,0.004,32,0.004,48,0.982,76,2.301,88,1.359,95,1.588,116,2.699,117,2.079,146,2.061,154,4.149,164,4.075,193,2.934,202,3.265,237,2.2,263,3.143,270,2.843,339,2.235,481,2.475,485,2.843,517,5.957,541,2.539,665,5.352,741,3.919,761,4.997,801,3.96,901,3.093,942,4.727,984,3.797,1077,4.413,1080,4.185,1181,4.755,1449,5.957,1573,3.265,2064,4.235,2361,4.544,2557,4.997,2965,4.235,3041,4.235,3266,3.265,4005,4.603,4058,4.603,4061,4.603,4067,4.603,4073,4.235,4077,4.603,4078,6.149,4079,6.149,4080,6.149,4081,6.149,4082,6.149,4083,6.149,4148,3.265,4169,4.603,4170,5.162,4171,8.884,4172,5.162,4173,5.162,4174,5.162,4175,5.162,4176,5.162,4177,8.287,4178,5.162,4179,5.162,4180,5.162,4181,5.162,4182,5.162,4183,5.162,4184,5.162,4185,6.896,4186,5.162,4187,6.896,4188,5.162,4189,5.162,4190,4.235,4191,5.162,4192,7.764,4193,8.287,4194,7.764,4195,7.764,4196,5.162,4197,6.896,4198,5.162,4199,5.162,4200,5.162,4201,5.162,4202,5.162,4203,5.162,4204,5.162]],["title/index.html",[13,0.18,4205,4.238]],["body/index.html",[2,1.796,21,0.006,31,0.003,32,0.003,35,0.736,141,1.355,158,1.212,159,7.49,160,1.671,161,1.893,162,2.002,163,2.002,164,1.843,165,1.893,166,1.893,167,3.342,168,3.342,169,3.342,170,7.043,171,5.277,172,5.215,173,4.731,174,6.801,175,4.731,176,4.731,177,5.721,178,5.507,179,4.731,180,6.621,181,4.5,182,2.943,183,2.002,184,2.002,363,4.5,406,3.342,407,3.342,408,3.342,409,3.342,410,5.811,411,6.004,412,5.459,413,6.004,414,3.975,487,1.409,667,4.302,669,5.044,728,3.874,729,4.869,730,5.044,879,1.752,1165,5.459,1340,4.302,1373,4.869,1375,5.044,1473,5.556,1474,3.342,1475,3.342,1476,3.342,1519,3.342,1520,3.342,1521,3.342,1522,5.24,1682,4.5,1984,2.37,2105,5.24,2149,3.342,2150,3.342,2151,3.342,2152,3.342,2153,6.195,2154,4.551,2155,4.381,2156,4.551,2587,2.875,2689,3.342,2691,3.342,2692,3.342,2695,5.716,2701,5.24,2702,5.24,2891,3.342,2892,3.342,2893,3.342,2894,3.342,2895,5.809,2913,5.711,3003,3.342,3005,3.342,3006,3.342,3149,3.342,3150,3.342,3151,3.342,3473,3.342,3475,3.342,3476,3.342,3607,3.342,3608,3.342,3609,3.342,4205,3.342,4206,3.747,4207,3.747,4208,3.747,4209,3.747,4210,3.747,4211,3.747]],["title/modules.html",[160,2.907]],["body/modules.html",[21,0.005,31,0.005,32,0.005,159,5.095,160,2.961,170,4.812,171,3.774,172,4.812,173,4.812,174,4.577,175,4.812,176,4.812,177,4.2,178,4.043,179,4.812,180,4.812,410,4.376,506,6.43,510,7.607,1473,4.812,2153,4.376,2695,4.376,2895,4.812,4212,9.915,4213,9.915,4214,10.048,4215,9.33]],["title/properties.html",[14,0.724,4098,3.525]],["body/properties.html",[9,0.853,14,0.936,21,0.006,31,0.005,32,0.005,156,7.089,426,3.377,836,4.679,3954,6.599,4216,7.4,4217,7.4,4218,7.4,4219,7.4,4220,7.4,4221,7.4,4222,8.64,4223,7.4,4224,7.4,4225,7.4,4226,7.4,4227,7.4,4228,7.4,4229,7.4]],["title/miscellaneous/typealiases.html",[4148,2.5,4230,5.725]],["body/miscellaneous/typealiases.html",[11,3.668,13,0.244,20,0.337,21,0.006,23,1.591,31,0.005,32,0.005,36,4.081,37,3.668,64,5.033,65,2.334,66,3.668,67,3.668,271,2.475,405,3.792,479,6.912,536,2.29,580,3.668,827,4.846,877,1.644,880,5.295,903,5.767,1010,3.792,1169,3.259,1306,4.846,1403,4.677,1477,5.486,1480,7.392,1490,5.486,1498,6.106,1504,6.53,1512,6.53,1517,4.951,1746,5.295,1761,5.295,1777,4.951,1793,5.767,1800,5.486,1808,4.951,2313,5.295,2319,6.53,2320,4.676,2322,4.951,2361,5.244,3216,4.676,3265,4.951,3266,4.081,3309,4.448,3734,5.295,3739,6.106,3778,5.295,3786,6.53,4148,4.081,4156,5.755,4231,6.454,4232,6.454,4233,8.035,4234,6.454,4235,6.454,4236,6.454,4237,7.097,4238,6.454]],["title/miscellaneous/variables.html",[4148,2.5,4190,4.697]],["body/miscellaneous/variables.html",[3,0.021,9,0.224,11,2.407,12,1.584,13,0.073,16,1.042,19,0.497,20,0.288,21,0.006,22,2.072,23,1.578,25,0.775,31,0.002,32,0.002,48,0.621,50,0.099,88,1.309,93,2.791,95,1.037,106,0.651,116,0.759,117,1.93,123,1.226,126,2.108,138,3.173,143,0.441,149,1.299,151,1.337,158,1.057,206,0.929,218,2.681,233,1.61,236,1.488,237,1.392,240,3.143,246,1.405,251,2.368,270,1.068,271,0.744,274,1.337,283,5.706,286,3.069,305,0.929,308,2.172,314,1.068,315,1.566,316,0.929,321,1.007,343,4.424,352,1.068,381,2.681,405,1.139,439,2.578,461,1.039,483,2.072,489,1.159,490,1.862,498,0.808,509,2.263,517,1.488,526,2.803,533,2.147,536,2.271,540,0.885,541,2.729,559,1.226,564,1.92,568,1.888,599,1.068,606,1.036,742,1.697,754,2.383,780,2.153,815,2.445,828,1.697,844,0.885,870,3.171,901,1.731,942,5.773,969,0.954,1034,1.488,1077,3.154,1092,0.979,1133,1.607,1169,0.979,1172,1.139,1174,1.746,1213,1.488,1228,2.066,1262,1.226,1263,3.656,1284,1.068,1381,1.405,1403,1.139,1443,1.729,1444,2.681,1447,1.181,1455,1.591,1467,1.405,1477,2.252,1479,1.337,1485,1.591,1490,1.337,1491,1.729,1495,1.591,1496,1.729,1499,1.729,1500,3.426,1501,3.275,1502,3.475,1503,1.226,1517,4.257,1555,1.488,1648,1.729,1652,1.729,1654,1.729,1656,1.729,1658,1.591,1660,4.936,1662,4.948,1757,1.729,1777,1.488,1796,2.066,1808,3.813,1809,2.368,1810,1.729,1834,1.591,1853,5.706,1879,2.507,1884,2.681,1968,1.488,1969,2.681,1970,2.252,1971,4.078,1972,2.681,1973,2.681,1974,1.591,1986,1.729,2050,1.729,2090,1.591,2195,2.681,2263,1.729,2320,2.368,2322,1.488,2337,1.729,2338,5.365,2404,4.146,2557,1.405,2560,1.405,2570,1.405,2571,1.591,2572,1.591,2574,1.591,2575,3.475,2576,2.681,2577,1.591,2651,2.153,2707,1.591,2723,2.507,2746,4.553,2929,1.729,2964,7.275,3008,5.74,3028,1.488,3041,6.78,3070,1.729,3071,1.729,3199,2.681,3213,4.948,3216,5.913,3226,1.488,3266,1.226,3309,2.252,3345,1.405,3354,1.405,3378,2.681,3381,2.914,3519,1.729,3522,1.729,3524,1.729,3739,1.488,3742,1.729,3747,1.729,3749,1.729,3751,1.729,3961,1.591,3983,1.729,3984,7.784,3985,3.777,3987,2.914,3988,2.914,4003,1.729,4004,1.729,4010,4.433,4013,1.729,4014,2.914,4016,2.914,4024,2.914,4026,2.914,4027,1.729,4029,1.729,4030,2.914,4032,1.729,4033,2.914,4046,1.729,4053,2.914,4062,1.729,4063,2.914,4065,1.729,4066,2.914,4071,1.729,4072,2.914,4073,3.475,4074,1.729,4075,1.729,4076,2.914,4084,1.729,4085,2.914,4086,1.729,4087,2.914,4090,3.777,4093,1.591,4094,2.914,4148,1.226,4152,1.729,4190,2.681,4233,1.729,4237,1.729,4239,4.971,4240,1.939,4241,1.939,4242,1.939,4243,1.939,4244,1.939,4245,1.939,4246,3.268,4247,1.939,4248,1.939,4249,1.939,4250,1.939,4251,3.268,4252,4.235,4253,1.939,4254,1.939,4255,1.939,4256,1.939,4257,7.437,4258,8.984,4259,4.971,4260,3.268,4261,9.483,4262,1.939,4263,1.939,4264,7.777,4265,1.939,4266,1.939,4267,7.777,4268,1.939,4269,6.723,4270,1.939,4271,6.996,4272,3.268,4273,4.971,4274,1.939,4275,1.939,4276,1.939,4277,1.939,4278,1.939,4279,6.4,4280,1.939,4281,1.939,4282,1.939,4283,1.939,4284,1.939,4285,5.549,4286,1.939,4287,5.549,4288,1.939,4289,4.235,4290,1.939,4291,1.939,4292,1.939,4293,3.268,4294,1.939,4295,1.939,4296,1.939,4297,1.939,4298,3.268,4299,1.939,4300,1.939,4301,1.939,4302,1.939,4303,1.939,4304,3.268,4305,3.268,4306,1.939,4307,6.016,4308,5.549,4309,1.939,4310,1.939,4311,1.939,4312,1.939,4313,1.939,4314,1.939,4315,1.939,4316,1.939,4317,1.939,4318,1.939,4319,1.939,4320,8.16,4321,1.939,4322,1.939,4323,6.016,4324,1.939,4325,5.549,4326,8.046,4327,1.939,4328,1.939,4329,4.235,4330,1.939,4331,1.939,4332,1.939,4333,1.939,4334,4.971,4335,1.939,4336,6.016,4337,1.939,4338,3.268,4339,1.939,4340,1.939,4341,3.268,4342,1.939,4343,3.268,4344,1.939,4345,1.939,4346,1.939,4347,1.939,4348,3.268,4349,1.939,4350,1.939,4351,1.939,4352,1.939,4353,1.939,4354,1.939,4355,1.939,4356,3.268,4357,1.939,4358,1.939,4359,1.939,4360,3.268,4361,1.939,4362,1.939,4363,1.939,4364,1.939,4365,1.939,4366,1.939,4367,4.235,4368,1.939,4369,1.939,4370,1.939,4371,1.939,4372,1.939,4373,1.939,4374,1.939,4375,1.939,4376,1.939,4377,1.939,4378,1.939,4379,1.939,4380,1.939,4381,1.939,4382,6.723,4383,1.939,4384,1.939,4385,1.939,4386,1.939,4387,1.939,4388,1.939,4389,1.939,4390,1.939,4391,1.939,4392,1.939,4393,1.939,4394,1.939,4395,1.939,4396,1.939,4397,1.939,4398,1.939,4399,1.939,4400,1.939,4401,1.939,4402,1.939,4403,1.939,4404,1.939,4405,1.939]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/ClientSecretResponseDto.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1222,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["0.0.1",{"_index":4217,"title":{},"body":{"properties.html":{}}}],["0.14.0",{"_index":4120,"title":{},"body":{"dependencies.html":{}}}],["0.14.2",{"_index":4126,"title":{},"body":{"dependencies.html":{}}}],["0.15.1",{"_index":4121,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":4142,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":4113,"title":{},"body":{"dependencies.html":{}}}],["0.3.25",{"_index":4146,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":3655,"title":{},"body":{"injectables/StatusListService.html":{}}}],["0.5.1",{"_index":4125,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":3986,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":4035,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":4036,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":3979,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3990,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":4000,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":3995,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":4068,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":3996,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":4028,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":3991,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1984,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/WellKnownService.html":{},"index.html":{}}}],["1.11.0",{"_index":4124,"title":{},"body":{"dependencies.html":{}}}],["1.13.0",{"_index":4119,"title":{},"body":{"dependencies.html":{}}}],["1.5.4",{"_index":4140,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":3997,"title":{},"body":{"coverage.html":{}}}],["1/10",{"_index":3992,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":4011,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":4045,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":4047,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":4002,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":4039,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1853,"title":{},"body":{"injectables/FilesService.html":{},"injectables/KeycloakClientsProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["10,000",{"_index":3635,"title":{},"body":{"injectables/StatusListService.html":{}}}],["10.5.0",{"_index":4137,"title":{},"body":{"dependencies.html":{}}}],["10/12",{"_index":4057,"title":{},"body":{"coverage.html":{}}}],["10/15",{"_index":4019,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":835,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["1000",{"_index":1454,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["10000",{"_index":3648,"title":{},"body":{"injectables/StatusListService.html":{}}}],["11",{"_index":4042,"title":{},"body":{"coverage.html":{}}}],["11.0.0",{"_index":4112,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":4108,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":4147,"title":{},"body":{"dependencies.html":{}}}],["11.1.6",{"_index":4103,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":4111,"title":{},"body":{"dependencies.html":{}}}],["12/14",{"_index":4092,"title":{},"body":{"coverage.html":{}}}],["12/schema",{"_index":3254,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["13",{"_index":4208,"title":{},"body":{"index.html":{}}}],["13.1.1",{"_index":4138,"title":{},"body":{"dependencies.html":{}}}],["13/13",{"_index":4048,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":4038,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":4064,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":4327,"title":{},"body":{"miscellaneous/variables.html":{}}}],["15.1.3",{"_index":4139,"title":{},"body":{"dependencies.html":{}}}],["16",{"_index":4001,"title":{},"body":{"coverage.html":{}}}],["17",{"_index":4206,"title":{},"body":{"index.html":{}}}],["18",{"_index":4211,"title":{},"body":{"index.html":{}}}],["18.0.0",{"_index":4128,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":4207,"title":{},"body":{"index.html":{}}}],["1_0.html#claims_query",{"_index":944,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["1_0.html#name",{"_index":934,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["2.0",{"_index":3954,"title":{},"body":{"injectables/WellKnownService.html":{},"properties.html":{}}}],["2.0.2",{"_index":4131,"title":{},"body":{"dependencies.html":{}}}],["2/17",{"_index":4043,"title":{},"body":{"coverage.html":{}}}],["2/2",{"_index":4034,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":4037,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":4023,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":4269,"title":{},"body":{"miscellaneous/variables.html":{}}}],["20/22",{"_index":4015,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{}}}],["201",{"_index":2097,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["20250714110838",{"_index":4115,"title":{},"body":{"dependencies.html":{}}}],["23",{"_index":4088,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":562,"title":{},"body":{"injectables/AuthService.html":{}}}],["24h",{"_index":554,"title":{},"body":{"injectables/AuthService.html":{}}}],["25",{"_index":4046,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["256",{"_index":1444,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["26",{"_index":4275,"title":{},"body":{"miscellaneous/variables.html":{}}}],["26.3.2",{"_index":4101,"title":{},"body":{"dependencies.html":{}}}],["29",{"_index":4209,"title":{},"body":{"index.html":{}}}],["3",{"_index":2461,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["3.0.1",{"_index":4107,"title":{},"body":{"dependencies.html":{}}}],["3.14.3",{"_index":4133,"title":{},"body":{"dependencies.html":{}}}],["3.2.0",{"_index":4130,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":4100,"title":{},"body":{"dependencies.html":{}}}],["3.864.0",{"_index":4099,"title":{},"body":{"dependencies.html":{}}}],["3/13",{"_index":4089,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":4012,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":4050,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":3999,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":4279,"title":{},"body":{"miscellaneous/variables.html":{}}}],["300",{"_index":832,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["30d",{"_index":561,"title":{},"body":{"injectables/AuthService.html":{}}}],["33",{"_index":4044,"title":{},"body":{"coverage.html":{}}}],["36/36",{"_index":3982,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":931,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["4.0.1",{"_index":4102,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":4104,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":4134,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":3989,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":4025,"title":{},"body":{"coverage.html":{}}}],["4/7",{"_index":4070,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":4285,"title":{},"body":{"miscellaneous/variables.html":{}}}],["401",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["47",{"_index":4021,"title":{},"body":{"coverage.html":{}}}],["4909",{"_index":2125,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["5",{"_index":2247,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["5.0.3",{"_index":4110,"title":{},"body":{"dependencies.html":{}}}],["5.1.7",{"_index":4145,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":4007,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":3994,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":4055,"title":{},"body":{"coverage.html":{}}}],["5/9",{"_index":4009,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":4010,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["500",{"_index":690,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["55",{"_index":4008,"title":{},"body":{"coverage.html":{}}}],["57",{"_index":4069,"title":{},"body":{"coverage.html":{}}}],["6.0.0",{"_index":4109,"title":{},"body":{"dependencies.html":{}}}],["6.0.12",{"_index":4129,"title":{},"body":{"dependencies.html":{}}}],["6.0.2",{"_index":4122,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":4017,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":2746,"title":{},"body":{"injectables/Oid4vpService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["66",{"_index":4018,"title":{},"body":{"coverage.html":{}}}],["68",{"_index":4210,"title":{},"body":{"index.html":{}}}],["7.8.2",{"_index":4143,"title":{},"body":{"dependencies.html":{}}}],["7/8",{"_index":4041,"title":{},"body":{"coverage.html":{}}}],["7/9",{"_index":4060,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":4293,"title":{},"body":{"miscellaneous/variables.html":{}}}],["71",{"_index":4054,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":4049,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":4059,"title":{},"body":{"coverage.html":{}}}],["8.16.3",{"_index":4136,"title":{},"body":{"dependencies.html":{}}}],["8/12",{"_index":4031,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":4052,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":4024,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["83",{"_index":3993,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":4091,"title":{},"body":{"coverage.html":{}}}],["86400",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["87",{"_index":4040,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":4051,"title":{},"body":{"coverage.html":{}}}],["8a7a",{"_index":2126,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["8ad6",{"_index":2124,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["9/10",{"_index":4096,"title":{},"body":{"coverage.html":{}}}],["9/19",{"_index":4022,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":4095,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":4014,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["_d",{"_index":1604,"title":{},"body":{"classes/DBKeyService.html":{}}}],["_ext",{"_index":1608,"title":{},"body":{"classes/DBKeyService.html":{}}}],["_key_ops",{"_index":1606,"title":{},"body":{"classes/DBKeyService.html":{}}}],["a128gcm",{"_index":2760,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["a739c2c412c0",{"_index":2127,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["abstract",{"_index":2348,"title":{},"body":{"classes/KeyService.html":{}}}],["accept",{"_index":2135,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/WellKnownController.html":{}}}],["accepts",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{}}}],["access",{"_index":11,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"entities/CertEntity.html":{},"interfaces/InternalTokenPayload.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["access.token.claim",{"_index":2456,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["access_token",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenResponse.html":{}}}],["accesscert",{"_index":2770,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscert?.length",{"_index":2780,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscertificatecontrollerregister",{"_index":3058,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["accesscertificateid",{"_index":2997,"title":{},"body":{"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{}}}],["accesscertificateresponse",{"_index":1,"title":{"interfaces/AccessCertificateResponse.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["accessible",{"_index":1842,"title":{},"body":{"injectables/FilesService.html":{}}}],["accessing",{"_index":3028,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["accesskeyid",{"_index":3748,"title":{},"body":{"modules/StorageModule.html":{}}}],["accesstoken",{"_index":2393,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"injectables/RegistrarService.html":{}}}],["accesstokenrequest",{"_index":800,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["accordingly",{"_index":3810,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["account",{"_index":2466,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["accounts",{"_index":1028,"title":{},"body":{"entities/ClientEntity.html":{}}}],["acl",{"_index":1797,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/S3FileStorage.html":{}}}],["acl=public",{"_index":1805,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["action",{"_index":2728,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["active",{"_index":3295,"title":{},"body":{"entities/Session.html":{},"injectables/SessionService.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/enumerations.html":{}}}],["actual",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{}}}],["adapt",{"_index":73,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["adapters/db",{"_index":2332,"title":{},"body":{"modules/KeyModule.html":{}}}],["adapters/local.storage",{"_index":3736,"title":{},"body":{"modules/StorageModule.html":{}}}],["adapters/s3.storage",{"_index":3737,"title":{},"body":{"modules/StorageModule.html":{}}}],["adapters/vault",{"_index":2334,"title":{},"body":{"modules/KeyModule.html":{}}}],["add",{"_index":1407,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/MetricModule.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/WellKnownService.html":{}}}],["add(issuer_state",{"_index":3502,"title":{},"body":{"injectables/SessionService.html":{}}}],["addaccesscertificate",{"_index":3020,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addaccesscertificate(tenantid",{"_index":3030,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addclient",{"_index":1049,"title":{},"body":{"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["addclient(tenantid",{"_index":1042,"title":{},"body":{"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["adding",{"_index":3016,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["additional",{"_index":1905,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/SessionLogContext.html":{}}}],["additionaldata",{"_index":3434,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["addkey",{"_index":2287,"title":{},"body":{"controllers/KeyController.html":{}}}],["addkey(token",{"_index":2291,"title":{},"body":{"controllers/KeyController.html":{}}}],["addregistrationcertificate",{"_index":3021,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addregistrationcertificate(req",{"_index":3032,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp",{"_index":3022,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp(name",{"_index":3034,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["adds",{"_index":3036,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["admin",{"_index":2380,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["against",{"_index":1243,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["agent",{"_index":272,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["alg",{"_index":828,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["algorithm",{"_index":1503,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["algorithms",{"_index":1484,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["alias",{"_index":4006,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":4231,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowedsigningalgs",{"_index":813,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["allowing",{"_index":3807,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["allowinsecureurls",{"_index":2182,"title":{},"body":{"modules/IssuerModule.html":{}}}],["allowlist",{"_index":37,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/typealiases.html":{}}}],["allowlistpolicy",{"_index":34,"title":{"classes/AllowListPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["allrealmroles",{"_index":2469,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["allrealmroles.find(ar",{"_index":2474,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["alpha",{"_index":4114,"title":{},"body":{"dependencies.html":{}}}],["already",{"_index":1197,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["always",{"_index":1726,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["amount",{"_index":1307,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{}}}],["any).$schema",{"_index":1424,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["any).issuer",{"_index":2265,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["any).method",{"_index":872,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["any).realm_access?.roles",{"_index":2272,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["any)[key",{"_index":2268,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apache",{"_index":4225,"title":{},"body":{"properties.html":{}}}],["api",{"_index":89,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/RegistrarService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["api_key",{"_index":108,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["apibody",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/StorageController.html":{}}}],["apibody({description",{"_index":652,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["apiconsumes",{"_index":3718,"title":{},"body":{"controllers/StorageController.html":{}}}],["apiconsumes(\"multipart/form",{"_index":3724,"title":{},"body":{"controllers/StorageController.html":{}}}],["apiexcludecontroller",{"_index":148,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["apiexcludecontroller(process.env.swagger_all",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["apiextramodels",{"_index":99,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["apiextramodels(roledto",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiextramodels(webhookauthconfignone",{"_index":124,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["apiheader",{"_index":3934,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apihideproperty",{"_index":919,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["apihideproperty()@column('varchar",{"_index":1123,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apikey",{"_index":109,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["apikeyconfig",{"_index":86,"title":{"classes/ApiKeyConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["apioperation",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{},"controllers/WellKnownController.html":{}}}],["apioperation({summary",{"_index":3924,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apiparam",{"_index":2649,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/SessionController.html":{},"controllers/WellKnownController.html":{}}}],["apiparam({name",{"_index":3323,"title":{},"body":{"controllers/SessionController.html":{}}}],["apiproduces",{"_index":2103,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["apiproduces(\"application/json",{"_index":2115,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiproduces(mediatype.application_json",{"_index":3936,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apiproperty",{"_index":100,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/FileUploadDto.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RoleDto.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["apiproperty({description",{"_index":3191,"title":{},"body":{"classes/RoleDto.html":{}}}],["apiproperty({enum",{"_index":3293,"title":{},"body":{"entities/Session.html":{}}}],["apiproperty({examples",{"_index":2621,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["apiproperty({required",{"_index":3852,"title":{},"body":{"classes/VCT.html":{}}}],["apiproperty({type",{"_index":1316,"title":{},"body":{"classes/CredentialSetQuery.html":{},"classes/FileUploadDto.html":{},"classes/OfferRequestDto.html":{}}}],["apiresponse",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiresponse({description",{"_index":2096,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apitags",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ClientController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{}}}],["apitags(\"authentication",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"issuer",{"_index":2024,"title":{},"body":{"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["apitags(\"presentation",{"_index":2868,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apitags(\"session",{"_index":3335,"title":{},"body":{"controllers/SessionController.html":{}}}],["apitags(\"status",{"_index":3588,"title":{},"body":{"controllers/StatusListController.html":{}}}],["apitags('client",{"_index":990,"title":{},"body":{"controllers/ClientController.html":{}}}],["app/app.controller",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":140,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":3266,"title":{},"body":{"entities/Session.html":{},"injectables/SessionService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["application/json",{"_index":2113,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["application/jwk",{"_index":3919,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["application/jwt",{"_index":3963,"title":{},"body":{"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["application/statuslist+jwt",{"_index":3586,"title":{},"body":{"controllers/StatusListController.html":{}}}],["application_json",{"_index":4157,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["application_jwt",{"_index":4158,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["applications",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{}}}],["appmodule",{"_index":159,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["ar.name",{"_index":2475,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["array",{"_index":76,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/JwksResponseDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/StatusListService.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/functions.html":{}}}],["array(size",{"_index":3651,"title":{},"body":{"injectables/StatusListService.html":{}}}],["array(size).fill(0).map",{"_index":3649,"title":{},"body":{"injectables/StatusListService.html":{}}}],["array.isarray(dcql_query",{"_index":2743,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["assign",{"_index":2465,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["assigned",{"_index":1020,"title":{},"body":{"entities/ClientEntity.html":{}}}],["associated",{"_index":1163,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"injectables/FilesService.html":{},"classes/IssuanceDto.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["assume",{"_index":850,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["async",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["att",{"_index":2987,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attached",{"_index":925,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["attachment",{"_index":3731,"title":{},"body":{"controllers/StorageController.html":{}}}],["attestation",{"_index":838,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["attestationbased",{"_index":67,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/typealiases.html":{}}}],["attestationbasedpolicy",{"_index":84,"title":{"classes/AttestationBasedPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["attestations",{"_index":926,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["attestations.map((att",{"_index":2988,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attributes",{"_index":2442,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["aud",{"_index":585,"title":{},"body":{"injectables/AuthService.html":{},"injectables/Oid4vpService.html":{}}}],["audience",{"_index":555,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["auth",{"_index":138,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":431,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":432,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/roles/role.enum",{"_index":1333,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{}}}],["auth/secure.decorator",{"_index":1334,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{}}}],["auth/tenant/entitites/tenant.entity",{"_index":911,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"modules/CryptoModule.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["auth/token.decorator",{"_index":1335,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{}}}],["auth_client_id",{"_index":4296,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth_client_secret",{"_index":4294,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth_queries",{"_index":689,"title":{},"body":{"controllers/AuthorizeController.html":{},"entities/Session.html":{}}}],["auth_session",{"_index":698,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["auth_validation_schema",{"_index":3985,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["authconfig",{"_index":107,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["authconfig.api_key",{"_index":115,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["authconfig.method",{"_index":864,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authconfig.none",{"_index":120,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["authcontroller",{"_index":298,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["authenticate(req",{"_index":2213,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authenticating",{"_index":3051,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["authentication",{"_index":90,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["authentication.'})@apiresponse({status",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticationconfig",{"_index":1976,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["authenticationmethod",{"_index":617,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/enumerations.html":{}}}],["authenticationmethod.auth",{"_index":2010,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["authenticationmethod.none",{"_index":2009,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["authenticationmethod.presentation_during_issuance",{"_index":2011,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["authenticationmethodauth",{"_index":589,"title":{"classes/AuthenticationMethodAuth.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationmethodinterface",{"_index":592,"title":{"interfaces/AuthenticationMethodInterface.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationmethodnone",{"_index":616,"title":{"classes/AuthenticationMethodNone.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationmethodpresentation",{"_index":613,"title":{"classes/AuthenticationMethodPresentation.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationurlconfig",{"_index":593,"title":{"classes/AuthenticationUrlConfig.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authfixed",{"_index":2121,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["authguard",{"_index":2194,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard(\"jwt",{"_index":2185,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authheader",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{}}}],["authheader.startswith(\"basic",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{}}}],["authheader.substring(6",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{}}}],["authmodule",{"_index":170,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"index.html":{},"modules.html":{}}}],["author",{"_index":4227,"title":{},"body":{"properties.html":{}}}],["authorities",{"_index":936,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["authorization",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["authorization_challenge_endpoint",{"_index":786,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorization_code",{"_index":873,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["authorization_encrypted_response_alg",{"_index":2758,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_encrypted_response_enc",{"_index":2759,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_endpoint",{"_index":776,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorization_request",{"_index":2725,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{}}}],["authorization_server",{"_index":1285,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["authorization_servers",{"_index":1286,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["authorizationchallengeendpoint",{"_index":639,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationchallengeendpoint(res",{"_index":642,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{}}}],["authorizationcodegrantidentifier",{"_index":752,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationresponse",{"_index":627,"title":{"classes/AuthorizationResponse.html":{}},"body":{"classes/AuthorizationResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"coverage.html":{}}}],["authorizationserver",{"_index":768,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata",{"_index":735,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata.dpop_signing_alg_values_supported",{"_index":814,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata.issuer",{"_index":833,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorize",{"_index":640,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(@query",{"_index":677,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(queries",{"_index":647,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize.service",{"_index":670,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize/authorize.controller",{"_index":2167,"title":{},"body":{"modules/IssuerModule.html":{}}}],["authorize/authorize.service",{"_index":2168,"title":{},"body":{"modules/IssuerModule.html":{}}}],["authorizecontroller",{"_index":631,"title":{"controllers/AuthorizeController.html":{}},"body":{"controllers/AuthorizeController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["authorized",{"_index":600,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["authorizequeries",{"_index":643,"title":{"classes/AuthorizeQueries.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"coverage.html":{}}}],["authorizequeries})@post('par",{"_index":654,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorizeservice",{"_index":669,"title":{"injectables/AuthorizeService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["authresponse",{"_index":469,"title":{"interfaces/AuthResponse.html":{}},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"coverage.html":{}}}],["authserver",{"_index":770,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/.well",{"_index":778,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize",{"_index":777,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/challenge",{"_index":787,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/par",{"_index":783,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/token",{"_index":775,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authservice",{"_index":363,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"index.html":{}}}],["authtype",{"_index":3883,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["authz",{"_index":2768,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authzmetadata",{"_index":720,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/WellKnownController.html":{}}}],["authzmetadata(session",{"_index":733,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/WellKnownController.html":{}}}],["autoloadentities",{"_index":1651,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["autologging",{"_index":248,"title":{},"body":{"modules/AppModule.html":{}}}],["automatic",{"_index":2559,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["available",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/KeycloakClientsProvider.html":{},"entities/StatusListEntity.html":{},"modules.html":{}}}],["avoid",{"_index":1248,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["await",{"_index":533,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":3226,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["axios",{"_index":4123,"title":{},"body":{"dependencies.html":{}}}],["back",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{}}}],["backend",{"_index":1045,"title":{},"body":{"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{}}}],["background_color",{"_index":1136,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["background_image",{"_index":1138,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["badgateway/oauth2",{"_index":3055,"title":{},"body":{"injectables/RegistrarService.html":{},"dependencies.html":{}}}],["base",{"_index":4305,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base/realm",{"_index":457,"title":{},"body":{"modules/AuthModule.html":{}}}],["base64",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FileStorage.html":{},"injectables/ResolverService.html":{}}}],["base64credentials",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{}}}],["base64url",{"_index":4347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base_validation_schema",{"_index":4085,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["base_validation_schema.concat",{"_index":4395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":1381,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["basedir",{"_index":2496,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["baseurl",{"_index":2385,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"injectables/RegistrarService.html":{}}}],["basic",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["batch",{"_index":1298,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{}}}],["batch_credential_issuance",{"_index":1287,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["batch_size",{"_index":1308,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["batchsize",{"_index":1977,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["bearer",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/TokenResponse.html":{}}}],["before",{"_index":847,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"injectables/KeycloakClientsProvider.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["being",{"_index":3349,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["belong",{"_index":1029,"title":{},"body":{"entities/ClientEntity.html":{},"controllers/StorageController.html":{}}}],["belongs",{"_index":1012,"title":{},"body":{"entities/ClientEntity.html":{},"entities/StatusListEntity.html":{}}}],["better",{"_index":3886,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["between",{"_index":477,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["binary",{"_index":1814,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["binding",{"_index":1408,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["bindings",{"_index":1991,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["bit",{"_index":2401,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["bits",{"_index":3597,"title":{},"body":{"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["bitsperstatus",{"_index":3598,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["body",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"interfaces/FileStorage.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/TenantController.html":{}}}],["body.auth_session",{"_index":848,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.client_id",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{}}}],["body.client_secret",{"_index":532,"title":{},"body":{"injectables/AuthService.html":{}}}],["body.grant_type",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{}}}],["body.issuer_state",{"_index":840,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.privatekey",{"_index":1600,"title":{},"body":{"classes/DBKeyService.html":{}}}],["body.requestid",{"_index":2873,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body.response",{"_index":2800,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["body.response_type",{"_index":2137,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["body.webhook",{"_index":2874,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["boolean",{"_index":28,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"guards/RolesGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["both",{"_index":684,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["bound",{"_index":3128,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["break",{"_index":869,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["browse",{"_index":4214,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":4212,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":3213,"title":{},"body":{"classes/S3FileStorage.html":{},"miscellaneous/variables.html":{}}}],["buffer",{"_index":1790,"title":{},"body":{"interfaces/FileStorage.html":{},"controllers/IssuerManagementController.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"classes/S3FileStorage.html":{}}}],["buffer.from",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{}}}],["buffer.from(signature).tostring(\"base64url",{"_index":4344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer.from(signaturebase64url",{"_index":4346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bugs",{"_index":4221,"title":{},"body":{"properties.html":{}}}],["builder/querypartialentity",{"_index":3539,"title":{},"body":{"injectables/SessionService.html":{}}}],["cache",{"_index":2244,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/WellKnownService.html":{}}}],["call",{"_index":3084,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["callback",{"_index":478,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{}}}],["callbacks",{"_index":604,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["called",{"_index":3047,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["callhandler",{"_index":3360,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["canactivate",{"_index":2186,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":2190,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canonical",{"_index":1801,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["cascade",{"_index":897,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["cascading",{"_index":3833,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["case",{"_index":865,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["catch",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"classes/S3FileStorage.html":{}}}],["catch(err",{"_index":2419,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["catcherror",{"_index":3375,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["catcherror((error",{"_index":3403,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["cats",{"_index":3711,"title":{},"body":{"controllers/StorageController.html":{}}}],["cb",{"_index":2250,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cb(err",{"_index":2254,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cert",{"_index":1255,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["cert.crt",{"_index":2364,"title":{},"body":{"classes/KeyService.html":{}}}],["cert.id",{"_index":1628,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/RegistrarService.html":{}}}],["cert.publickey.export",{"_index":3177,"title":{},"body":{"injectables/ResolverService.html":{}}}],["cert.revoked",{"_index":3133,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cert.subjectaltname?.includes(new",{"_index":3173,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certentity",{"_index":878,"title":{"entities/CertEntity.html":{}},"body":{"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"coverage.html":{}}}],["certificate",{"_index":7,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["certificatechainlength",{"_index":2779,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["certificates",{"_index":882,"title":{},"body":{"entities/CertEntity.html":{},"injectables/RegistrarService.html":{}}}],["certificatetype",{"_index":903,"title":{},"body":{"entities/CertEntity.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["certrepository",{"_index":1545,"title":{},"body":{"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{}}}],["certs",{"_index":3129,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["certs?.length",{"_index":3135,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["certs[0",{"_index":3172,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certs[0].jwt",{"_index":3136,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cfg",{"_index":453,"title":{},"body":{"modules/AuthModule.html":{},"injectables/KeycloakClientsProvider.html":{},"modules/StorageModule.html":{}}}],["cfg.get",{"_index":3746,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"oidc",{"_index":456,"title":{},"body":{"modules/AuthModule.html":{}}}],["cfg.get(\"s3_bucket",{"_index":3752,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_endpoint",{"_index":3744,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_public_base_url",{"_index":3753,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_region",{"_index":3743,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"storage_driver",{"_index":3741,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.getorthrow(\"local_storage_dir",{"_index":3754,"title":{},"body":{"modules/StorageModule.html":{}}}],["chain",{"_index":3168,"title":{},"body":{"injectables/ResolverService.html":{}}}],["challenge",{"_index":646,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["check",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["checked",{"_index":855,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["checking",{"_index":3634,"title":{},"body":{"injectables/StatusListService.html":{}}}],["checks",{"_index":1919,"title":{},"body":{"controllers/HealthController.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/RegistrarService.html":{}}}],["checksum",{"_index":1798,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{}}}],["checksumsha256",{"_index":3235,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["checl",{"_index":3178,"title":{},"body":{"injectables/ResolverService.html":{}}}],["child",{"_index":2071,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["children",{"_index":1269,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{}}}],["claim",{"_index":2447,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["claim.name",{"_index":2453,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["claim.value",{"_index":2452,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["claims",{"_index":81,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"injectables/AuthService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["claims?.[credentialconfigurationid",{"_index":1431,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["claims_supported",{"_index":582,"title":{},"body":{"injectables/AuthService.html":{}}}],["claimsquery",{"_index":59,"title":{"classes/ClaimsQuery.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["claimswebhook",{"_index":1978,"title":{},"body":{"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["class",{"_index":33,"title":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientSecretResponseDto.html":{},"classes/ClientView.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayCreateDto.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/FileUploadDto.html":{},"classes/IssuanceDto.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RoleDto.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/ClientSecretResponseDto.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/InternalClientsProvider.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":35,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientSecretResponseDto.html":{},"classes/ClientView.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayCreateDto.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/FileUploadDto.html":{},"classes/IssuanceDto.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RoleDto.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"index.html":{}}}],["clear",{"_index":2816,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"controllers/ClientController.html":{},"entities/ClientEntity.html":{},"injectables/InternalClientsProvider.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["client.dto",{"_index":987,"title":{},"body":{"controllers/ClientController.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["client.dto.ts",{"_index":1060,"title":{},"body":{"classes/CreateClientDto.html":{},"coverage.html":{}}}],["client.provider",{"_index":988,"title":{},"body":{"controllers/ClientController.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["client.tenant",{"_index":3780,"title":{},"body":{"entities/TenantEntity.html":{}}}],["client.tenantid",{"_index":549,"title":{},"body":{"injectables/AuthService.html":{}}}],["client/adapters/internal",{"_index":434,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["client/adapters/keycloak",{"_index":437,"title":{},"body":{"modules/AuthModule.html":{}}}],["client/client.controller",{"_index":438,"title":{},"body":{"modules/AuthModule.html":{}}}],["client/client.provider",{"_index":441,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["client/entities/client.entity",{"_index":443,"title":{},"body":{"modules/AuthModule.html":{},"entities/TenantEntity.html":{}}}],["client/lib/utils/auth",{"_index":2381,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["client_credentials",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["client_id",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"injectables/Oid4vpService.html":{}}}],["client_metadata",{"_index":2752,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_name",{"_index":2761,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_secret",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{}}}],["client_secret_basic",{"_index":576,"title":{},"body":{"injectables/AuthService.html":{}}}],["client_secret_post",{"_index":577,"title":{},"body":{"injectables/AuthService.html":{}}}],["clientcontroller",{"_index":417,"title":{"controllers/ClientController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/ClientController.html":{},"coverage.html":{}}}],["clientcredentialsdto",{"_index":325,"title":{"classes/ClientCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["cliententity",{"_index":442,"title":{"entities/ClientEntity.html":{}},"body":{"modules/AuthModule.html":{},"entities/ClientEntity.html":{},"classes/CreateClientDto.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{},"entities/TenantEntity.html":{},"coverage.html":{}}}],["clientid",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"entities/ClientEntity.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["clientrepo",{"_index":2368,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["clients",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ClientController.html":{},"classes/CreateTenantDto.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/enumerations.html":{}}}],["clients.service",{"_index":435,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["clients.service.ts",{"_index":1934,"title":{},"body":{"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{},"coverage.html":{}}}],["clients.service.ts:12",{"_index":1936,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["clients.service.ts:138",{"_index":2377,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["clients.service.ts:15",{"_index":1941,"title":{},"body":{"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["clients.service.ts:22",{"_index":2376,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["clients.service.ts:23",{"_index":1939,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["clients.service.ts:28",{"_index":1938,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["clients.service.ts:33",{"_index":1940,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["clients.service.ts:38",{"_index":1937,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["clients.service.ts:45",{"_index":1942,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["clients.service.ts:49",{"_index":1943,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["clients.service.ts:51",{"_index":2373,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["clients.service.ts:66",{"_index":2371,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["clients.service.ts:72",{"_index":2370,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["clients.service.ts:77",{"_index":2372,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["clients.service.ts:81",{"_index":2369,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["clients:manage",{"_index":4167,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["clients[0].secret",{"_index":2433,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["clients_provider",{"_index":439,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ClientController.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["clientsecret",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/RegistrarService.html":{}}}],["clientsecretresponsedto",{"_index":989,"title":{"classes/ClientSecretResponseDto.html":{}},"body":{"controllers/ClientController.html":{},"classes/ClientSecretResponseDto.html":{},"coverage.html":{}}}],["clientsprovider",{"_index":440,"title":{"interfaces/ClientsProvider.html":{}},"body":{"modules/AuthModule.html":{},"controllers/ClientController.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["clientview",{"_index":1033,"title":{"classes/ClientView.html":{}},"body":{"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{},"coverage.html":{}}}],["cloudfront",{"_index":3230,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["cluster_appmodule",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_providers",{"_index":169,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_authmodule",{"_index":406,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_exports",{"_index":407,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_imports",{"_index":408,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_providers",{"_index":409,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule",{"_index":1474,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule_exports",{"_index":1475,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule_providers",{"_index":1476,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptomodule",{"_index":1519,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_cryptomodule_exports",{"_index":1520,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_cryptomodule_providers",{"_index":1521,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_issuermodule",{"_index":2149,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_exports",{"_index":2152,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_imports",{"_index":2150,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_providers",{"_index":2151,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule",{"_index":2689,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule_exports",{"_index":2691,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule_imports",{"_index":2690,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["cluster_oid4vpmodule_providers",{"_index":2692,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_presentationsmodule",{"_index":2891,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_exports",{"_index":2894,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_imports",{"_index":2892,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_providers",{"_index":2893,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_registrarmodule",{"_index":3003,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_registrarmodule_exports",{"_index":3006,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_registrarmodule_imports",{"_index":3004,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["cluster_registrarmodule_providers",{"_index":3005,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_resolvermodule",{"_index":3149,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_resolvermodule_exports",{"_index":3150,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_resolvermodule_providers",{"_index":3151,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_sessionmodule",{"_index":3473,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_sessionmodule_exports",{"_index":3475,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_sessionmodule_imports",{"_index":3474,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_sessionmodule_providers",{"_index":3476,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_statuslistmodule",{"_index":3607,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_statuslistmodule_exports",{"_index":3608,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_statuslistmodule_imports",{"_index":3610,"title":{},"body":{"modules/StatusListModule.html":{}}}],["cluster_statuslistmodule_providers",{"_index":3609,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_verifiermodule",{"_index":3856,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cluster_verifiermodule_imports",{"_index":3857,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cnf",{"_index":1458,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["cnonce",{"_index":824,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["cnonceexpiresin",{"_index":834,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["code",{"_index":601,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/Session.html":{}}}],["code_challenge",{"_index":699,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_method",{"_index":700,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_methods_supported",{"_index":784,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["colorize",{"_index":253,"title":{},"body":{"modules/AppModule.html":{}}}],["column",{"_index":909,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["column(\"boolean",{"_index":1140,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["column(\"date",{"_index":3311,"title":{},"body":{"entities/Session.html":{}}}],["column(\"int",{"_index":953,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["column(\"json",{"_index":954,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["column(\"varchar",{"_index":912,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["column('date",{"_index":3278,"title":{},"body":{"entities/Session.html":{}}}],["column('int",{"_index":3599,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["column('json",{"_index":1081,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["column('json')@validatenested()@apiproperty({oneof",{"_index":1981,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["column('json')@validatenested()@type(undefined",{"_index":1085,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/PresentationConfig.html":{}}}],["column('varchar",{"_index":890,"title":{},"body":{"entities/CertEntity.html":{},"entities/FileEntity.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/TenantEntity.html":{}}}],["column({nullable",{"_index":1025,"title":{},"body":{"entities/ClientEntity.html":{}}}],["column({type",{"_index":3687,"title":{},"body":{"entities/StatusMapping.html":{}}}],["combined",{"_index":4405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commonoptions",{"_index":1649,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["comparison",{"_index":3140,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["compatible",{"_index":4389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["complete",{"_index":2922,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["completed",{"_index":3307,"title":{},"body":{"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["completion",{"_index":3443,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["components",{"_index":1634,"title":{},"body":{"classes/DBKeyService.html":{}}}],["computed",{"_index":3237,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["concat(config_validation_schema",{"_index":4397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(crypto_validation_schema",{"_index":4401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(db_validation_schema",{"_index":4396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(issuer_validation_schema",{"_index":4402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(key_validation_schema",{"_index":4400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(log_validation_schema",{"_index":4398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(registrar_validation_schema",{"_index":4399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(session_validation_schema",{"_index":4403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(storage_validation_schema",{"_index":4404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["condition",{"_index":3516,"title":{},"body":{"injectables/SessionService.html":{}}}],["conditions",{"_index":4177,"title":{},"body":{"miscellaneous/functions.html":{}}}],["config",{"_index":117,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["config.dto",{"_index":2004,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.dto.ts",{"_index":591,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["config.dto.ts:21",{"_index":624,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["config.dto.ts:29",{"_index":626,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["config.dto.ts:41",{"_index":2851,"title":{},"body":{"classes/PresentationDuringIssuanceConfig.html":{}}}],["config.dto.ts:49",{"_index":623,"title":{},"body":{"classes/AuthenticationMethodPresentation.html":{}}}],["config.dto.ts:53",{"_index":621,"title":{},"body":{"classes/AuthenticationMethodPresentation.html":{}}}],["config.dto.ts:59",{"_index":597,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{}}}],["config.dto.ts:63",{"_index":595,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{}}}],["config.dto.ts:69",{"_index":620,"title":{},"body":{"classes/AuthenticationMethodNone.html":{}}}],["config.entity",{"_index":63,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationConfigCreateDto.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{}}}],["config.entity.ts",{"_index":914,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["config.entity.ts:105",{"_index":1643,"title":{},"body":{"classes/DCQL.html":{}}}],["config.entity.ts:111",{"_index":1641,"title":{},"body":{"classes/DCQL.html":{}}}],["config.entity.ts:114",{"_index":1982,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:123",{"_index":1988,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:124",{"_index":2839,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:129",{"_index":2000,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:131",{"_index":2843,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:137",{"_index":2842,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:138",{"_index":1987,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:145",{"_index":2837,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:147",{"_index":1998,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:153",{"_index":2840,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:156",{"_index":1985,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:161",{"_index":2835,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:164",{"_index":1996,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:169",{"_index":2841,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:177",{"_index":2846,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:183",{"_index":2834,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:189",{"_index":2844,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:199",{"_index":2833,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:31",{"_index":2831,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["config.entity.ts:34",{"_index":2830,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["config.entity.ts:38",{"_index":2829,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["config.entity.ts:44",{"_index":3838,"title":{},"body":{"classes/TrustedAuthorityQuery.html":{}}}],["config.entity.ts:48",{"_index":3840,"title":{},"body":{"classes/TrustedAuthorityQuery.html":{}}}],["config.entity.ts:49",{"_index":1997,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:55",{"_index":1310,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["config.entity.ts:56",{"_index":1999,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:58",{"_index":1309,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["config.entity.ts:62",{"_index":1313,"title":{},"body":{"classes/CredentialQuery.html":{},"entities/IssuanceConfig.html":{}}}],["config.entity.ts:65",{"_index":1311,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["config.entity.ts:70",{"_index":1994,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:71",{"_index":1315,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["config.entity.ts:77",{"_index":915,"title":{},"body":{"classes/ClaimsQuery.html":{}}}],["config.entity.ts:80",{"_index":916,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/IssuanceConfig.html":{}}}],["config.entity.ts:84",{"_index":918,"title":{},"body":{"classes/ClaimsQuery.html":{}}}],["config.entity.ts:94",{"_index":1318,"title":{},"body":{"classes/CredentialSetQuery.html":{}}}],["config.entity.ts:98",{"_index":1320,"title":{},"body":{"classes/CredentialSetQuery.html":{}}}],["config.id",{"_index":1417,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["config.keyid",{"_index":1254,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.oidc",{"_index":4266,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config.service",{"_index":1336,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["config.service.ts",{"_index":1168,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["config.service.ts:149",{"_index":1193,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:158",{"_index":1186,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:17",{"_index":2542,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:171",{"_index":1189,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:18",{"_index":1176,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:185",{"_index":1195,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:198",{"_index":1179,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:23",{"_index":2551,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:34",{"_index":1190,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:47",{"_index":2553,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:59",{"_index":2543,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:63",{"_index":2550,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:67",{"_index":2549,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:71",{"_index":2548,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:75",{"_index":2546,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:79",{"_index":2545,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:86",{"_index":2554,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:94",{"_index":2558,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config/credential",{"_index":1167,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["config_folder",{"_index":4313,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config_import",{"_index":4306,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config_import_force",{"_index":4311,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config_validation_schema",{"_index":4076,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["configmodule",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configmodule.forroot",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["configpath",{"_index":1209,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["configs",{"_index":1191,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["configservice",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["configservice.get",{"_index":235,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configservice.get(\"jwt_issuer",{"_index":2264,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"jwt_secret",{"_index":2258,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"log_level",{"_index":247,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"oidc",{"_index":2231,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"oidc_algorithm",{"_index":2256,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"oidc_internal_issuer_url",{"_index":2240,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.getorthrow(\"db_database",{"_index":1661,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_host",{"_index":1653,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_password",{"_index":1659,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_port",{"_index":1655,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_username",{"_index":1657,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"folder",{"_index":287,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configservie",{"_index":1509,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["configurable",{"_index":552,"title":{},"body":{"injectables/AuthService.html":{}}}],["configuration",{"_index":88,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["configuration(@token",{"_index":2877,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configuration(user",{"_index":2856,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configurations",{"_index":1156,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["configured",{"_index":458,"title":{},"body":{"modules/AuthModule.html":{},"injectables/CryptoImplementationService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationRequest.html":{},"injectables/SessionService.html":{}}}],["conflictexception",{"_index":751,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{}}}],["conflictexception(\"certificate",{"_index":2365,"title":{},"body":{"classes/KeyService.html":{}}}],["conflictexception(\"issuer",{"_index":3184,"title":{},"body":{"injectables/ResolverService.html":{}}}],["conflictexception(\"no",{"_index":2802,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["conflictexception(`request",{"_index":2968,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["connect",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["connect/certs",{"_index":2243,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["connect/token",{"_index":3074,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["connection",{"_index":1920,"title":{},"body":{"controllers/HealthController.html":{}}}],["console.error",{"_index":2251,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{}}}],["console.error(\"error",{"_index":3119,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["console.error('error",{"_index":2420,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["console.log('session",{"_index":2668,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["console.log(err",{"_index":2978,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["console.log(tenantid",{"_index":3115,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["console.warn",{"_index":1882,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["const",{"_index":233,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"classes/DisplayCreateDto.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/RolesGuard.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateKeyDto.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["constraints",{"_index":1261,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["constructor",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/RolesGuard.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["constructor(@inject(clients_provider",{"_index":993,"title":{},"body":{"controllers/ClientController.html":{}}}],["constructor(basedir",{"_index":2494,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["constructor(cfg",{"_index":2367,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["constructor(clients",{"_index":3792,"title":{},"body":{"injectables/TenantService.html":{}}}],["constructor(configservice",{"_index":727,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/DBKeyService.html":{},"injectables/InternalClientsProvider.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["constructor(configservie",{"_index":1507,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["constructor(credentialconfigrepository",{"_index":1173,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["constructor(cryptoservice",{"_index":1372,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["constructor(displayrepository",{"_index":1706,"title":{},"body":{"injectables/DisplayService.html":{}}}],["constructor(httpservice",{"_index":2912,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/WebhookService.html":{}}}],["constructor(issuanceconfigrepo",{"_index":2034,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["constructor(jwtservice",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(keyrepository",{"_index":1739,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["constructor(logger",{"_index":3431,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["constructor(oid4vciservice",{"_index":3950,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["constructor(private",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CryptoImplementationService.html":{},"controllers/DisplayController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/ResolverService.html":{},"guards/RolesGuard.html":{},"injectables/SessionPipe.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{}}}],["constructor(reflector",{"_index":2187,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["constructor(s3",{"_index":3211,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["constructor(sessionrepository",{"_index":3496,"title":{},"body":{"injectables/SessionService.html":{}}}],["constructor(sessionservice",{"_index":3484,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["constructor(storage",{"_index":1821,"title":{},"body":{"injectables/FilesService.html":{}}}],["containing",{"_index":481,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["content",{"_index":274,"title":{},"body":{"modules/AppModule.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["contenttype",{"_index":1796,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":2192,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/Oid4vpService.html":{},"guards/RolesGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["context.flowtype",{"_index":3459,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.getclass",{"_index":2200,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":2199,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["context.sessionid",{"_index":3461,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.switchtohttp().getrequest",{"_index":3202,"title":{},"body":{"guards/RolesGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":3382,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.tenantid",{"_index":3462,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.ts",{"_index":3346,"title":{},"body":{"interfaces/SessionLogContext.html":{},"coverage.html":{}}}],["context.ts:21",{"_index":3348,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["continue",{"_index":1236,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["controller",{"_index":139,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/DisplayController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/DisplayController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"injectables/SessionPipe.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["controller(\":session/.well",{"_index":3933,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["controller(\":session/authorize",{"_index":675,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["controller(\":session/oid4vp",{"_index":2685,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["controller(\":session/vci",{"_index":2655,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["controller(\":tenantid/credentials",{"_index":1359,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["controller(\":tenantid/status",{"_index":3589,"title":{},"body":{"controllers/StatusListController.html":{}}}],["controller(\"display",{"_index":1685,"title":{},"body":{"controllers/DisplayController.html":{}}}],["controller(\"health",{"_index":1926,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(\"issuer",{"_index":1338,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["controller(\"key",{"_index":2304,"title":{},"body":{"controllers/KeyController.html":{}}}],["controller(\"presentation",{"_index":2870,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["controller(\"session",{"_index":3337,"title":{},"body":{"controllers/SessionController.html":{}}}],["controller(\"storage",{"_index":3722,"title":{},"body":{"controllers/StorageController.html":{}}}],["controller(\"tenant",{"_index":3770,"title":{},"body":{"controllers/TenantController.html":{}}}],["controller('client",{"_index":992,"title":{},"body":{"controllers/ClientController.html":{}}}],["controllers",{"_index":141,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"modules/CryptoModule.html":{},"controllers/DisplayController.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["convert",{"_index":1629,"title":{},"body":{"classes/DBKeyService.html":{}}}],["coordinate",{"_index":1728,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["copy",{"_index":3409,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["correct",{"_index":856,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["count",{"_index":3562,"title":{},"body":{"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["counter",{"_index":1221,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["coverage",{"_index":3976,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covered",{"_index":3124,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["create",{"_index":971,"title":{},"body":{"controllers/ClientController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["create(session",{"_index":3505,"title":{},"body":{"injectables/SessionService.html":{}}}],["create(tenantid",{"_index":1548,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"classes/KeyService.html":{}}}],["create.dto",{"_index":1207,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["create.dto.ts",{"_index":1150,"title":{},"body":{"classes/CredentialConfigCreate.html":{},"classes/DisplayCreateDto.html":{},"classes/PresentationConfigCreateDto.html":{},"coverage.html":{}}}],["create_authorization_request",{"_index":2729,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest",{"_index":2699,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest(session",{"_index":2704,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationservermetadata",{"_index":774,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["createclient",{"_index":962,"title":{},"body":{"controllers/ClientController.html":{}}}],["createclient(@body",{"_index":1001,"title":{},"body":{"controllers/ClientController.html":{}}}],["createclient(createclientdto",{"_index":967,"title":{},"body":{"controllers/ClientController.html":{}}}],["createclientdto",{"_index":968,"title":{"classes/CreateClientDto.html":{}},"body":{"controllers/ClientController.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{},"coverage.html":{}}}],["created",{"_index":889,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"entities/IssuanceConfig.html":{},"injectables/KeycloakClientsProvider.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["created.id",{"_index":2460,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["createdat",{"_index":883,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["createdatecolumn",{"_index":886,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["createdisplay",{"_index":1674,"title":{},"body":{"controllers/DisplayController.html":{}}}],["createdisplay(user",{"_index":1676,"title":{},"body":{"controllers/DisplayController.html":{}}}],["createdsession",{"_index":3560,"title":{},"body":{"injectables/SessionService.html":{}}}],["createdsession.issuanceid",{"_index":3565,"title":{},"body":{"injectables/SessionService.html":{}}}],["createdsession.tenantid",{"_index":3564,"title":{},"body":{"injectables/SessionService.html":{}}}],["createentry",{"_index":3619,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createentry(session",{"_index":3626,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createhash('sha256').update(bufferorstreamtobuffer(body)).digest('base64",{"_index":1857,"title":{},"body":{"injectables/FilesService.html":{}}}],["createheaderandpayload",{"_index":3642,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createlist",{"_index":3620,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createlist(entry",{"_index":3629,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createparamdecorator",{"_index":1969,"title":{},"body":{"interfaces/InternalTokenPayload.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["createreadstream",{"_index":2501,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createreadstream(fullpath",{"_index":2527,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createrequest",{"_index":2700,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createrequest(requestid",{"_index":2709,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["creates",{"_index":1494,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{}}}],["createtenant",{"_index":3790,"title":{},"body":{"injectables/TenantService.html":{}}}],["createtenant(data",{"_index":3796,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["createtenantdto",{"_index":1064,"title":{"classes/CreateTenantDto.html":{}},"body":{"classes/CreateTenantDto.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["createwritestream",{"_index":2502,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createwritestream(fullpath",{"_index":2516,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["creation",{"_index":952,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["credential",{"_index":607,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["credential(req",{"_index":2638,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["credential.issuanceconfigs",{"_index":2005,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["credential.issuanceconfigs)@jointable",{"_index":1989,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["credential_configurations_supported",{"_index":1288,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{}}}],["credential_creation",{"_index":3468,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_endpoint",{"_index":1289,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["credential_ids",{"_index":928,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["credential_issuance",{"_index":3467,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_issuer",{"_index":1290,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["credential_revoked",{"_index":2598,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["credential_set",{"_index":947,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["credential_sets",{"_index":83,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["credential_signing_alg_values_supported",{"_index":1413,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credential_verification",{"_index":3470,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credentialconfig",{"_index":1071,"title":{"entities/CredentialConfig.html":{}},"body":{"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialconfig).key",{"_index":1265,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["credentialconfig.schema",{"_index":1472,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct",{"_index":1466,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct.vct",{"_index":1468,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigcreate",{"_index":1148,"title":{"classes/CredentialConfigCreate.html":{}},"body":{"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"coverage.html":{}}}],["credentialconfigid",{"_index":2084,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialconfigids",{"_index":1164,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{}}}],["credentialconfigmapping",{"_index":1153,"title":{"classes/CredentialConfigMapping.html":{}},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"coverage.html":{}}}],["credentialconfigrepo",{"_index":1374,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigrepository",{"_index":1177,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["credentialconfigs",{"_index":1161,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{}}}],["credentialconfigservice",{"_index":1165,"title":{"injectables/CredentialConfigService.html":{}},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"index.html":{}}}],["credentialconfiguration",{"_index":1427,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.claims",{"_index":1433,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.disclosureframe",{"_index":1434,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.keybinding",{"_index":1459,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.lifetime",{"_index":1457,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.statusmanagement",{"_index":1450,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration?.keyid",{"_index":1435,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigurationid",{"_index":1382,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["credentialconfigurationids",{"_index":2613,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["credentialconfigurationsupported",{"_index":1390,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigurationsupported).vct",{"_index":1420,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialcount",{"_index":2813,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialid",{"_index":1389,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialissuer",{"_index":3968,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["credentialissuermetadatadto",{"_index":1280,"title":{"classes/CredentialIssuerMetadataDto.html":{}},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["credentialofferobject",{"_index":3286,"title":{},"body":{"entities/Session.html":{}}}],["credentialpayload",{"_index":3267,"title":{},"body":{"entities/Session.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["credentialquery",{"_index":60,"title":{"classes/CredentialQuery.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["credentialresponse",{"_index":2650,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["credentials",{"_index":82,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/NoneTrustPolicy.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["credentials.dto",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":1006,"title":{},"body":{"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:5",{"_index":1007,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.dto.ts:7",{"_index":1008,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.length",{"_index":2812,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentials.push(credential",{"_index":2087,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentials.split",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{}}}],["credentials/credential",{"_index":2051,"title":{},"body":{"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials/credentials.controller",{"_index":2169,"title":{},"body":{"modules/IssuerModule.html":{}}}],["credentials/credentials.service",{"_index":1358,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{}}}],["credentials/entities/credential.entity",{"_index":2002,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials?.length",{"_index":2814,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialsconfigservice",{"_index":2035,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialscontroller",{"_index":1321,"title":{"controllers/CredentialsController.html":{}},"body":{"controllers/CredentialsController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialsetquery",{"_index":61,"title":{"classes/CredentialSetQuery.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["credentialsmetadatacontroller",{"_index":1347,"title":{"controllers/CredentialsMetadataController.html":{}},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialsservice",{"_index":1340,"title":{"injectables/CredentialsService.html":{}},"body":{"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"index.html":{}}}],["credentialtype",{"_index":3437,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["creds",{"_index":2389,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["cron",{"_index":3520,"title":{},"body":{"injectables/SessionService.html":{}}}],["crt",{"_index":15,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{}}}],["crv",{"_index":1719,"title":{},"body":{"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["crypto",{"_index":1262,"title":{},"body":{"injectables/CredentialConfigService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["crypto.service",{"_index":1525,"title":{},"body":{"modules/CryptoModule.html":{},"controllers/KeyController.html":{}}}],["crypto.webcrypto.subtle.exportkey",{"_index":4338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.generatekey",{"_index":4337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.importkey",{"_index":4341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.sign",{"_index":4342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.verify",{"_index":4349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto/crypto.module",{"_index":209,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}}}],["crypto/crypto.service",{"_index":758,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WellKnownService.html":{}}}],["crypto/encryption/encryption.service",{"_index":2714,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["crypto/key/crypto",{"_index":1402,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/WellKnownService.html":{}}}],["crypto/key/dto/key",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{}}}],["crypto/key/entities/cert.entity",{"_index":1127,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["crypto/key/key.module",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto_alg",{"_index":4317,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto_validation_schema",{"_index":4026,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptographic",{"_index":3029,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cryptographic_binding_methods_supported",{"_index":1414,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["cryptoimplementatationmodule",{"_index":1473,"title":{"modules/CryptoImplementatationModule.html":{}},"body":{"modules/CryptoImplementatationModule.html":{},"modules/KeyModule.html":{},"index.html":{},"modules.html":{}}}],["cryptoimplementation",{"_index":1479,"title":{"interfaces/CryptoImplementation.html":{}},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptoimplementationservice",{"_index":1375,"title":{"injectables/CryptoImplementationService.html":{}},"body":{"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["cryptokey",{"_index":1583,"title":{},"body":{"classes/DBKeyService.html":{}}}],["cryptomodule",{"_index":171,"title":{"modules/CryptoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["cryptoservice",{"_index":728,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["cryptoservice.getcrypto",{"_index":1599,"title":{},"body":{"classes/DBKeyService.html":{}}}],["cryptotype",{"_index":1512,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ctx",{"_index":1972,"title":{},"body":{"interfaces/InternalTokenPayload.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1973,"title":{},"body":{"interfaces/InternalTokenPayload.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["current",{"_index":2064,"title":{},"body":{"injectables/IssuanceService.html":{},"entities/TenantEntity.html":{},"miscellaneous/functions.html":{}}}],["curve",{"_index":1716,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["customprops",{"_index":262,"title":{},"body":{"modules/AppModule.html":{}}}],["d",{"_index":1603,"title":{},"body":{"classes/DBKeyService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["data",{"_index":483,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"interfaces/CryptoImplementation.html":{},"classes/DCQL.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"interfaces/InternalTokenPayload.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["data')@apibody({description",{"_index":3710,"title":{},"body":{"controllers/StorageController.html":{}}}],["data.roles",{"_index":3824,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["database",{"_index":1660,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"miscellaneous/variables.html":{}}}],["database/database.module",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":172,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"index.html":{},"modules.html":{}}}],["date",{"_index":885,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["date().gettime",{"_index":1453,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["date().toisostring().slice(0",{"_index":1852,"title":{},"body":{"injectables/FilesService.html":{}}}],["date(date.now",{"_index":3577,"title":{},"body":{"injectables/SessionService.html":{}}}],["date(token.expiresat",{"_index":3093,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["date.gettime",{"_index":3103,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["date.now",{"_index":2399,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["day",{"_index":3532,"title":{},"body":{"injectables/SessionService.html":{}}}],["db",{"_index":1927,"title":{},"body":{"controllers/HealthController.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["db_database",{"_index":4332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_host",{"_index":4324,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_password",{"_index":4331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_port",{"_index":4328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_type",{"_index":1648,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_username",{"_index":4330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_validation_schema",{"_index":4033,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbkeyservice",{"_index":1532,"title":{"classes/DBKeyService.html":{}},"body":{"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"coverage.html":{}}}],["dbtype",{"_index":1647,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dc+sd",{"_index":2756,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcql",{"_index":946,"title":{"classes/DCQL.html":{}},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["dcql_query",{"_index":955,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["dcql_query.length",{"_index":2744,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcqlquerycount",{"_index":2742,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dd",{"_index":258,"title":{},"body":{"modules/AppModule.html":{}}}],["deal",{"_index":2111,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["debug",{"_index":2575,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["debugging",{"_index":2235,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["declarations",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["declare",{"_index":69,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["decodedvc",{"_index":2970,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.header",{"_index":2973,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.payload",{"_index":2972,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodejwt",{"_index":2382,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["decodejwt(accesstoken",{"_index":2395,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["decorator",{"_index":1971,"title":{},"body":{"interfaces/InternalTokenPayload.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":42,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/FileEntity.html":{},"classes/FileUploadDto.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/RegistrarEntity.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RoleDto.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["decrease",{"_index":3569,"title":{},"body":{"injectables/SessionService.html":{}}}],["decryption",{"_index":1735,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe",{"_index":1736,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe(response",{"_index":1741,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["dedicated",{"_index":2819,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["deeppartial",{"_index":3506,"title":{},"body":{"injectables/SessionService.html":{}}}],["default",{"_index":870,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtService.html":{},"entities/KeyEntity.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["default(\"../../assets/config",{"_index":4314,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"../../tmp",{"_index":4300,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"db",{"_index":4354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"es256",{"_index":4319,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"http://localhost:3000",{"_index":4352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"local",{"_index":4380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"sqlite",{"_index":4322,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(24",{"_index":4375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(60",{"_index":4372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(false",{"_index":4308,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(process.env.node_env",{"_index":4360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default_auth_client_id",{"_index":3987,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_auth_client_secret",{"_index":3988,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_jwt_secret",{"_index":1879,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultmetrics",{"_index":2591,"title":{},"body":{"modules/MetricModule.html":{}}}],["define",{"_index":692,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/PresentationConfigCreateDto.html":{}}}],["defined",{"_index":45,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/ClientSecretResponseDto.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/InternalClientsProvider.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["defines",{"_index":4368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["delete",{"_index":983,"title":{},"body":{"controllers/ClientController.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["delete(\":id",{"_index":1344,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/TenantController.html":{}}}],["delete(':id",{"_index":973,"title":{},"body":{"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/TenantController.html":{}}}],["delete(id",{"_index":3508,"title":{},"body":{"injectables/SessionService.html":{}}}],["delete(key",{"_index":1781,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["delete(tenantid",{"_index":1178,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["deletebytenant",{"_index":1818,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletebytenant(tenantid",{"_index":1826,"title":{},"body":{"injectables/FilesService.html":{}}}],["deleteclient",{"_index":963,"title":{},"body":{"controllers/ClientController.html":{}}}],["deleteclient(@param('id",{"_index":1003,"title":{},"body":{"controllers/ClientController.html":{}}}],["deleteclient(id",{"_index":972,"title":{},"body":{"controllers/ClientController.html":{}}}],["deleteconfiguration",{"_index":2854,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(@param(\"id",{"_index":2880,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(id",{"_index":2858,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleted",{"_index":1825,"title":{},"body":{"injectables/FilesService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["deleteissuanceconfiguration",{"_index":1324,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["deleteissuanceconfiguration(id",{"_index":1327,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{}}}],["deleteissuanceconfiguration(tenantid",{"_index":2038,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["deletekey",{"_index":2288,"title":{},"body":{"controllers/KeyController.html":{}}}],["deletekey(@token",{"_index":2311,"title":{},"body":{"controllers/KeyController.html":{}}}],["deletekey(token",{"_index":2293,"title":{},"body":{"controllers/KeyController.html":{}}}],["deleteobjectcommand",{"_index":3222,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["deletepresentationconfig",{"_index":2907,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletepresentationconfig(id",{"_index":2919,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletes",{"_index":1180,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["deletesession",{"_index":3315,"title":{},"body":{"controllers/SessionController.html":{}}}],["deletesession(id",{"_index":3319,"title":{},"body":{"controllers/SessionController.html":{}}}],["deletetenant",{"_index":3756,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantService.html":{}}}],["deletetenant(@param(\"id",{"_index":3776,"title":{},"body":{"controllers/TenantController.html":{}}}],["deletetenant(id",{"_index":3760,"title":{},"body":{"controllers/TenantController.html":{}}}],["deletetenant(tenantid",{"_index":3798,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["deletion",{"_index":2921,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dependencies",{"_index":161,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"dependencies.html":{},"index.html":{}}}],["desc",{"_index":2965,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"miscellaneous/functions.html":{}}}],["description",{"_index":9,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"entities/ClientEntity.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayImage.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/InternalClientsProvider.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"classes/NoneTrustPolicy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["description(\"application",{"_index":4361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"claim",{"_index":4278,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"client",{"_index":4273,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"database",{"_index":4323,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"enable",{"_index":4259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"expected",{"_index":4284,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"force",{"_index":4312,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"internal",{"_index":4268,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"interval",{"_index":4373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"local",{"_index":4289,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"log",{"_index":4363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"path",{"_index":4315,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"root",{"_index":4301,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"run",{"_index":4309,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"the",{"_index":4320,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"time",{"_index":4376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"whether",{"_index":4391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["details",{"_index":630,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["detection",{"_index":1856,"title":{},"body":{"injectables/FilesService.html":{}}}],["determine",{"_index":1986,"title":{},"body":{"entities/IssuanceConfig.html":{},"miscellaneous/variables.html":{}}}],["different",{"_index":1483,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{}}}],["digest",{"_index":1392,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["direct_post.jwt",{"_index":2751,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["directaccessgrantsenabled",{"_index":2439,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["directory",{"_index":2929,"title":{},"body":{"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["dirname",{"_index":2507,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["disable",{"_index":3096,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["disclosure",{"_index":1096,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["disclosure_policy",{"_index":1425,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["disclosureframe",{"_index":1073,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["discovery",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["discovery.dto",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["discovery.dto.ts",{"_index":3981,"title":{},"body":{"coverage.html":{}}}],["discoveryendpoint",{"_index":3075,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["discriminated",{"_index":1097,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["discriminator",{"_index":134,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["display",{"_index":1134,"title":{"classes/Display.html":{}},"body":{"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"coverage.html":{}}}],["display.service",{"_index":1683,"title":{},"body":{"controllers/DisplayController.html":{}}}],["display/display.controller",{"_index":2171,"title":{},"body":{"modules/IssuerModule.html":{}}}],["display/display.service",{"_index":2172,"title":{},"body":{"modules/IssuerModule.html":{}}}],["display/entities/display.entity",{"_index":2173,"title":{},"body":{"modules/IssuerModule.html":{}}}],["displaycontroller",{"_index":1672,"title":{"controllers/DisplayController.html":{}},"body":{"controllers/DisplayController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["displaycreatedto",{"_index":1678,"title":{"classes/DisplayCreateDto.html":{}},"body":{"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"injectables/DisplayService.html":{},"coverage.html":{}}}],["displaydata",{"_index":1677,"title":{},"body":{"controllers/DisplayController.html":{},"injectables/DisplayService.html":{}}}],["displayentity",{"_index":1691,"title":{"entities/DisplayEntity.html":{}},"body":{"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["displayimage",{"_index":1132,"title":{"classes/DisplayImage.html":{}},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"coverage.html":{}}}],["displayinfo",{"_index":1696,"title":{"classes/DisplayInfo.html":{}},"body":{"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"coverage.html":{}}}],["displaylogo",{"_index":1699,"title":{"classes/DisplayLogo.html":{}},"body":{"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"coverage.html":{}}}],["displayrepository",{"_index":1708,"title":{},"body":{"injectables/DisplayService.html":{}}}],["displayservice",{"_index":1682,"title":{"injectables/DisplayService.html":{}},"body":{"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"index.html":{}}}],["disposition",{"_index":3730,"title":{},"body":{"controllers/StorageController.html":{}}}],["dns",{"_index":3116,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["document",{"_index":3160,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["documentation",{"_index":3977,"title":{},"body":{"coverage.html":{}}}],["documents",{"_index":2918,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["download",{"_index":3704,"title":{},"body":{"controllers/StorageController.html":{}}}],["download(@param(\"key",{"_index":3727,"title":{},"body":{"controllers/StorageController.html":{}}}],["download(key",{"_index":3705,"title":{},"body":{"controllers/StorageController.html":{}}}],["dpop",{"_index":808,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dpop_jkt",{"_index":701,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["dpop_signing_alg_values_supported",{"_index":779,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dpoprequired",{"_index":1979,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["dpopvalue",{"_index":806,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["driver",{"_index":3739,"title":{},"body":{"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["dto",{"_index":472,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"classes/CredentialConfigMapping.html":{},"injectables/InternalClientsProvider.html":{},"classes/IssuanceDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["dto.clientid",{"_index":1962,"title":{},"body":{"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["dto.description",{"_index":2436,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["dto.roles",{"_index":2472,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["dto/auth",{"_index":2953,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dto/authentication",{"_index":2003,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["dto/authorization",{"_index":2683,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["dto/authorize",{"_index":671,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dto/client",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ClientController.html":{}}}],["dto/create",{"_index":986,"title":{},"body":{"controllers/ClientController.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["dto/credential",{"_index":1206,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/WellKnownService.html":{}}}],["dto/display",{"_index":1684,"title":{},"body":{"controllers/DisplayController.html":{},"injectables/DisplayService.html":{}}}],["dto/file",{"_index":3719,"title":{},"body":{"controllers/StorageController.html":{}}}],["dto/issuance.dto",{"_index":2022,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["dto/issuer",{"_index":3163,"title":{},"body":{"injectables/ResolverService.html":{}}}],["dto/jwks",{"_index":3931,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["dto/key",{"_index":1592,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{}}}],["dto/notification",{"_index":2654,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["dto/oauth",{"_index":3932,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["dto/oidc",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/par",{"_index":674,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["dto/presentation",{"_index":2720,"title":{},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["dto/role.dto",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/status",{"_index":3645,"title":{},"body":{"injectables/StatusListService.html":{}}}],["dto/token",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/vp",{"_index":924,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["duration",{"_index":3396,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["duration}ms",{"_index":3402,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["during",{"_index":3888,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["dynamicmodule",{"_index":2330,"title":{},"body":{"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["e",{"_index":1271,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["e!.secret",{"_index":1960,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["e.clientid",{"_index":1955,"title":{},"body":{"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["e.description",{"_index":1956,"title":{},"body":{"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["e.g",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FileStorage.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/S3FileStorage.html":{},"interfaces/SessionLogContext.html":{}}}],["e.message",{"_index":1273,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["e.roles",{"_index":1957,"title":{},"body":{"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["e.tenant?.id",{"_index":1967,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["each",{"_index":70,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"classes/CreateTenantDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["eager",{"_index":3297,"title":{},"body":{"entities/Session.html":{}}}],["easier",{"_index":3138,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["ec",{"_index":1717,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["ec_public",{"_index":1563,"title":{"classes/EC_Public.html":{}},"body":{"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["ecdh",{"_index":1765,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["ecdsa",{"_index":4333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ecdsa_p256",{"_index":4016,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ed25519",{"_index":1517,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["eddsa",{"_index":4336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["effectively",{"_index":4187,"title":{},"body":{"miscellaneous/functions.html":{}}}],["element",{"_index":1239,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["elements",{"_index":1225,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["elliptic",{"_index":1715,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["embedded",{"_index":1095,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["embeddeddisclosurepolicy",{"_index":39,"title":{"classes/EmbeddedDisclosurePolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["embeddeddisclosurepolicy:31",{"_index":46,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["embeddeddisclosurepolicy:42",{"_index":3206,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["embeddeddisclosurepolicy:54",{"_index":2592,"title":{},"body":{"classes/NoneTrustPolicy.html":{}}}],["embeddeddisclosurepolicy:80",{"_index":294,"title":{},"body":{"classes/AttestationBasedPolicy.html":{}}}],["emits",{"_index":3367,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["emitter",{"_index":4106,"title":{},"body":{"dependencies.html":{}}}],["empty",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{},"injectables/StatusListService.html":{}}}],["enabled",{"_index":1448,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"injectables/RegistrarService.html":{}}}],["enabledebugmode",{"_index":2563,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enablehttplogger",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enablesessionlogger",{"_index":2562,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["encodeuri(key",{"_index":3241,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["encodeuricomponent(key)}=${encodeuricomponent(value",{"_index":2790,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["encrypt",{"_index":1746,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"miscellaneous/typealiases.html":{}}}],["encrypted",{"_index":1747,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption",{"_index":1734,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption/encryption.service",{"_index":1526,"title":{},"body":{"modules/CryptoModule.html":{}}}],["encryptionservice",{"_index":1522,"title":{"injectables/EncryptionService.html":{}},"body":{"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"index.html":{}}}],["encrypts",{"_index":1744,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["endpoint",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/HealthController.html":{},"modules/MetricModule.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":636,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/HealthController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["enhanced",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{}}}],["ensure",{"_index":2261,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["entities",{"_index":879,"title":{},"body":{"entities/CertEntity.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/DisplayEntity.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"index.html":{}}}],["entities/cert.entity",{"_index":1594,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{}}}],["entities/client.entity",{"_index":1063,"title":{},"body":{"classes/CreateClientDto.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["entities/credential.entity",{"_index":1152,"title":{},"body":{"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{}}}],["entities/display.entity",{"_index":1692,"title":{},"body":{"classes/DisplayCreateDto.html":{},"injectables/DisplayService.html":{}}}],["entities/files.entity",{"_index":1845,"title":{},"body":{"injectables/FilesService.html":{},"modules/StorageModule.html":{}}}],["entities/issuance",{"_index":1158,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{}}}],["entities/keys.entity",{"_index":1595,"title":{},"body":{"classes/DBKeyService.html":{},"modules/KeyModule.html":{}}}],["entities/presentation",{"_index":2850,"title":{},"body":{"classes/PresentationConfigCreateDto.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["entities/registrar.entity",{"_index":3010,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{}}}],["entities/session.entity",{"_index":3331,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{}}}],["entities/status",{"_index":3612,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["entitites/tenant.entity",{"_index":1070,"title":{},"body":{"classes/CreateTenantDto.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["entity",{"_index":877,"title":{"entities/CertEntity.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{}},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"injectables/SessionPipe.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["entity.clientid",{"_index":1963,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["entity.description",{"_index":1964,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["entity.roles",{"_index":1965,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["entries",{"_index":3044,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["entries.length",{"_index":3683,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry",{"_index":1449,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"miscellaneous/functions.html":{}}}],["entry.bits",{"_index":3662,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.elements",{"_index":3679,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.elements[id",{"_index":3678,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.key",{"_index":1770,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["entry.key.d",{"_index":1769,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["entry.relyingpartyid",{"_index":3130,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["entry.tenantid",{"_index":3663,"title":{},"body":{"injectables/StatusListService.html":{}}}],["enum",{"_index":105,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RoleDto.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":4149,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":2557,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["environments",{"_index":1885,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["equals",{"_index":3261,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals(\"https://json",{"_index":3262,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals(\"object",{"_index":3264,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals('https://json",{"_index":3252,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals('object",{"_index":3259,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["erika",{"_index":2630,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["err",{"_index":2249,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/PresentationsService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["err.message",{"_index":2993,"title":{},"body":{"injectables/PresentationsService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["error",{"_index":844,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["error(\"error",{"_index":3120,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["error(\"issuer",{"_index":3166,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error(\"key",{"_index":3189,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error(\"no",{"_index":2982,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["error(\"stack",{"_index":3675,"title":{},"body":{"injectables/StatusListService.html":{}}}],["error(\"subject",{"_index":3175,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error('credential",{"_index":858,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["error(`error",{"_index":3897,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["error(`invalid",{"_index":1909,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["error(`unsupported",{"_index":1518,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["error.children",{"_index":2069,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["error.children.length",{"_index":2070,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["error.constraints",{"_index":2065,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error.message",{"_index":1910,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.name",{"_index":3405,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.property",{"_index":2077,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error.stack",{"_index":3408,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.value",{"_index":2080,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error_description",{"_index":846,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["errormessages",{"_index":2073,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["errors",{"_index":1260,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerService.html":{}}}],["es",{"_index":1756,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["es256",{"_index":580,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{},"miscellaneous/typealiases.html":{}}}],["es256\").default(\"rs256",{"_index":4283,"title":{},"body":{"miscellaneous/variables.html":{}}}],["es256.getverifier(publickey",{"_index":2975,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["eslint",{"_index":3095,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["eslint/no",{"_index":3099,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["etag",{"_index":1803,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["etsi_tl",{"_index":939,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["eudi",{"_index":4220,"title":{},"body":{"properties.html":{}}}],["eudiplo",{"_index":150,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["event",{"_index":1258,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"classes/NotificationRequestDto.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["events",{"_index":3418,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["example",{"_index":2117,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"classes/RoleDto.html":{}}}],["examples",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{}}}],["exchange",{"_index":660,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["execution",{"_index":3363,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["executioncontext",{"_index":1970,"title":{},"body":{"interfaces/InternalTokenPayload.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1559,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/StatusListService.html":{}}}],["existing",{"_index":2302,"title":{},"body":{"controllers/KeyController.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{}}}],["existingroles",{"_index":2409,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["existingroles.filter(role",{"_index":2412,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["exists",{"_index":1198,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"interfaces/FileStorage.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/StatusListService.html":{}}}],["exists(key",{"_index":1783,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["existssync",{"_index":2503,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["exp",{"_index":586,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["expandvariables",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["expect",{"_index":3873,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["expected",{"_index":2622,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["expectedcode",{"_index":822,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectedpreauthorizedcode",{"_index":817,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectedtxcode",{"_index":819,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectresponse",{"_index":3872,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["expiration",{"_index":1455,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/ParResponseDto.html":{},"miscellaneous/variables.html":{}}}],["expirationdate",{"_index":3092,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["expirationdate.gettime",{"_index":3102,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["expire",{"_index":2262,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expired",{"_index":3308,"title":{},"body":{"entities/Session.html":{},"miscellaneous/enumerations.html":{}}}],["expires_in",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{},"classes/TokenResponse.html":{}}}],["expiresat",{"_index":2791,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["expiresin",{"_index":551,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["expiresinseconds",{"_index":831,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expiry",{"_index":2402,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["export",{"_index":30,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/ClientSecretResponseDto.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["exportable",{"_index":1617,"title":{},"body":{"classes/DBKeyService.html":{}}}],["exportjwk",{"_index":1584,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{}}}],["exportjwk(secret.privatekey",{"_index":1759,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exports",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["exportspki",{"_index":1585,"title":{},"body":{"classes/DBKeyService.html":{}}}],["exportspki(publickeyinstance",{"_index":1637,"title":{},"body":{"classes/DBKeyService.html":{}}}],["expose",{"_index":2457,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["express",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"controllers/StorageController.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["express.multer.file",{"_index":1833,"title":{},"body":{"injectables/FilesService.html":{},"controllers/StorageController.html":{}}}],["ext",{"_index":1607,"title":{},"body":{"classes/DBKeyService.html":{}}}],["extend",{"_index":929,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["extends",{"_index":38,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/DBKeyService.html":{},"classes/DisplayCreateDto.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"interfaces/InternalTokenPayload.html":{},"classes/IssuanceDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/RootOfTrustPolicy.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{}}}],["extends#integrity",{"_index":3843,"title":{},"body":{"classes/VCT.html":{}}}],["external",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["extname",{"_index":1843,"title":{},"body":{"injectables/FilesService.html":{}}}],["extname(file.originalname",{"_index":1849,"title":{},"body":{"injectables/FilesService.html":{}}}],["extract",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialConfigService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["extractable",{"_index":1633,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{}}}],["extractconditionsfromkeydesc",{"_index":4078,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["extractconditionsfromkeydesc(keydesc",{"_index":4175,"title":{},"body":{"miscellaneous/functions.html":{}}}],["extracted",{"_index":4180,"title":{},"body":{"miscellaneous/functions.html":{}}}],["extracterrormessages",{"_index":2062,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extracterrormessages(child",{"_index":2072,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extracterrormessages(error",{"_index":2075,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extractjwt",{"_index":2227,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":2255,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extracts",{"_index":4176,"title":{},"body":{"miscellaneous/functions.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{}}}],["failed",{"_index":1264,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["failure",{"_index":3568,"title":{},"body":{"injectables/SessionService.html":{}}}],["failwitherror",{"_index":2237,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fall",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{}}}],["false",{"_index":237,"title":{},"body":{"modules/AppModule.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/VCT.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["false})@isboolean",{"_index":1112,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["false})@isempty",{"_index":3853,"title":{},"body":{"classes/VCT.html":{}}}],["family_name",{"_index":2631,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["fast",{"_index":2423,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["fatal",{"_index":2577,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["fd3ebf28",{"_index":2123,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["fetch",{"_index":2947,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fetched",{"_index":3306,"title":{},"body":{"entities/Session.html":{},"miscellaneous/enumerations.html":{}}}],["fields",{"_index":2808,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/ClientSecretResponseDto.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["file#asynchronous",{"_index":244,"title":{},"body":{"modules/AppModule.html":{}}}],["file.buffer",{"_index":1859,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.jwt",{"_index":3670,"title":{},"body":{"injectables/StatusListService.html":{}}}],["file.mimetype",{"_index":1860,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.originalname",{"_index":1862,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.replace(\".json",{"_index":1233,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["file.stack.pop",{"_index":3674,"title":{},"body":{"injectables/StatusListService.html":{}}}],["file_storage",{"_index":1809,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fileentity",{"_index":1771,"title":{"entities/FileEntity.html":{}},"body":{"entities/FileEntity.html":{},"injectables/FilesService.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["fileinterceptor",{"_index":3717,"title":{},"body":{"controllers/StorageController.html":{}}}],["filerepository",{"_index":1822,"title":{},"body":{"injectables/FilesService.html":{}}}],["files",{"_index":1228,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"controllers/StorageController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/variables.html":{}}}],["files.service",{"_index":3721,"title":{},"body":{"controllers/StorageController.html":{},"modules/StorageModule.html":{}}}],["filesservice",{"_index":1816,"title":{"injectables/FilesService.html":{}},"body":{"injectables/FilesService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["filestorage",{"_index":1776,"title":{"interfaces/FileStorage.html":{}},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["fileuploaddto",{"_index":1811,"title":{"classes/FileUploadDto.html":{}},"body":{"classes/FileUploadDto.html":{},"controllers/StorageController.html":{},"coverage.html":{}}}],["fileuploaddto})@post",{"_index":3712,"title":{},"body":{"controllers/StorageController.html":{}}}],["fill(0",{"_index":3652,"title":{},"body":{"injectables/StatusListService.html":{}}}],["filter((tenant",{"_index":1219,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["filter(boolean",{"_index":2477,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["finally",{"_index":3161,"title":{},"body":{"injectables/ResolverService.html":{}}}],["findonebyorfail",{"_index":1465,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["findoptionswhere",{"_index":3514,"title":{},"body":{"injectables/SessionService.html":{}}}],["first",{"_index":1630,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/ResolverService.html":{}}}],["firstvaluefrom",{"_index":2950,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["firstvaluefrom(this.httpservice.get(uri)).then",{"_index":2979,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fixed",{"_index":2122,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["flags",{"_index":4193,"title":{},"body":{"miscellaneous/functions.html":{}}}],["flattened",{"_index":4183,"title":{},"body":{"miscellaneous/functions.html":{}}}],["flattenmetas",{"_index":4079,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["flattenmetas(desc",{"_index":4181,"title":{},"body":{"miscellaneous/functions.html":{}}}],["flattens",{"_index":4182,"title":{},"body":{"miscellaneous/functions.html":{}}}],["flow",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["flow_complete",{"_index":3465,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_error",{"_index":3466,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_start",{"_index":3463,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flowtype",{"_index":2723,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["folder",{"_index":286,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["forbidnonwhitelisted",{"_index":1252,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["forbidunknownvalues",{"_index":1247,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["force",{"_index":1213,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["forcepathstyle",{"_index":3745,"title":{},"body":{"modules/StorageModule.html":{}}}],["format",{"_index":25,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EC_Public.html":{},"classes/FileUploadDto.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/ResolverService.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/variables.html":{}}}],["formats",{"_index":3959,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["forroot",{"_index":2328,"title":{},"body":{"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["forwardref",{"_index":2694,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{}}}],["found",{"_index":794,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/SessionPipe.html":{},"injectables/StatusListService.html":{}}}],["foundation",{"_index":156,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"properties.html":{}}}],["free",{"_index":3628,"title":{},"body":{"injectables/StatusListService.html":{}}}],["fresh",{"_index":2782,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["fs",{"_index":1205,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["fullpath",{"_index":2509,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["function",{"_index":2361,"title":{},"body":{"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":4169,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":3272,"title":{},"body":{"entities/Session.html":{}}}],["g",{"_index":2735,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["gauge",{"_index":3499,"title":{},"body":{"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["general",{"_index":4304,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generate",{"_index":1558,"title":{},"body":{"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/KeycloakClientsProvider.html":{},"controllers/PresentationManagementController.html":{}}}],["generated",{"_index":1551,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["generated/client.gen",{"_index":3063,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["generatekeypair",{"_index":1485,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["generatekeypair(\"ecdh",{"_index":1755,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generates",{"_index":1489,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{}}}],["generatesalt",{"_index":1393,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["generatetoken",{"_index":1887,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generatetoken(payload",{"_index":2204,"title":{},"body":{"injectables/JwtService.html":{}}}],["generatetokenoptions",{"_index":1876,"title":{"interfaces/GenerateTokenOptions.html":{}},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{}}}],["generation",{"_index":1889,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generic",{"_index":1481,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/KeyService.html":{},"injectables/SessionLoggerService.html":{}}}],["get(\".well",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\":id",{"_index":3339,"title":{},"body":{"controllers/SessionController.html":{},"controllers/TenantController.html":{}}}],["get(\":key",{"_index":3726,"title":{},"body":{"controllers/StorageController.html":{}}}],["get(\"jwks.json",{"_index":3943,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get(\"oauth",{"_index":3940,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get(\"openid",{"_index":3938,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get(\"schema/:id",{"_index":1364,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get(\"status",{"_index":3590,"title":{},"body":{"controllers/StatusListController.html":{}}}],["get(\"vct/:id",{"_index":1360,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get('.well",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':id",{"_index":976,"title":{},"body":{"controllers/ClientController.html":{},"controllers/TenantController.html":{}}}],["get(':id/secret",{"_index":981,"title":{},"body":{"controllers/ClientController.html":{}}}],["get(':key",{"_index":3706,"title":{},"body":{"controllers/StorageController.html":{}}}],["get('oauth",{"_index":3915,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('schema/:id",{"_index":1353,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get('session",{"_index":2667,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["get('status",{"_index":3584,"title":{},"body":{"controllers/StatusListController.html":{}}}],["get('vct/:id",{"_index":1356,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get()@healthcheck",{"_index":1921,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@sessionlogger('session",{"_index":2677,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get(state",{"_index":3510,"title":{},"body":{"injectables/SessionService.html":{}}}],["get(tenantid",{"_index":1185,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{}}}],["getalg",{"_index":1505,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getall",{"_index":3493,"title":{},"body":{"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["getallsessions",{"_index":3316,"title":{},"body":{"controllers/SessionController.html":{}}}],["getauthorizationserver",{"_index":721,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["getauthorizationserver(tenantid",{"_index":736,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["getauthzmetadata",{"_index":3948,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getauthzmetadata(session",{"_index":3952,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getby",{"_index":791,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["getby(where",{"_index":3513,"title":{},"body":{"injectables/SessionService.html":{}}}],["getbyid",{"_index":1170,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getbyid(tenantid",{"_index":1188,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getcertificate",{"_index":1544,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getcertificate(tenantid",{"_index":1580,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getclient",{"_index":964,"title":{},"body":{"controllers/ClientController.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["getclient(@param('id",{"_index":996,"title":{},"body":{"controllers/ClientController.html":{}}}],["getclient(id",{"_index":975,"title":{},"body":{"controllers/ClientController.html":{}}}],["getclient(tenantid",{"_index":1041,"title":{},"body":{"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["getclients",{"_index":965,"title":{},"body":{"controllers/ClientController.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["getclients(@token",{"_index":994,"title":{},"body":{"controllers/ClientController.html":{}}}],["getclients(tenantid",{"_index":1040,"title":{},"body":{"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["getclients(user",{"_index":978,"title":{},"body":{"controllers/ClientController.html":{}}}],["getclientsecret",{"_index":966,"title":{},"body":{"controllers/ClientController.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["getclientsecret(@param('id",{"_index":998,"title":{},"body":{"controllers/ClientController.html":{}}}],["getclientsecret(id",{"_index":980,"title":{},"body":{"controllers/ClientController.html":{}}}],["getclientsecret(sub",{"_index":1039,"title":{},"body":{"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["getconfigs",{"_index":1325,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(@token",{"_index":1341,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(user",{"_index":1329,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfiguration",{"_index":2532,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getcredential",{"_index":1368,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredential(credentialconfigurationid",{"_index":1377,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredentialconfigurationsupported",{"_index":1369,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredentialconfigurationsupported(session",{"_index":1383,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcrypto",{"_index":1506,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getcrypto(alg",{"_index":1513,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getdisplay",{"_index":1675,"title":{},"body":{"controllers/DisplayController.html":{}}}],["getdisplay(@token",{"_index":1686,"title":{},"body":{"controllers/DisplayController.html":{}}}],["getdisplay(user",{"_index":1680,"title":{},"body":{"controllers/DisplayController.html":{}}}],["getdownloadurl",{"_index":1819,"title":{},"body":{"injectables/FilesService.html":{}}}],["getdownloadurl(key",{"_index":1829,"title":{},"body":{"injectables/FilesService.html":{}}}],["getencryptionpublickey",{"_index":1737,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getencryptionpublickey(tenantid",{"_index":1748,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getexistingrp",{"_index":3023,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getexistingrp(name",{"_index":3038,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getexternaloidcconfig",{"_index":2210,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getexternaloidcconfig(configservice",{"_index":2215,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getglobaljwks",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["getheadersfromrequest",{"_index":761,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getheadersfromrequest(req",{"_index":801,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"miscellaneous/functions.html":{}}}],["getintegratedoauth2config",{"_index":2211,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getintegratedoauth2config(configservice",{"_index":2219,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getissuanceconfiguration",{"_index":2032,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfiguration(tenantid",{"_index":2040,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid",{"_index":2033,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid(issuanceconfigid",{"_index":2042,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurations",{"_index":2015,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(@token",{"_index":2025,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(user",{"_index":2018,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuermetadata",{"_index":3949,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getissuermetadata(session",{"_index":3955,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getjwks",{"_index":3914,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["getjwks(@sessionentity",{"_index":3944,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["getjwks(session",{"_index":3917,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["getjwks(tenantid",{"_index":3964,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getkeys",{"_index":2289,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkeys(@token",{"_index":2306,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkeys(token",{"_index":2295,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkid",{"_index":1537,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getkid(tenantid",{"_index":1552,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getlist",{"_index":3582,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlist(@param(\"tenantid",{"_index":3592,"title":{},"body":{"controllers/StatusListController.html":{}}}],["getlist(tenantid",{"_index":3583,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlogformat",{"_index":2533,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getloglevel",{"_index":2534,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getoauth2token",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getoauth2token(body",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getobjectcommand",{"_index":3223,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["getoffer",{"_index":2093,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getoffer(res",{"_index":2094,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getoidcdiscovery",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getorthrow(\"public_url",{"_index":2180,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/RegistrarService.html":{}}}],["getpresentationconfig",{"_index":2908,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfig(id",{"_index":2923,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs",{"_index":2909,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs(tenantid",{"_index":2925,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getprivatekey",{"_index":1538,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getprivatekey(tenantid",{"_index":1556,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getpubfromprivatekey",{"_index":1539,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getpubfromprivatekey(privatekey",{"_index":1560,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getpublickey",{"_index":1540,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getpublickey(type",{"_index":1564,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getrepositorytoken",{"_index":420,"title":{},"body":{"modules/AuthModule.html":{},"modules/KeyModule.html":{}}}],["getrepositorytoken(certentity",{"_index":2339,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrepositorytoken(cliententity",{"_index":452,"title":{},"body":{"modules/AuthModule.html":{}}}],["getrepositorytoken(keyentity",{"_index":2340,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrequestwithsession",{"_index":2674,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(@sessionentity",{"_index":2686,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(session",{"_index":2676,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getresponse",{"_index":2675,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["getresponse(body",{"_index":2680,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["gets",{"_index":1554,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getschema",{"_index":1370,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getschema(credentialconfigurationid",{"_index":1385,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getschemapath",{"_index":101,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["getschemapath(allowlistpolicy",{"_index":1143,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["getschemapath(attestationbasedpolicy",{"_index":1141,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["getschemapath(authenticationmethodauth",{"_index":2007,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["getschemapath(authenticationmethodnone",{"_index":2006,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["getschemapath(authenticationmethodpresentation",{"_index":2008,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["getschemapath(nonetrustpolicy",{"_index":1142,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["getschemapath(rootoftrustpolicy",{"_index":1144,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["getschemapath(webhookauthconfigheader",{"_index":133,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["getschemapath(webhookauthconfignone",{"_index":132,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["getsession",{"_index":3317,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(@param(\"id",{"_index":3340,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(session",{"_index":3322,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsignedurl",{"_index":1778,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getsignedurl(key",{"_index":1785,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getsignedurl?(key",{"_index":1807,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["getsigner",{"_index":1486,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getsigner(privatekeyjwk",{"_index":1491,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["getstream",{"_index":1779,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getstream(key",{"_index":1787,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["gettenant",{"_index":3757,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantService.html":{}}}],["gettenant(@param(\"id",{"_index":3774,"title":{},"body":{"controllers/TenantController.html":{}}}],["gettenant(id",{"_index":3762,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["gettenant(sub",{"_index":2270,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["gettenants",{"_index":3758,"title":{},"body":{"controllers/TenantController.html":{}}}],["getting",{"_index":1304,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["getvct",{"_index":1371,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getvct(credentialid",{"_index":1387,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getverifier",{"_index":1487,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getverifier(publickeyjwk",{"_index":1496,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["given",{"_index":1181,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"classes/KeyService.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["given_name",{"_index":2129,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["global",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{},"modules/CryptoImplementatationModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["globalthis.headers",{"_index":4202,"title":{},"body":{"miscellaneous/functions.html":{}}}],["grant",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["grant_type",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{}}}],["grant_types_supported",{"_index":574,"title":{},"body":{"injectables/AuthService.html":{}}}],["granttype",{"_index":764,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/KeycloakClientsProvider.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["graph",{"_index":4215,"title":{},"body":{"modules.html":{}}}],["group",{"_index":4261,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guard",{"_index":2587,"title":{"guards/RolesGuard.html":{}},"body":{"modules/MetricModule.html":{},"coverage.html":{},"index.html":{}}}],["guards",{"_index":3194,"title":{},"body":{"guards/RolesGuard.html":{}}}],["handle",{"_index":649,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WellKnownService.html":{}}}],["handled",{"_index":1907,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{}}}],["handler",{"_index":3364,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["handles",{"_index":637,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["handlesigningkeyerror",{"_index":2248,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["handling",{"_index":1733,"title":{},"body":{"injectables/EncryptionService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["hardcode",{"_index":2446,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["hardcoded",{"_index":2450,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["hash",{"_index":4335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashalg",{"_index":1442,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hasher",{"_index":1441,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["hasresponsedata",{"_index":3895,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["haswebhook",{"_index":2805,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["head",{"_index":3238,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.contentlength",{"_index":3244,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.contenttype",{"_index":3245,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.etag",{"_index":3243,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["header",{"_index":96,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["header(\"content",{"_index":3591,"title":{},"body":{"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["header('content",{"_index":3918,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["header.kid",{"_index":3188,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c",{"_index":3167,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c.map",{"_index":3170,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header[\"jwk",{"_index":3179,"title":{},"body":{"injectables/ResolverService.html":{}}}],["headername",{"_index":92,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["headers",{"_index":270,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["headers.authorization",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{}}}],["headers[session.claimswebhook!.auth.config.headername",{"_index":3877,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["headers[webhook.auth.config.headername",{"_index":3902,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["headobjectcommand",{"_index":3224,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["health",{"_index":1914,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":1932,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":212,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1923,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1917,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1912,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":173,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"index.html":{},"modules.html":{}}}],["help",{"_index":465,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{}}}],["here",{"_index":557,"title":{},"body":{"injectables/AuthService.html":{},"injectables/WellKnownService.html":{}}}],["hh:mm:ss",{"_index":259,"title":{},"body":{"modules/AppModule.html":{}}}],["holdercnf",{"_index":1378,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["host",{"_index":1467,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["hostname",{"_index":2745,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${session.id}/oid4vp",{"_index":2749,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${session.tenantid",{"_index":2731,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${tenantid}/credentials",{"_index":1469,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hot",{"_index":2555,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["hour",{"_index":3523,"title":{},"body":{"injectables/SessionService.html":{},"injectables/WellKnownService.html":{}}}],["hours",{"_index":563,"title":{},"body":{"injectables/AuthService.html":{}}}],["hs256",{"_index":1897,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["http",{"_index":2560,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["httpmethod",{"_index":753,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["httpmodule",{"_index":2159,"title":{},"body":{"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"modules/VerifierModule.html":{}}}],["https://${this.bucket}.s3.amazonaws.com/${encodeuri(key",{"_index":3242,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["https://github.com/iamolegga/nestjs",{"_index":241,"title":{},"body":{"modules/AppModule.html":{}}}],["https://github.com/openwallet",{"_index":4222,"title":{},"body":{"properties.html":{}}}],["https://json",{"_index":3263,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["https://kc/auth/realms/myrealm",{"_index":2384,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["https://openid.net/specs/openid",{"_index":930,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["https://openwallet",{"_index":155,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["httpservice",{"_index":2331,"title":{},"body":{"modules/KeyModule.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["iat",{"_index":587,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["id",{"_index":16,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/variables.html":{}}}],["id).then(secret",{"_index":1000,"title":{},"body":{"controllers/ClientController.html":{}}}],["id.token.claim",{"_index":2455,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["id_token_signing_alg_values_supported",{"_index":579,"title":{},"body":{"injectables/AuthService.html":{}}}],["identifier",{"_index":27,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"classes/DCQL.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/IssuerMetadata.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["ids",{"_index":1162,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["idx",{"_index":3673,"title":{},"body":{"injectables/StatusListService.html":{}}}],["if(!await",{"_index":1949,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["ignore",{"_index":260,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreexpiration",{"_index":2260,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":2141,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png",{"_index":2114,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png')@apibody({type",{"_index":2100,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["images",{"_index":3714,"title":{},"body":{"controllers/StorageController.html":{}}}],["imeplement",{"_index":1482,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation",{"_index":1515,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{}}}],["implementation.module",{"_index":2335,"title":{},"body":{"modules/KeyModule.html":{}}}],["implementation.module.ts",{"_index":1478,"title":{},"body":{"modules/CryptoImplementatationModule.html":{}}}],["implementation.service",{"_index":1404,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"injectables/WellKnownService.html":{}}}],["implementation.service.ts",{"_index":1504,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["implementation.service.ts:10",{"_index":1508,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.service.ts:17",{"_index":1510,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.service.ts:26",{"_index":1514,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.ts",{"_index":1480,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["implementation.ts:19",{"_index":1488,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:24",{"_index":1493,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:29",{"_index":1497,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation/crypto",{"_index":1403,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["implementation/ed25519.ts",{"_index":4027,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["implements",{"_index":112,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/EC_Public.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"guards/RolesGuard.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["import",{"_index":50,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["import(tenantid",{"_index":1568,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["import.dto",{"_index":1593,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/UpdateKeyDto.html":{}}}],["import.dto.ts",{"_index":2274,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{},"coverage.html":{}}}],["import.dto.ts:11",{"_index":2282,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:13",{"_index":2283,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:15",{"_index":2277,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:17",{"_index":2278,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:19",{"_index":2276,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:31",{"_index":2326,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:38",{"_index":2324,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:45",{"_index":2325,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:7",{"_index":2279,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:9",{"_index":2281,"title":{},"body":{"classes/Key.html":{}}}],["imported",{"_index":1275,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["importerror",{"_index":1272,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["importing",{"_index":2285,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["importjwk",{"_index":1586,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/PresentationsService.html":{}}}],["importjwk(keyentity.key",{"_index":1764,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["importjwk(payload.cnf.jwk",{"_index":2983,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["importjwk(privatekey",{"_index":1638,"title":{},"body":{"classes/DBKeyService.html":{}}}],["imports",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/CredentialConfigService.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{}}}],["include",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CredentialsService.html":{}}}],["included",{"_index":1992,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["includes",{"_index":2706,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["including",{"_index":3015,"title":{},"body":{"injectables/RegistrarService.html":{},"interfaces/SessionLogContext.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/ClientSecretResponseDto.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":3347,"title":{},"body":{"interfaces/SessionLogContext.html":{},"classes/WebhookResponse.html":{}}}],["indexes",{"_index":3604,"title":{},"body":{"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["indicates",{"_index":29,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/IssuanceConfig.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["indicating",{"_index":2887,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/ClientSecretResponseDto.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":154,"title":{},"body":{"controllers/AppController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"controllers/IssuerManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/functions.html":{}}}],["inherited",{"_index":44,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/DBKeyService.html":{},"classes/NoneTrustPolicy.html":{},"classes/RootOfTrustPolicy.html":{}}}],["init",{"_index":1541,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["init(tenant",{"_index":1571,"title":{},"body":{"classes/DBKeyService.html":{}}}],["init(tenantid",{"_index":2357,"title":{},"body":{"classes/KeyService.html":{}}}],["initialization",{"_index":3464,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["initialize",{"_index":1573,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"classes/KeyService.html":{},"injectables/StatusListService.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/functions.html":{}}}],["initialized",{"_index":2359,"title":{},"body":{"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["initializes",{"_index":1339,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["initializing",{"_index":2421,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["inittenant",{"_index":3759,"title":{},"body":{"controllers/TenantController.html":{}}}],["inittenant(@body",{"_index":3772,"title":{},"body":{"controllers/TenantController.html":{}}}],["inittenant(data",{"_index":3765,"title":{},"body":{"controllers/TenantController.html":{}}}],["inject",{"_index":231,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ClientController.html":{},"modules/DatabaseModule.html":{},"injectables/FilesService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["inject(\"keyservice",{"_index":2305,"title":{},"body":{"controllers/KeyController.html":{}}}],["inject(clients_provider",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["inject(file_storage",{"_index":1846,"title":{},"body":{"injectables/FilesService.html":{}}}],["injectable",{"_index":486,"title":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/RolesGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["injectables",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"index.html":{}}}],["injectmetric",{"_index":3533,"title":{},"body":{"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["injectmetric(\"sessions",{"_index":3541,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectmetric(\"tenant_total",{"_index":3814,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["injectrepository",{"_index":1201,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["injectrepository(cliententity",{"_index":1946,"title":{},"body":{"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["injectrepository(credentialconfig",{"_index":1208,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{}}}],["injectrepository(displayentity",{"_index":1711,"title":{},"body":{"injectables/DisplayService.html":{}}}],["injectrepository(fileentity",{"_index":1847,"title":{},"body":{"injectables/FilesService.html":{}}}],["injectrepository(issuanceconfig",{"_index":2052,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["injectrepository(keyentity",{"_index":1754,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["injectrepository(presentationconfig",{"_index":2954,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["injectrepository(registrarentity",{"_index":3065,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["injectrepository(session",{"_index":3540,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectrepository(statuslistentity",{"_index":3647,"title":{},"body":{"injectables/StatusListService.html":{}}}],["injectrepository(statusmapping",{"_index":3646,"title":{},"body":{"injectables/StatusListService.html":{}}}],["injectrepository(tenantentity",{"_index":3813,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["instance",{"_index":1146,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["instance.decode(`${data}.${signature",{"_index":2971,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["instanceof",{"_index":2253,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LocalFileStorage.html":{}}}],["instantiate",{"_index":1100,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["instead",{"_index":77,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/JwtStrategy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["insufficient_authorization",{"_index":845,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["int",{"_index":3690,"title":{},"body":{"entities/StatusMapping.html":{}}}],["integrated",{"_index":1886,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["integration",{"_index":3812,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["intended",{"_index":1724,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["interact",{"_index":4219,"title":{},"body":{"properties.html":{}}}],["interacting",{"_index":3053,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["interaction",{"_index":3014,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["intercept",{"_index":3356,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercept(context",{"_index":3359,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interceptor",{"_index":3353,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercepts",{"_index":3362,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthenticationMethodInterface.html":{},"interfaces/ClientsProvider.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/InternalTokenPayload.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/InternalTokenPayload.html":{},"interfaces/IssuerMetadata.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthenticationMethodInterface.html":{},"interfaces/ClientsProvider.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/InternalTokenPayload.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"index.html":{}}}],["internal",{"_index":1044,"title":{},"body":{"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{}}}],["internalclientsprovider",{"_index":433,"title":{"injectables/InternalClientsProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/InternalClientsProvider.html":{},"coverage.html":{}}}],["internalclientsprovider(cfg",{"_index":463,"title":{},"body":{"modules/AuthModule.html":{}}}],["internaltokenpayload",{"_index":500,"title":{"interfaces/InternalTokenPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/InternalTokenPayload.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["interval",{"_index":3545,"title":{},"body":{"injectables/SessionService.html":{}}}],["intervaltime",{"_index":3543,"title":{},"body":{"injectables/SessionService.html":{}}}],["invalid",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["is_public_key",{"_index":2195,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isabsolute",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["isabsolute(folder",{"_index":289,"title":{},"body":{"modules/AppModule.html":{}}}],["isarray",{"_index":52,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isarray()@isoptional",{"_index":917,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/OfferRequestDto.html":{}}}],["isarray()@isoptional()@validatenested({each",{"_index":1314,"title":{},"body":{"classes/CredentialQuery.html":{},"classes/DCQL.html":{}}}],["isarray()@isstring({each",{"_index":3839,"title":{},"body":{"classes/TrustedAuthorityQuery.html":{}}}],["isarray()@validatenested({each",{"_index":1642,"title":{},"body":{"classes/DCQL.html":{}}}],["isboolean",{"_index":920,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isboolean()@isoptional",{"_index":1319,"title":{},"body":{"classes/CredentialSetQuery.html":{}}}],["isboolean()@isoptional()@column('boolean",{"_index":1995,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["isdebugmodeenabled",{"_index":2535,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isdefined",{"_index":53,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"injectables/CredentialConfigService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isdefined()@isarray()@validatenested({each",{"_index":295,"title":{},"body":{"classes/AttestationBasedPolicy.html":{},"classes/PolicyCredential.html":{}}}],["isdefined()@isstring",{"_index":3207,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["isdefined()@isstring({each",{"_index":47,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["iseffectivelyrequired",{"_index":4080,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["iseffectivelyrequired(key",{"_index":4184,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isempty",{"_index":3855,"title":{},"body":{"classes/VCT.html":{}}}],["isenabled",{"_index":3024,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["isenum",{"_index":103,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/ClientEntity.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isenum([\"credential_accepted",{"_index":2599,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["isenum([\"ec",{"_index":2284,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["isenum(['credential_accepted",{"_index":2597,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["isenum(['ec",{"_index":2280,"title":{},"body":{"classes/Key.html":{}}}],["isenum(authconfig",{"_index":121,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isenum(responsetype",{"_index":2629,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isenum(role",{"_index":1017,"title":{},"body":{"entities/ClientEntity.html":{}}}],["isglobal",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["ishttploggerenabled",{"_index":2536,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isin",{"_index":54,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isin([\"aki",{"_index":938,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isin([\"allowlist",{"_index":68,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isin([\"attestationbased",{"_index":85,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isin([\"auth",{"_index":615,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isin([\"none",{"_index":79,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isin([\"presentationduringissuance",{"_index":614,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isin([\"rootoftrust",{"_index":72,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isin(['undefined'])@isstring",{"_index":3862,"title":{},"body":{"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{}}}],["isin([0",{"_index":3701,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isin([authconfig.api_key",{"_index":114,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isin([authconfig.none",{"_index":119,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isnotempty",{"_index":921,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isnull",{"_index":3536,"title":{},"body":{"injectables/SessionService.html":{}}}],["isnumber",{"_index":922,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isnumber()@isin(['0",{"_index":3699,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnumber()@isoptional()@column('int",{"_index":1983,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["isobject",{"_index":104,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isobject()@isoptional",{"_index":2885,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["isobject()@validatenested()@type(undefined",{"_index":594,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodPresentation.html":{}}}],["isoptional",{"_index":55,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizeQueries.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{}}}],["isoptional()@column('boolean",{"_index":1111,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isoptional()@column('int",{"_index":1115,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isoptional()@isarray()@validatenested()@type(undefined)@column('json",{"_index":2832,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["isoptional()@isarray()@validatenested({each",{"_index":2825,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["isoptional()@isboolean",{"_index":1312,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["isoptional()@isstring",{"_index":707,"title":{},"body":{"classes/AuthorizeQueries.html":{},"entities/CredentialConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/VCT.html":{}}}],["isoptional()@isstring({each",{"_index":1068,"title":{},"body":{"classes/CreateTenantDto.html":{},"classes/PresentationAttachment.html":{}}}],["isoptional()@validatenested()@apiproperty({oneof",{"_index":1090,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isoptional()@validatenested()@type(undefined",{"_index":625,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["isoptional()@validatenested()@type(undefined)@column('json",{"_index":1119,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["ispublic",{"_index":1834,"title":{},"body":{"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["iss",{"_index":583,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialsService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["issessionloggerenabled",{"_index":2537,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isstring",{"_index":56,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isstring()@column('varchar",{"_index":1087,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["isstring()@column({default",{"_index":3784,"title":{},"body":{"entities/TenantEntity.html":{}}}],["isstring()@column({nullable",{"_index":1021,"title":{},"body":{"entities/ClientEntity.html":{}}}],["isstring()@isin(['aki",{"_index":3837,"title":{},"body":{"classes/TrustedAuthorityQuery.html":{}}}],["isstring()@isin(['allowlist",{"_index":43,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["isstring()@isin(['attestationbased",{"_index":293,"title":{},"body":{"classes/AttestationBasedPolicy.html":{}}}],["isstring()@isin(['auth",{"_index":596,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{}}}],["isstring()@isin(['none",{"_index":619,"title":{},"body":{"classes/AuthenticationMethodNone.html":{},"classes/NoneTrustPolicy.html":{}}}],["isstring()@isin(['presentationduringissuance",{"_index":622,"title":{},"body":{"classes/AuthenticationMethodPresentation.html":{}}}],["isstring()@isin(['rootoftrust",{"_index":3205,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["isstring()@isoptional",{"_index":2323,"title":{},"body":{"classes/KeyImportDto.html":{},"classes/StatusUpdateDto.html":{}}}],["isstring()@isoptional()@column('varchar",{"_index":1993,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["isstring()@isoptional()@column({nullable",{"_index":1015,"title":{},"body":{"entities/ClientEntity.html":{},"entities/TenantEntity.html":{}}}],["isstring()@primarycolumn",{"_index":1013,"title":{},"body":{"entities/ClientEntity.html":{},"entities/TenantEntity.html":{}}}],["issuance",{"_index":611,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["issuance.credentialconfigs",{"_index":1108,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["issuance.service",{"_index":2023,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["issuance/credentials",{"_index":1212,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["issuance/entities/issuance",{"_index":1130,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{}}}],["issuance/issuance",{"_index":2056,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuance/issuance.controller",{"_index":2174,"title":{},"body":{"modules/IssuerModule.html":{}}}],["issuance/issuance.service",{"_index":760,"title":{},"body":{"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuance:manage",{"_index":4164,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["issuance:offer",{"_index":4166,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["issuanceconfig",{"_index":802,"title":{"entities/IssuanceConfig.html":{}},"body":{"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["issuanceconfig.authenticationconfig",{"_index":862,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig.claimswebhook",{"_index":866,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig.credentialconfigs.find",{"_index":1416,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["issuanceconfig.dpoprequired",{"_index":812,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfigid",{"_index":2044,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuanceconfigrepo",{"_index":2037,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuanceconfigs",{"_index":1074,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["issuancecontroller",{"_index":2012,"title":{"controllers/IssuanceController.html":{}},"body":{"controllers/IssuanceController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["issuancecounter",{"_index":3554,"title":{},"body":{"injectables/SessionService.html":{}}}],["issuancedto",{"_index":1159,"title":{"classes/IssuanceDto.html":{}},"body":{"classes/CredentialConfigMapping.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"coverage.html":{}}}],["issuanceid",{"_index":860,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"injectables/SessionService.html":{}}}],["issuanceoffer",{"_index":4165,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["issuances",{"_index":4163,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["issuanceservice",{"_index":730,"title":{"injectables/IssuanceService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"index.html":{}}}],["issue",{"_index":2641,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["issued",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/WellKnownService.html":{}}}],["issuer",{"_index":568,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["issuer/authorize/authorize.service",{"_index":3966,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["issuer/authorize/dto/authorize",{"_index":3305,"title":{},"body":{"entities/Session.html":{}}}],["issuer/issuer.module",{"_index":213,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["issuer/oid4vci/dto/offer",{"_index":2715,"title":{},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{}}}],["issuer/oid4vci/oid4vci.service",{"_index":2106,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WellKnownService.html":{}}}],["issuer/status",{"_index":428,"title":{},"body":{"modules/AuthModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["issuer_state",{"_index":702,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["issuer_validation_schema",{"_index":4053,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["issuermanagementcontroller",{"_index":2089,"title":{"controllers/IssuerManagementController.html":{}},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["issuermetadata",{"_index":2144,"title":{"interfaces/IssuerMetadata.html":{}},"body":{"interfaces/IssuerMetadata.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["issuermetadata(session",{"_index":3922,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["issuermetadatacredentialconfig",{"_index":1084,"title":{"classes/IssuerMetadataCredentialConfig.html":{}},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"coverage.html":{}}}],["issuermodule",{"_index":174,"title":{"modules/IssuerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"index.html":{},"modules.html":{}}}],["issues",{"_index":1380,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["issuing",{"_index":3469,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["isused",{"_index":1415,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["isused?.id",{"_index":1426,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["isusingexternaloidc",{"_index":1911,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["isuuid",{"_index":2628,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["isuuid()@isoptional",{"_index":2625,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["isverified",{"_index":4348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["it's",{"_index":3887,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["item.name",{"_index":3110,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["items",{"_index":945,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["iterate",{"_index":1223,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["job",{"_index":3521,"title":{},"body":{"injectables/SessionService.html":{}}}],["joi",{"_index":4127,"title":{},"body":{"dependencies.html":{}}}],["joi.boolean",{"_index":4307,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.boolean().default(false",{"_index":4390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.exist",{"_index":4264,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.number",{"_index":4329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.object",{"_index":4257,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.objectschema",{"_index":4256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.optional",{"_index":4267,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.required",{"_index":4326,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string",{"_index":4258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().default(\"24h",{"_index":4292,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().default(\"eudiplo",{"_index":4290,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().default(\"tenant_id",{"_index":4277,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().default((config",{"_index":4265,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().default((parent",{"_index":4383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().default(default_auth_client_id",{"_index":4297,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().default(default_auth_client_secret",{"_index":4295,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().min(32).default(default_jwt_secret",{"_index":4288,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().optional",{"_index":4287,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":4272,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().valid(\"rs256",{"_index":4281,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.when(\"oidc",{"_index":4271,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join",{"_index":205,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"modules/DatabaseModule.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["join(__dirname",{"_index":291,"title":{},"body":{"modules/AppModule.html":{}}}],["join(configpath",{"_index":1226,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["join(folder",{"_index":290,"title":{},"body":{"modules/AppModule.html":{}}}],["join(parent.folder",{"_index":4384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join(this.basedir",{"_index":2510,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["jointable",{"_index":2001,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["jose",{"_index":1587,"title":{},"body":{"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"dependencies.html":{}}}],["joseheaderparameters",{"_index":2362,"title":{},"body":{"classes/KeyService.html":{}}}],["json",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{},"entities/ClientEntity.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/SchemaResponse.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["json.parse",{"_index":1230,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["json.stringify",{"_index":3312,"title":{},"body":{"entities/Session.html":{}}}],["json.stringify(data",{"_index":3400,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["json.stringify(presentationconfig.dcql_query).replace",{"_index":2734,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["json.stringify(presentationconfig.registrationcert).replace",{"_index":2737,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jsontype.label",{"_index":2454,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["jsonwebkey",{"_index":1492,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["jwe",{"_index":1745,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwk",{"_index":754,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"miscellaneous/variables.html":{}}}],["jwk_ec_private",{"_index":1561,"title":{},"body":{"classes/DBKeyService.html":{}}}],["jwk_ec_public",{"_index":1718,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["jwks",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["jwks_uri",{"_index":571,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["jwksrequestsperminute",{"_index":2246,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwksresponsedto",{"_index":1730,"title":{"classes/JwksResponseDto.html":{}},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["jwksuri",{"_index":2241,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwt",{"_index":815,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt.service",{"_index":444,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["jwt.setaudience(options.audience",{"_index":1903,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.sign(secretkey",{"_index":1904,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.strategy",{"_index":445,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt/crypto",{"_index":1395,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["jwt/jwt",{"_index":1398,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt/sd",{"_index":1400,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["jwt/types",{"_index":1582,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt_alg_values",{"_index":2757,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jwt_expires_in",{"_index":4291,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_issuer",{"_index":2263,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["jwt_secret",{"_index":4286,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":411,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{},"index.html":{}}}],["jwtdecrypt",{"_index":1753,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtdecrypt(response",{"_index":1766,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtfromrequest",{"_index":2218,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtheaderparameters",{"_index":1578,"title":{},"body":{"classes/DBKeyService.html":{}}}],["jwtpayload",{"_index":1577,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{}}}],["jwts",{"_index":1047,"title":{},"body":{"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{}}}],["jwtservice",{"_index":412,"title":{"injectables/JwtService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{},"index.html":{}}}],["jwtstrategy",{"_index":413,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{}}}],["jwtstrategy.getexternaloidcconfig(configservice",{"_index":2232,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy.getintegratedoauth2config(configservice",{"_index":2233,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtverify",{"_index":1878,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/PresentationsService.html":{}}}],["jwtverify(`${data}.${signature",{"_index":2984,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["jwtverify(token",{"_index":1908,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwtwithstatuslistpayload",{"_index":1397,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/StatusListService.html":{}}}],["kb",{"_index":1409,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["kbverifier",{"_index":2904,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["kc",{"_index":460,"title":{},"body":{"modules/AuthModule.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["kcclient",{"_index":2487,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["kcclient.id",{"_index":2490,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["kcclient?.id",{"_index":2488,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["keep",{"_index":1145,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["keepdiscriminatorproperty",{"_index":137,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["key",{"_index":23,"title":{"classes/Key.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"entities/CertEntity.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/StorageController.html":{},"classes/UpdateKeyDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["key).then",{"_index":2985,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key.key",{"_index":1625,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.kid",{"_index":3187,"title":{},"body":{"injectables/ResolverService.html":{}}}],["key.service",{"_index":1596,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{}}}],["key.service.ts",{"_index":1534,"title":{},"body":{"classes/DBKeyService.html":{},"coverage.html":{}}}],["key.service.ts:118",{"_index":1557,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:153",{"_index":1566,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:158",{"_index":1567,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:28",{"_index":1547,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:62",{"_index":1562,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key/entities/cert.entity",{"_index":1527,"title":{},"body":{"modules/CryptoModule.html":{}}}],["key/entities/keys.entity",{"_index":1529,"title":{},"body":{"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{}}}],["key/key.controller",{"_index":1530,"title":{},"body":{"modules/CryptoModule.html":{}}}],["key_ops",{"_index":1605,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key_validation_schema",{"_index":4030,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["keybinding",{"_index":1075,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/PresentationsService.html":{}}}],["keybindingnonce",{"_index":2933,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keybindings",{"_index":2945,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keycloak",{"_index":2252,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["keycloak/keycloak",{"_index":2379,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"dependencies.html":{}}}],["keycloakadminclient",{"_index":2378,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["keycloakclientsprovider",{"_index":436,"title":{"injectables/KeycloakClientsProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/KeycloakClientsProvider.html":{},"coverage.html":{}}}],["keycloakclientsprovider(cfg",{"_index":462,"title":{},"body":{"modules/AuthModule.html":{}}}],["keycloakissuerurl",{"_index":2239,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["keycloakissuerurl}/protocol/openid",{"_index":2242,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["keycontroller",{"_index":1524,"title":{"controllers/KeyController.html":{}},"body":{"modules/CryptoModule.html":{},"controllers/KeyController.html":{},"coverage.html":{}}}],["keydesc",{"_index":4178,"title":{},"body":{"miscellaneous/functions.html":{}}}],["keyentity",{"_index":1528,"title":{"entities/KeyEntity.html":{}},"body":{"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"coverage.html":{}}}],["keyid",{"_index":1076,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/WellKnownService.html":{}}}],["keyimportdto",{"_index":1569,"title":{"classes/KeyImportDto.html":{}},"body":{"classes/DBKeyService.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["keymodule",{"_index":175,"title":{"modules/KeyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{},"index.html":{},"modules.html":{}}}],["keymodule.forroot",{"_index":281,"title":{},"body":{"modules/AppModule.html":{}}}],["keyobj",{"_index":2341,"title":{"classes/KeyObj.html":{}},"body":{"classes/KeyObj.html":{},"coverage.html":{}}}],["keypair",{"_index":1490,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["keypair.privatekey",{"_index":4340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keypair.publickey",{"_index":4339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyrepository",{"_index":1546,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"modules/KeyModule.html":{}}}],["keyresponsedto",{"_index":322,"title":{"classes/KeyResponseDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["keys",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{},"entities/CertEntity.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyResponseDto.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["keys.privatekey",{"_index":1612,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice",{"_index":1536,"title":{"classes/KeyService.html":{}},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"coverage.html":{}}}],["keyservice:109",{"_index":1575,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:136",{"_index":1553,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:152",{"_index":1565,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:195",{"_index":1579,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:46",{"_index":1570,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:77",{"_index":1572,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:85",{"_index":1581,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:86",{"_index":1549,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyusage",{"_index":2319,"title":{},"body":{"entities/KeyEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["kid",{"_index":2275,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["km_type",{"_index":2337,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["kmtype",{"_index":2336,"title":{},"body":{"modules/KeyModule.html":{}}}],["know",{"_index":3125,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["known",{"_index":3913,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["known.controller",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["known.controller.ts",{"_index":3911,"title":{},"body":{"controllers/WellKnownController.html":{},"coverage.html":{}}}],["known.controller.ts:45",{"_index":3927,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:57",{"_index":3916,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:69",{"_index":3921,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.service",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{}}}],["known.service.ts",{"_index":3946,"title":{},"body":{"injectables/WellKnownService.html":{},"coverage.html":{}}}],["known.service.ts:16",{"_index":3951,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:39",{"_index":3956,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:77",{"_index":3953,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:87",{"_index":3965,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known/dto/credential",{"_index":1282,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"coverage.html":{}}}],["known/dto/jwks",{"_index":1591,"title":{},"body":{"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["known/dto/oauth",{"_index":2601,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"coverage.html":{}}}],["known/jwks.json",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["known/jwks.json')@apioperation({summary",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["known/jwt",{"_index":3182,"title":{},"body":{"injectables/ResolverService.html":{}}}],["known/oauth",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{}}}],["known/openid",{"_index":3077,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["known/well",{"_index":223,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["kty",{"_index":1720,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["labelnames",{"_index":3480,"title":{},"body":{"modules/SessionModule.html":{}}}],["labs.github.io/eudiplo/latest",{"_index":157,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["labs/eudiplo.git",{"_index":4226,"title":{},"body":{"properties.html":{}}}],["labs/eudiplo/issues",{"_index":4223,"title":{},"body":{"properties.html":{}}}],["last",{"_index":907,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["later",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{}}}],["legend",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["length",{"_index":3401,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"controllers/StorageController.html":{}}}],["lessthan",{"_index":3537,"title":{},"body":{"injectables/SessionService.html":{}}}],["lessthan(new",{"_index":3576,"title":{},"body":{"injectables/SessionService.html":{}}}],["level",{"_index":246,"title":{},"body":{"modules/AppModule.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["levels",{"_index":2573,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels[level.tolowercase",{"_index":2578,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["license",{"_index":4224,"title":{},"body":{"properties.html":{}}}],["lifetime",{"_index":950,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"injectables/WellKnownService.html":{}}}],["line",{"_index":3097,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["link",{"_index":609,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["links",{"_index":1990,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["list",{"_index":1295,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/PresentationsService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"controllers/StorageController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["list')@header('content",{"_index":3585,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.controller",{"_index":3616,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.controller.ts",{"_index":3580,"title":{},"body":{"controllers/StatusListController.html":{},"coverage.html":{}}}],["list.controller.ts:17",{"_index":3587,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.entity",{"_index":3613,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["list.entity.ts",{"_index":3596,"title":{},"body":{"entities/StatusListEntity.html":{},"coverage.html":{}}}],["list.entity.ts:14",{"_index":3606,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:20",{"_index":3605,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:26",{"_index":3601,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:32",{"_index":3603,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:38",{"_index":3600,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:44",{"_index":3602,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.map(e",{"_index":1954,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["list.module",{"_index":430,"title":{},"body":{"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/SessionModule.html":{}}}],["list.module.ts",{"_index":3611,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.service",{"_index":1405,"title":{},"body":{"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["list.service.ts",{"_index":3618,"title":{},"body":{"injectables/StatusListService.html":{},"coverage.html":{}}}],["list.service.ts:114",{"_index":3631,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:124",{"_index":3627,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:176",{"_index":3639,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:192",{"_index":3641,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:20",{"_index":3625,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:36",{"_index":3633,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:60",{"_index":3632,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:68",{"_index":3630,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list/dto/status",{"_index":3330,"title":{},"body":{"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["list/entities/status",{"_index":3595,"title":{},"body":{"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"coverage.html":{}}}],["list/status",{"_index":429,"title":{},"body":{"modules/AuthModule.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["listen",{"_index":3808,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["literal",{"_index":479,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"miscellaneous/typealiases.html":{}}}],["live",{"_index":4377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["load",{"_index":2807,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["loadconfiguration",{"_index":2538,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loadtypemetadataformat",{"_index":1446,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["local",{"_index":1808,"title":{},"body":{"interfaces/FileStorage.html":{},"modules/StorageModule.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["local_storage_dir",{"_index":4381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["locale",{"_index":1135,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["localfilestorage",{"_index":2492,"title":{"classes/LocalFileStorage.html":{}},"body":{"classes/LocalFileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["log",{"_index":2404,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["log_debug_mode",{"_index":2571,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["log_enable_http_logger",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["log_enable_session_logger",{"_index":2570,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["log_format",{"_index":2572,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["log_level",{"_index":4358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log_validation_schema",{"_index":4087,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logauthorizationrequest",{"_index":3420,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logauthorizationrequest(context",{"_index":3433,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcontext",{"_index":2722,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["logcredentialissuance",{"_index":3421,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialissuance(context",{"_index":3436,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification",{"_index":3422,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification(context",{"_index":3439,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete",{"_index":3423,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete(context",{"_index":3441,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror",{"_index":3424,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror(context",{"_index":3444,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart",{"_index":3425,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart(context",{"_index":3446,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logformat",{"_index":2564,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["logged",{"_index":3350,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["logger",{"_index":1174,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.decorator",{"_index":2653,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logger.decorator.ts",{"_index":4090,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.interceptor",{"_index":2163,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["logger.interceptor.ts",{"_index":3352,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{}}}],["logger.interceptor.ts:136",{"_index":3369,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:19",{"_index":3358,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:44",{"_index":3361,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.service",{"_index":2164,"title":{},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["logger.service.ts",{"_index":3417,"title":{},"body":{"injectables/SessionLoggerService.html":{},"coverage.html":{}}}],["logger.service.ts:102",{"_index":3438,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:12",{"_index":3432,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:124",{"_index":3440,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:146",{"_index":3435,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:163",{"_index":3455,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:180",{"_index":3449,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:202",{"_index":3451,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:221",{"_index":3453,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:30",{"_index":3456,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:37",{"_index":3447,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:56",{"_index":3442,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:75",{"_index":3445,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger/session",{"_index":3871,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["loggerconfigservice",{"_index":2530,"title":{"injectables/LoggerConfigService.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["loggerconfiguration",{"_index":2544,"title":{"interfaces/LoggerConfiguration.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["loggermodule",{"_index":201,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loggermodule.forrootasync",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["loglevel",{"_index":2547,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["lognotification",{"_index":3426,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["lognotification(context",{"_index":3448,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logo",{"_index":1139,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["logs",{"_index":2707,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["logsession",{"_index":3427,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsession(context",{"_index":3450,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror",{"_index":3428,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror(context",{"_index":3452,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange",{"_index":3429,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange(context",{"_index":3454,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["long",{"_index":951,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["made",{"_index":949,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["main",{"_index":144,"title":{},"body":{"controllers/AppController.html":{}}}],["maintain",{"_index":476,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["make",{"_index":550,"title":{},"body":{"injectables/AuthService.html":{}}}],["makegaugeprovider",{"_index":423,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{}}}],["makes",{"_index":1099,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/WellKnownService.html":{}}}],["making",{"_index":2916,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["manage",{"_index":881,"title":{},"body":{"entities/CertEntity.html":{},"controllers/ClientController.html":{},"entities/ClientEntity.html":{},"entities/IssuanceConfig.html":{}}}],["management",{"_index":1447,"title":{},"body":{"injectables/CredentialsService.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/TenantController.html":{},"miscellaneous/variables.html":{}}}],["management.controller",{"_index":2175,"title":{},"body":{"modules/IssuerModule.html":{}}}],["management.controller.ts",{"_index":2092,"title":{},"body":{"controllers/IssuerManagementController.html":{},"coverage.html":{}}}],["management.controller.ts:77",{"_index":2102,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management/credentials",{"_index":1323,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["management/issuance",{"_index":2014,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["management/issuer",{"_index":2091,"title":{},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["managing",{"_index":1169,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["manytomany",{"_index":1126,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["manytomany(undefined",{"_index":1107,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["manytoone",{"_index":910,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["manytoone(undefined",{"_index":896,"title":{},"body":{"entities/CertEntity.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{}}}],["map",{"_index":2789,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["map((_",{"_index":3653,"title":{},"body":{"injectables/StatusListService.html":{}}}],["map((error",{"_index":2074,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["map(r",{"_index":2473,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["mapper",{"_index":2451,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["mapping",{"_index":1155,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity",{"_index":3615,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity.ts",{"_index":3686,"title":{},"body":{"entities/StatusMapping.html":{},"coverage.html":{}}}],["mapping.entity.ts:13",{"_index":3694,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:16",{"_index":3693,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:19",{"_index":3692,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:22",{"_index":3691,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:25",{"_index":3689,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:7",{"_index":3695,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mark",{"_index":4371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marker",{"_index":2444,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["marks",{"_index":3529,"title":{},"body":{"injectables/SessionService.html":{}}}],["match",{"_index":3176,"title":{},"body":{"injectables/ResolverService.html":{}}}],["matching",{"_index":32,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/ClientSecretResponseDto.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":2316,"title":{},"body":{"entities/KeyEntity.html":{}}}],["math.floor(date.now",{"_index":2763,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{}}}],["math.floor(new",{"_index":2764,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["math.max(5",{"_index":2397,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["math.random",{"_index":3656,"title":{},"body":{"injectables/StatusListService.html":{}}}],["math.round(new",{"_index":1452,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["max",{"_index":2130,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["maybe",{"_index":3141,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["media",{"_index":3961,"title":{},"body":{"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mediatype",{"_index":3923,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["mediatype.application_jwt",{"_index":3937,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["mediatype.application_jwt)@get('openid",{"_index":3926,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["memorystorage",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["message",{"_index":3406,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["messages",{"_index":2063,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.join",{"_index":2078,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.length",{"_index":2076,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.push",{"_index":2066,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["meta",{"_index":942,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":1284,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/IssuerMetadata.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["metadata+jwt",{"_index":3970,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["metadata.'})@apiproduces(mediatype.application_json",{"_index":3925,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["metadata.controller",{"_index":2170,"title":{},"body":{"modules/IssuerModule.html":{}}}],["metadata.controller.ts",{"_index":1350,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"coverage.html":{}}}],["metadata.controller.ts:15",{"_index":1357,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.controller.ts:25",{"_index":1354,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.credential_issuer",{"_index":3971,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["metadata.dto",{"_index":3164,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["metadata.dto.ts",{"_index":1283,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"coverage.html":{}}}],["metadata.dto.ts:12",{"_index":1294,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:16",{"_index":1300,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:20",{"_index":1305,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:24",{"_index":1297,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:33",{"_index":1303,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:37",{"_index":1299,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:41",{"_index":1292,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:8",{"_index":1301,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata/credentials",{"_index":1349,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["metadata/dto/schema",{"_index":1128,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/SchemaResponse.html":{},"coverage.html":{}}}],["metadata/dto/vct.dto",{"_index":1129,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["metadata/dto/vct.dto.ts",{"_index":3842,"title":{},"body":{"classes/VCT.html":{},"coverage.html":{}}}],["metadata/dto/vct.dto.ts:12",{"_index":3849,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:15",{"_index":3846,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:18",{"_index":3847,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:21",{"_index":3848,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:24",{"_index":3850,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:27",{"_index":3851,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:9",{"_index":3854,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/vct/${credentialconfig.id",{"_index":1470,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["metadata/vct/${credentialconfigurationid",{"_index":1461,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["metadata/vct/${value.id",{"_index":1422,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["method",{"_index":267,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["methods",{"_index":143,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/ClientController.html":{},"interfaces/ClientsProvider.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/InternalClientsProvider.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/RolesGuard.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["metric/metric.module",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["metricmodule",{"_index":176,"title":{"modules/MetricModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetricModule.html":{},"index.html":{},"modules.html":{}}}],["metrics",{"_index":2589,"title":{},"body":{"modules/MetricModule.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["middleware",{"_index":4218,"title":{},"body":{"properties.html":{}}}],["mirko",{"_index":4228,"title":{},"body":{"properties.html":{}}}],["mirror",{"_index":2425,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["miscellaneous",{"_index":4148,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":2416,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["missingroles",{"_index":2411,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["missingroles.length",{"_index":2415,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["misused",{"_index":3100,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["mkdirsync",{"_index":2504,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["mkdirsync(dirname(fullpath",{"_index":2511,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["mm",{"_index":257,"title":{},"body":{"modules/AppModule.html":{},"injectables/WellKnownService.html":{}}}],["mode",{"_index":4260,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modify",{"_index":2134,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["modifying",{"_index":3410,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["module",{"_index":158,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":160,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["mollik",{"_index":4229,"title":{},"body":{"properties.html":{}}}],["more",{"_index":153,"title":{},"body":{"controllers/AppController.html":{},"entities/Session.html":{}}}],["move",{"_index":2818,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["mso_mdoc",{"_index":2755,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["multer",{"_index":200,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["multermodule",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["multermodule.register",{"_index":282,"title":{},"body":{"modules/AppModule.html":{}}}],["multi",{"_index":3300,"title":{},"body":{"entities/Session.html":{}}}],["multiple",{"_index":941,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["multivalued",{"_index":2459,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["mustermann",{"_index":2632,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["mysql2",{"_index":4132,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":95,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/ClientController.html":{},"interfaces/ClientsProvider.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/RolesGuard.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name)?.id",{"_index":3111,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["namedcurve",{"_index":4334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["namespaced",{"_index":2434,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["necessary",{"_index":957,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["need",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CredentialConfigService.html":{},"injectables/RegistrarService.html":{}}}],["needed",{"_index":74,"title":{},"body":{"classes/AllowListPolicy.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{}}}],["needs",{"_index":854,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["nestinterceptor",{"_index":3374,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["nestjs",{"_index":202,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["nestjs/axios",{"_index":2160,"title":{},"body":{"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"modules/VerifierModule.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":147,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/ClientController.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"modules/VerifierModule.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2193,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":4105,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":419,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"controllers/StorageController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":195,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":102,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/FileUploadDto.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"classes/RoleDto.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1925,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":422,"title":{},"body":{"modules/AuthModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"injectables/KeycloakClientsProvider.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["new",{"_index":461,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"controllers/ClientController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":2406,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/StatusListService.html":{}}}],["next.handle",{"_index":3380,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["next.handle().pipe",{"_index":3394,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["node:crypto",{"_index":662,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{}}}],["nodejs",{"_index":1396,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["noncce",{"_index":3304,"title":{},"body":{"entities/Session.html":{}}}],["nonce",{"_index":2637,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["nonce(@sessionentity",{"_index":2665,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["nonce(session",{"_index":2642,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["none",{"_index":65,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/StatusListService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["nonetrustpolicy",{"_index":78,"title":{"classes/NoneTrustPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["not(isnull",{"_index":3556,"title":{},"body":{"injectables/SessionService.html":{}}}],["notfoundexception",{"_index":3488,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["notification",{"_index":1306,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["notification_endpoint",{"_index":1291,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["notification_id",{"_index":2595,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["notificationevent",{"_index":2596,"title":{},"body":{"classes/NotificationRequestDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["notificationrequestdto",{"_index":2593,"title":{"classes/NotificationRequestDto.html":{}},"body":{"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["notifications",{"_index":128,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/Oid4vciController.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["notifications(body",{"_index":2645,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["notifywebhook",{"_index":1980,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/Session.html":{}}}],["now",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["null",{"_index":1027,"title":{},"body":{"entities/ClientEntity.html":{},"injectables/InternalClientsProvider.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/RegistrarService.html":{}}}],["nullable",{"_index":892,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["number",{"_index":467,"title":{},"body":{"modules/AuthModule.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"interfaces/FileStorage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/ParResponseDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["oauth",{"_index":2767,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["oauth2",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{},"classes/RoleDto.html":{}}}],["oauth2authorizationserver",{"_index":738,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["oauth2authorizationserverresponse",{"_index":2600,"title":{"classes/Oauth2AuthorizationServerResponse.html":{}},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["oauth2client",{"_index":3019,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["obj",{"_index":3246,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.body",{"_index":3247,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.contentlength",{"_index":3249,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.contenttype",{"_index":3248,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["object",{"_index":901,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"entities/RegistrarEntity.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.dto.ts",{"_index":2342,"title":{},"body":{"classes/KeyObj.html":{},"coverage.html":{}}}],["object.dto.ts:11",{"_index":2344,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.dto.ts:15",{"_index":2345,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.dto.ts:19",{"_index":2343,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.entries(params",{"_index":2788,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["object.keys(res.vp_token",{"_index":2986,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["object.values",{"_index":2067,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["objects",{"_index":1251,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"classes/SchemaResponse.html":{}}}],["observable",{"_index":3366,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["offer",{"_index":859,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["offerrequestdto",{"_index":2095,"title":{"classes/OfferRequestDto.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/Session.html":{},"coverage.html":{}}}],["offerresponse",{"_index":2098,"title":{"classes/OfferResponse.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"coverage.html":{}}}],["offerurl",{"_index":3268,"title":{},"body":{"entities/Session.html":{}}}],["oid4vci",{"_index":599,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"miscellaneous/variables.html":{}}}],["oid4vci/dto/offer",{"_index":2109,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["oid4vci/oid4vci.controller",{"_index":2176,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/oid4vci.service",{"_index":2177,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/util",{"_index":762,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["oid4vcicontroller",{"_index":2158,"title":{"controllers/Oid4vciController.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["oid4vciservice",{"_index":2105,"title":{},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["oid4vp",{"_index":606,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/SessionLogContext.html":{},"miscellaneous/variables.html":{}}}],["oid4vp.controller",{"_index":2697,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["oid4vp.service",{"_index":2684,"title":{},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["oid4vp/dto/presentation",{"_index":2865,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vp/oid4vp.module",{"_index":2897,"title":{},"body":{"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{}}}],["oid4vp/oid4vp.service",{"_index":2866,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vpcontroller",{"_index":2671,"title":{"controllers/Oid4vpController.html":{}},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"coverage.html":{}}}],["oid4vpmodule",{"_index":2153,"title":{"modules/Oid4vpModule.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["oid4vpservice",{"_index":729,"title":{"injectables/Oid4vpService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"coverage.html":{},"index.html":{}}}],["oidc",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["oidc.split('/realms",{"_index":2387,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["oidc_algorithm",{"_index":4280,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oidc_client_id",{"_index":4270,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oidc_client_secret",{"_index":4274,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oidc_internal_issuer_url",{"_index":4262,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oidc_sub",{"_index":4276,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oidcdiscoverydto",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["oidcissuerurl",{"_index":3067,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/.well",{"_index":3076,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/protocol/openid",{"_index":3073,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["old",{"_index":1238,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["older",{"_index":3531,"title":{},"body":{"injectables/SessionService.html":{}}}],["omittype",{"_index":1062,"title":{},"body":{"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/DisplayCreateDto.html":{},"classes/IssuanceDto.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/UpdateKeyDto.html":{}}}],["omittype(cliententity",{"_index":1061,"title":{},"body":{"classes/CreateClientDto.html":{}}}],["omittype(credentialconfig",{"_index":1151,"title":{},"body":{"classes/CredentialConfigCreate.html":{}}}],["omittype(displayentity",{"_index":1690,"title":{},"body":{"classes/DisplayCreateDto.html":{}}}],["omittype(issuanceconfig",{"_index":1160,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{}}}],["omittype(keyimportdto",{"_index":3841,"title":{},"body":{"classes/UpdateKeyDto.html":{}}}],["omittype(presentationconfig",{"_index":2849,"title":{},"body":{"classes/PresentationConfigCreateDto.html":{}}}],["omittype(tenantentity",{"_index":1067,"title":{},"body":{"classes/CreateTenantDto.html":{}}}],["on(\"error",{"_index":2522,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["on(\"finish",{"_index":2520,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["onapplicationbootstrap",{"_index":1935,"title":{},"body":{"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["once",{"_index":2462,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"injectables/RegistrarService.html":{}}}],["ondelete",{"_index":898,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["one",{"_index":1555,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"miscellaneous/variables.html":{}}}],["oneof",{"_index":130,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["ones",{"_index":1429,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["onetomany",{"_index":3788,"title":{},"body":{"entities/TenantEntity.html":{}}}],["onetomany(undefined",{"_index":3779,"title":{},"body":{"entities/TenantEntity.html":{}}}],["onmoduleinit",{"_index":1944,"title":{},"body":{"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["ontenantdelete",{"_index":1171,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["ontenantdelete(tenantid",{"_index":1192,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit",{"_index":1738,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit(tenant",{"_index":3045,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["ontenantinit(tenantid",{"_index":1751,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/StatusListService.html":{}}}],["openid",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/KeycloakClientsProvider.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["openid4vc/oauth2",{"_index":757,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"dependencies.html":{}}}],["openid4vc/openid4vci",{"_index":1391,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["openid4vc/openid4vp",{"_index":4116,"title":{},"body":{"dependencies.html":{}}}],["openid4vc/utils",{"_index":4117,"title":{},"body":{"dependencies.html":{}}}],["openid4vci",{"_index":635,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/WellKnownController.html":{}}}],["openid4vp://?${(await",{"_index":841,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["openid4vp://?${querystring",{"_index":2797,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["openid4vp://?${values.uri",{"_index":2876,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["openid_federation",{"_index":940,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["openidvci",{"_index":3969,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["operation",{"_index":1184,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["operations",{"_index":1511,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"controllers/Oid4vpController.html":{},"injectables/RegistrarService.html":{}}}],["option",{"_index":2422,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["optional",{"_index":17,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"entities/ClientEntity.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"guards/RolesGuard.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":252,"title":{},"body":{"modules/AppModule.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["options.audience",{"_index":1902,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["options.dto",{"_index":2721,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["options.dto.ts",{"_index":2889,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"coverage.html":{}}}],["options.expiresin",{"_index":1892,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["opts",{"_index":1792,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["opts?.acl",{"_index":3234,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["opts?.checksum",{"_index":3236,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["opts?.contenttype",{"_index":2526,"title":{},"body":{"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["opts?.metadata",{"_index":3233,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["order",{"_index":2964,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"miscellaneous/variables.html":{}}}],["original",{"_index":3411,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["originalname",{"_index":1861,"title":{},"body":{"injectables/FilesService.html":{}}}],["otherwhise",{"_index":2110,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["otherwise",{"_index":3041,"title":{},"body":{"injectables/RegistrarService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["output",{"_index":4364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ov",{"_index":243,"title":{},"body":{"modules/AppModule.html":{}}}],["over",{"_index":1224,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["override",{"_index":2128,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["overrides",{"_index":2619,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["overview",{"_index":4205,"title":{"index.html":{}},"body":{"index.html":{}}}],["overwrite",{"_index":2050,"title":{},"body":{"injectables/IssuanceService.html":{},"miscellaneous/variables.html":{}}}],["overwritten",{"_index":1199,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["owns",{"_index":900,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["p",{"_index":1757,"title":{},"body":{"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["package",{"_index":4098,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pairs",{"_index":484,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["par",{"_index":641,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(@body",{"_index":680,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(body",{"_index":651,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["param",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"controllers/ClientController.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["param(\"id",{"_index":1345,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/SessionController.html":{}}}],["param(\"tenantid",{"_index":1362,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["parameter",{"_index":475,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/SessionPipe.html":{}}}],["parameterdecorator",{"_index":4204,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parameters",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/ClientController.html":{},"interfaces/ClientsProvider.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/RolesGuard.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":2784,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["parresponsedto",{"_index":673,"title":{"classes/ParResponseDto.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{},"coverage.html":{}}}],["parse",{"_index":2935,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseaccesstokenrequest",{"_index":799,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsechallengerequest",{"_index":722,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsechallengerequest(body",{"_index":739,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["parsed",{"_index":2936,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parsedaccesstokenauthorizationcoderequestgrant",{"_index":763,"title":{"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["parsedaccesstokenpreauthorizedcoderequestgrant",{"_index":765,"title":{"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["parsedaccesstokenrequest",{"_index":798,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.accesstokenrequest",{"_index":811,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.dpop?.jwt",{"_index":816,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant",{"_index":810,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.granttype",{"_index":807,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.preauthorizedcode",{"_index":818,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.txcode",{"_index":820,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parseloglevel",{"_index":2539,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["parseloglevel(level",{"_index":2552,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["parseresponse",{"_index":2910,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseresponse(res",{"_index":2931,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["part",{"_index":2949,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parties",{"_index":3018,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["party",{"_index":3037,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pass",{"_index":2133,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/RegistrarService.html":{}}}],["passed",{"_index":1428,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{}}}],["passport",{"_index":2229,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportjwtsecret",{"_index":2225,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportmodule",{"_index":418,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":2224,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":2209,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":1658,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":206,"title":{},"body":{"modules/AppModule.html":{},"classes/ClaimsQuery.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/InternalTokenPayload.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["payload.cnf",{"_index":2981,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["payload.exp",{"_index":2398,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["payload.id",{"_index":1234,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["payload.iss",{"_index":3165,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.iss}/.well",{"_index":3181,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.roles",{"_index":2271,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.tenant_id",{"_index":2266,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payloads",{"_index":3155,"title":{},"body":{"injectables/ResolverService.html":{}}}],["peculiar/x509",{"_index":4118,"title":{},"body":{"dependencies.html":{}}}],["pem",{"_index":24,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/DBKeyService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["perform",{"_index":1918,"title":{},"body":{"controllers/HealthController.html":{}}}],["periodically",{"_index":3050,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pg",{"_index":4135,"title":{},"body":{"dependencies.html":{}}}],["pick",{"_index":459,"title":{},"body":{"modules/AuthModule.html":{}}}],["pid",{"_index":2119,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{}}}],["pid,hostname",{"_index":261,"title":{},"body":{"modules/AppModule.html":{}}}],["pino",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{}}}],["pino?tab=readme",{"_index":242,"title":{},"body":{"modules/AppModule.html":{}}}],["pinohttp",{"_index":245,"title":{},"body":{"modules/AppModule.html":{}}}],["pinologger",{"_index":1175,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["pipetransform",{"_index":3489,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["pkcecodechallengemethod",{"_index":755,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["pkcecodechallengemethod.s256",{"_index":785,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["plain",{"_index":1250,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["plaintoclass",{"_index":1202,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["plaintoclass(issuancedto",{"_index":2059,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["png",{"_index":2112,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["point",{"_index":1437,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["policies.dto",{"_index":1131,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["policy",{"_index":40,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["policycredential",{"_index":80,"title":{"classes/PolicyCredential.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["policytype",{"_index":64,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["port",{"_index":1654,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["positives",{"_index":1249,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["post",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{}}}],["post(\"challenge",{"_index":694,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post(\"credential",{"_index":2657,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post(\"nonce",{"_index":2663,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post(\"notification",{"_index":2660,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post(\"oauth2/token",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"offer",{"_index":2131,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["post(\"par",{"_index":679,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post(\"request",{"_index":2871,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["post(\"revoke",{"_index":3342,"title":{},"body":{"controllers/SessionController.html":{}}}],["post(\"token",{"_index":691,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('challenge",{"_index":644,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('credential')@sessionlogger('session",{"_index":2639,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('nonce')@sessionlogger('nonce",{"_index":2643,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification')@sessionlogger('notification_id",{"_index":2646,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('oauth2/token')@apibody({type",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('revoke",{"_index":3328,"title":{},"body":{"controllers/SessionController.html":{}}}],["post('token",{"_index":657,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post()@sessionlogger('session",{"_index":2681,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["postgres",{"_index":1652,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["pre",{"_index":2627,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["preauthorizedcode",{"_index":766,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["preauthorizedcodegrantidentifier",{"_index":756,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["predefined",{"_index":2928,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["preferred",{"_index":1293,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["prefix",{"_index":633,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/DisplayController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{}}}],["preheader",{"_index":3665,"title":{},"body":{"injectables/StatusListService.html":{}}}],["prepayload",{"_index":3664,"title":{},"body":{"injectables/StatusListService.html":{}}}],["present",{"_index":1241,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["presentation",{"_index":482,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["presentation:manage",{"_index":4160,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["presentation:offer",{"_index":4162,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["presentation_during_issuance",{"_index":618,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/enumerations.html":{}}}],["presentationattachment",{"_index":927,"title":{"classes/PresentationAttachment.html":{}},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["presentationconfig",{"_index":948,"title":{"entities/PresentationConfig.html":{}},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["presentationconfig.lifetime",{"_index":2792,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationconfig.webhook",{"_index":2795,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationconfigcreatedto",{"_index":2847,"title":{"classes/PresentationConfigCreateDto.html":{}},"body":{"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"coverage.html":{}}}],["presentationduringissuance",{"_index":605,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/enumerations.html":{}}}],["presentationduringissuanceconfig",{"_index":608,"title":{"classes/PresentationDuringIssuanceConfig.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["presentationexists",{"_index":2959,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["presentationmanagementcontroller",{"_index":2852,"title":{"controllers/PresentationManagementController.html":{}},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"coverage.html":{}}}],["presentationoffer",{"_index":4161,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["presentationrequest",{"_index":2860,"title":{"classes/PresentationRequest.html":{}},"body":{"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"coverage.html":{}}}],["presentationrequestoptions",{"_index":2710,"title":{"interfaces/PresentationRequestOptions.html":{}},"body":{"injectables/Oid4vpService.html":{},"interfaces/PresentationRequestOptions.html":{},"coverage.html":{}}}],["presentations",{"_index":933,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/enumerations.html":{}}}],["presentations.controller",{"_index":2899,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["presentations.service",{"_index":2867,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{}}}],["presentations/dto/auth",{"_index":2718,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentations/presentations.module",{"_index":2696,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["presentations/presentations.service",{"_index":2719,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationsmodule",{"_index":2695,"title":{"modules/PresentationsModule.html":{}},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["presentationsservice",{"_index":2702,"title":{"injectables/PresentationsService.html":{}},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"coverage.html":{},"index.html":{}}}],["presigned",{"_index":1806,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["presigner",{"_index":3229,"title":{},"body":{"classes/S3FileStorage.html":{},"dependencies.html":{}}}],["pretty",{"_index":251,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["primary",{"_index":894,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["primarycolumn",{"_index":1030,"title":{},"body":{"entities/ClientEntity.html":{},"entities/FileEntity.html":{},"entities/Session.html":{},"entities/TenantEntity.html":{}}}],["primarycolumn(\"uuid",{"_index":3310,"title":{},"body":{"entities/Session.html":{}}}],["primarycolumn('uuid",{"_index":3280,"title":{},"body":{"entities/Session.html":{}}}],["printer/combined.schema",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["printer/combined.schema.ts",{"_index":4074,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["printer/config",{"_index":4075,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["printer/helpers.ts",{"_index":4077,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["printer/validation.schema.ts",{"_index":4084,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["private",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/ClientController.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{}}}],["private_key",{"_index":3413,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["privateencryptionkey",{"_index":1763,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["privatekey",{"_index":1501,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/UpdateKeyDto.html":{},"miscellaneous/variables.html":{}}}],["privatekey.alg",{"_index":1615,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekey.ext",{"_index":1618,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekey.key_ops",{"_index":1619,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekey.kid",{"_index":1602,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekeyinstance",{"_index":1631,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekeyjwk",{"_index":1495,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"miscellaneous/variables.html":{}}}],["proceed",{"_index":3365,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["process",{"_index":612,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{}}}],["process_presentation_response",{"_index":2804,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["processes",{"_index":2713,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["production",{"_index":1884,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"miscellaneous/variables.html":{}}}],["progress",{"_index":3351,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["prom",{"_index":3535,"title":{},"body":{"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["prometheus",{"_index":425,"title":{},"body":{"modules/AuthModule.html":{},"modules/MetricModule.html":{},"modules/SessionModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["prometheus/dist/injector",{"_index":3534,"title":{},"body":{"injectables/SessionService.html":{}}}],["prometheusmodule",{"_index":2586,"title":{},"body":{"modules/MetricModule.html":{}}}],["prometheusmodule.register",{"_index":2590,"title":{},"body":{"modules/MetricModule.html":{}}}],["promise",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/ClientController.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["promise((resolve",{"_index":2513,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["promise.all(att",{"_index":2994,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["promise.all(files.map((file",{"_index":1873,"title":{},"body":{"injectables/FilesService.html":{}}}],["promise.all(missingroles.map(role",{"_index":2417,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["promise.resolve",{"_index":1870,"title":{},"body":{"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["promise.resolve(existssync(join(this.basedir",{"_index":2529,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["promise.resolve(rmsync(join(this.basedir",{"_index":2528,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["promise.resolve(this.storage.delete(key",{"_index":1867,"title":{},"body":{"injectables/FilesService.html":{}}}],["promise.resolve(this.storage.getstream(key",{"_index":1866,"title":{},"body":{"injectables/FilesService.html":{}}}],["promises",{"_index":3101,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["proof_signing_alg_values_supported",{"_index":1411,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["proof_types_supported",{"_index":1410,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/ClientSecretResponseDto.html":{},"classes/ClientView.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/FileEntity.html":{},"classes/FileUploadDto.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RoleDto.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"entities/TenantEntity.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"properties.html":{}}}],["property",{"_index":135,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/PresentationsService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["protect",{"_index":2588,"title":{},"body":{"modules/MetricModule.html":{}}}],["protected",{"_index":1543,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["protocol",{"_index":2448,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["protocolmapper",{"_index":2449,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["protocolmappers",{"_index":2445,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["provide",{"_index":451,"title":{},"body":{"modules/AuthModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["provided",{"_index":129,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["provider",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{}}}],["providers",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["provides",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{},"injectables/IssuanceService.html":{},"modules/RegistrarModule.html":{}}}],["providing",{"_index":1915,"title":{},"body":{"controllers/HealthController.html":{}}}],["ps256",{"_index":4282,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":22,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"controllers/KeyController.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public.decorator",{"_index":2196,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["public_url",{"_index":4351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["publicbaseurl",{"_index":3214,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["publicclient",{"_index":2438,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["publicjwk",{"_index":829,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["publickey",{"_index":1500,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyObj.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["publickeyinstance",{"_index":1636,"title":{},"body":{"classes/DBKeyService.html":{}}}],["publickeyjwk",{"_index":1499,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["publicly",{"_index":1841,"title":{},"body":{"injectables/FilesService.html":{}}}],["publicurl",{"_index":565,"title":{},"body":{"injectables/AuthService.html":{}}}],["publicurl}/.well",{"_index":572,"title":{},"body":{"injectables/AuthService.html":{}}}],["publicurl}/oauth2/token",{"_index":570,"title":{},"body":{"injectables/AuthService.html":{}}}],["purpose",{"_index":3126,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pushed",{"_index":653,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["pushed_authorization_request_endpoint",{"_index":782,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["put",{"_index":1780,"title":{},"body":{"interfaces/FileStorage.html":{},"controllers/KeyController.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["put(\":id",{"_index":2309,"title":{},"body":{"controllers/KeyController.html":{}}}],["put(':id",{"_index":2299,"title":{},"body":{"controllers/KeyController.html":{}}}],["put(key",{"_index":1789,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["putobjectcommand",{"_index":3225,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["putoptions",{"_index":1793,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["qr",{"_index":2116,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["qrcode",{"_index":2104,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["qrcode.tobuffer(values.uri",{"_index":2139,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["qrcodebuffer",{"_index":2138,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["queries",{"_index":650,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["queries.request_uri",{"_index":789,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["query",{"_index":663,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["querydeeppartialentity",{"_index":3503,"title":{},"body":{"injectables/SessionService.html":{}}}],["querystring",{"_index":2787,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["r",{"_index":2476,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"injectables/ResolverService.html":{}}}],["r.data",{"_index":3183,"title":{},"body":{"injectables/ResolverService.html":{}}}],["r.id",{"_index":2482,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["r.name",{"_index":2414,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["random",{"_index":1613,"title":{},"body":{"classes/DBKeyService.html":{}}}],["randombytes",{"_index":1945,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["randombytes(32).tostring('hex",{"_index":1961,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["randomness",{"_index":3637,"title":{},"body":{"injectables/StatusListService.html":{}}}],["randomuuid",{"_index":661,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/FilesService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["randomuuid()}${safeext",{"_index":1854,"title":{},"body":{"injectables/FilesService.html":{}}}],["ratelimit",{"_index":2245,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["raw",{"_index":4189,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rawenv",{"_index":4185,"title":{},"body":{"miscellaneous/functions.html":{}}}],["re",{"_index":839,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["reachable",{"_index":3185,"title":{},"body":{"injectables/ResolverService.html":{}}}],["react",{"_index":3809,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["read",{"_index":2424,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"classes/S3FileStorage.html":{}}}],["readable",{"_index":1791,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["readable.from(body",{"_index":2518,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["readdirsync",{"_index":1203,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["readdirsync(configpath",{"_index":1217,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["readdirsync(path",{"_index":1229,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readfilesync",{"_index":1204,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readfilesync(join(path",{"_index":1231,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readonly",{"_index":676,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["realm",{"_index":2374,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["realmname",{"_index":2386,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["receive",{"_index":959,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["received",{"_index":3891,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["receives",{"_index":3491,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["record",{"_index":1080,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"interfaces/FileStorage.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/SchemaResponse.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/functions.html":{}}}],["recursive",{"_index":2512,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["recursively",{"_index":2068,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["redacted",{"_index":3416,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["redirect_uri",{"_index":703,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["redirected",{"_index":602,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["ref",{"_index":131,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["reference",{"_index":1614,"title":{},"body":{"classes/DBKeyService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["reflect",{"_index":4141,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":2188,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["refresh",{"_index":2400,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["refresh_token",{"_index":560,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenResponse.html":{}}}],["refreshaccesstoken",{"_index":3025,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["refreshes",{"_index":3049,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["refreshms",{"_index":2396,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["regcert",{"_index":2733,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["region",{"_index":3742,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["register",{"_index":3518,"title":{},"body":{"injectables/SessionService.html":{}}}],["registrar",{"_index":3008,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar.service",{"_index":3011,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["registrar/generated",{"_index":3148,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrar/registrar.module",{"_index":215,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["registrar/registrar.service",{"_index":2716,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["registrar_oidc_client_id",{"_index":3070,"title":{},"body":{"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar_oidc_client_secret",{"_index":3071,"title":{},"body":{"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar_oidc_url",{"_index":4366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registrar_url",{"_index":4365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registrar_validation_schema",{"_index":4063,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["registrarentity",{"_index":2995,"title":{"entities/RegistrarEntity.html":{}},"body":{"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"coverage.html":{}}}],["registrarmodule",{"_index":177,"title":{"modules/RegistrarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["registrarrepository",{"_index":3026,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrarservice",{"_index":2701,"title":{"injectables/RegistrarService.html":{}},"body":{"injectables/Oid4vpService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"index.html":{}}}],["registration",{"_index":956,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["registrationcert",{"_index":958,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["registrationcertid",{"_index":2942,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["registrationcertificatecontrollerall",{"_index":3059,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrationcertificatecontrollerregister",{"_index":3060,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrationcertificatecreation",{"_index":3146,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrationcertificaterequest",{"_index":923,"title":{"classes/RegistrationCertificateRequest.html":{}},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["reject",{"_index":2514,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["related",{"_index":3354,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/variables.html":{}}}],["relations",{"_index":1277,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["relevant",{"_index":610,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/Oid4vciController.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["reload",{"_index":2556,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["reloadconfiguration",{"_index":2540,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["relying",{"_index":3017,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerfindall",{"_index":3061,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerregister",{"_index":3062,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartyid",{"_index":2998,"title":{},"body":{"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{}}}],["remove",{"_index":1147,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["removeclient",{"_index":1050,"title":{},"body":{"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["removeclient(tenantid",{"_index":1043,"title":{},"body":{"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["removed",{"_index":1240,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["replace(\"https",{"_index":3114,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["repo",{"_index":454,"title":{},"body":{"modules/AuthModule.html":{},"injectables/InternalClientsProvider.html":{}}}],["repository",{"_index":426,"title":{},"body":{"modules/AuthModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"injectables/IssuanceService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"properties.html":{}}}],["representation",{"_index":4195,"title":{},"body":{"miscellaneous/functions.html":{}}}],["representing",{"_index":485,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/IssuerMetadata.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/functions.html":{}}}],["represents",{"_index":1010,"title":{},"body":{"entities/ClientEntity.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"entities/Session.html":{},"entities/TenantEntity.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["repsonse",{"_index":10,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{}}}],["req",{"_index":263,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/JwtStrategy.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"miscellaneous/functions.html":{}}}],["req+jwt",{"_index":2769,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["req.body",{"_index":3137,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["req.headers[\"content",{"_index":275,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers[\"user",{"_index":273,"title":{},"body":{"modules/AppModule.html":{}}}],["req.id",{"_index":3134,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["req.method",{"_index":268,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["req.params?.session",{"_index":265,"title":{},"body":{"modules/AppModule.html":{}}}],["req.params?.tenantid",{"_index":277,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url",{"_index":269,"title":{},"body":{"modules/AppModule.html":{}}}],["request",{"_index":12,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["request.'})@isenum(responsetype",{"_index":2623,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto",{"_index":672,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["request.dto.ts",{"_index":697,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["request.dto.ts:12",{"_index":709,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:13",{"_index":3147,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:15",{"_index":714,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:18",{"_index":716,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:21",{"_index":718,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:24",{"_index":710,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:25",{"_index":2624,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:26",{"_index":2884,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["request.dto.ts:27",{"_index":711,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:30",{"_index":712,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:31",{"_index":2620,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:32",{"_index":2883,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["request.dto.ts:33",{"_index":715,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:36",{"_index":708,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:38",{"_index":2618,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:40",{"_index":2886,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["request.dto.ts:58",{"_index":2615,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:6",{"_index":713,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.dto.ts:66",{"_index":2617,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:73",{"_index":2626,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:77",{"_index":2634,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:78",{"_index":2633,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:9",{"_index":717,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.header",{"_index":2771,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.headers[\"accept",{"_index":4316,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.headers[\"content",{"_index":3390,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.headers[\"user",{"_index":3389,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.method",{"_index":3385,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params?.tenantid",{"_index":3384,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params[sessionidparam",{"_index":3383,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.payload",{"_index":2774,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.url",{"_index":3386,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.user",{"_index":1974,"title":{},"body":{"interfaces/InternalTokenPayload.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["request/response",{"_index":2561,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["request_error",{"_index":3404,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_start",{"_index":3388,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_success",{"_index":3397,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_uri",{"_index":681,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["requested",{"_index":2669,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["requestid",{"_index":2679,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{}}}],["requests",{"_index":638,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["requesturl",{"_index":2796,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["require_pushed_authorization_requests",{"_index":781,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["required",{"_index":116,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/SchemaResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["requiredclaimkeys",{"_index":2990,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requiredfields",{"_index":2932,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requiredroles",{"_index":3201,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":3203,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requires",{"_index":2610,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["res",{"_index":278,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/EncryptionService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["res.data",{"_index":2980,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["res.data![\"crt",{"_index":3122,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data![\"id",{"_index":3123,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data![\"jwt",{"_index":3144,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data?.filter",{"_index":3132,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.error",{"_index":3118,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.payload",{"_index":1767,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["res.redirect(`${values.redirect_uri}?code=${code",{"_index":796,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.send",{"_index":875,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.send(qrcodebuffer",{"_index":2142,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.send(values",{"_index":2143,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.setheader(\"content",{"_index":2140,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.state",{"_index":2801,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["res.status(400).send(response",{"_index":868,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.statuscode",{"_index":280,"title":{},"body":{"modules/AppModule.html":{}}}],["reset",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["resolve",{"_index":2521,"title":{},"body":{"classes/LocalFileStorage.html":{},"injectables/ResolverService.html":{}}}],["resolvepublickey",{"_index":3156,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolvepublickey(payload",{"_index":3158,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolver.service",{"_index":3153,"title":{},"body":{"modules/ResolverModule.html":{}}}],["resolver/resolver.module",{"_index":2898,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["resolver/resolver.service",{"_index":2952,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resolvermodule",{"_index":2895,"title":{"modules/ResolverModule.html":{}},"body":{"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"index.html":{},"modules.html":{}}}],["resolverservice",{"_index":2913,"title":{"injectables/ResolverService.html":{}},"body":{"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"coverage.html":{},"index.html":{}}}],["resolves",{"_index":1182,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/FilesService.html":{},"injectables/PresentationsService.html":{}}}],["resolving",{"_index":2917,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{}}}],["resource",{"_index":704,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["response",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["response.data!.find((item",{"_index":3109,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.data![\"id",{"_index":3107,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.dto",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"controllers/ClientController.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["response.dto.ts",{"_index":471,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/ClientSecretResponseDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{},"coverage.html":{}}}],["response.dto.ts:11",{"_index":629,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{}}}],["response.dto.ts:13",{"_index":2603,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:14",{"_index":3255,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:15",{"_index":1723,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:16",{"_index":3260,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:17",{"_index":2608,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:18",{"_index":3257,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:19",{"_index":1727,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:2",{"_index":1032,"title":{},"body":{"classes/ClientSecretResponseDto.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:20",{"_index":3258,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:21",{"_index":2605,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:23",{"_index":1729,"title":{},"body":{"classes/EC_Public.html":{},"classes/SchemaResponse.html":{}}}],["response.dto.ts:25",{"_index":2606,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:26",{"_index":3256,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:29",{"_index":2609,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:3",{"_index":3836,"title":{},"body":{"classes/TokenResponse.html":{}}}],["response.dto.ts:33",{"_index":2183,"title":{},"body":{"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:37",{"_index":2602,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:4",{"_index":2346,"title":{},"body":{"classes/KeyResponseDto.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:5",{"_index":2607,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:9",{"_index":2611,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["response.error",{"_index":3105,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.jwks.keys.find((key",{"_index":3186,"title":{},"body":{"injectables/ResolverService.html":{}}}],["response.key",{"_index":1865,"title":{},"body":{"injectables/FilesService.html":{}}}],["response.statuscode",{"_index":3398,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["response.ts",{"_index":8,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["response_mode",{"_index":2750,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_processing",{"_index":2803,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_type",{"_index":705,"title":{},"body":{"classes/AuthorizeQueries.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["response_types_supported",{"_index":573,"title":{},"body":{"injectables/AuthService.html":{},"injectables/Oid4vpService.html":{}}}],["response_uri",{"_index":2748,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["responses",{"_index":3355,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsesize",{"_index":3399,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsestatus",{"_index":3893,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["responsetype",{"_index":2107,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["responsetype.qrcode",{"_index":2118,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsetype.uri",{"_index":2120,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsible",{"_index":1535,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/HealthController.html":{},"controllers/KeyController.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{}}}],["result",{"_index":1183,"title":{},"body":{"injectables/CredentialConfigService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{}}}],["result.payload",{"_index":2991,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["results",{"_index":31,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/ClientSecretResponseDto.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieval",{"_index":3947,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["retrieve",{"_index":685,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/EncryptionService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["retrieves",{"_index":1187,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["return",{"_index":149,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/ClientController.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/RolesGuard.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":2888,"title":{},"body":{"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"injectables/WellKnownService.html":{}}}],["returning",{"_index":2238,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["returns",{"_index":146,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/ClientController.html":{},"interfaces/ClientsProvider.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/InternalClientsProvider.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/RolesGuard.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["reuse",{"_index":2820,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["review",{"_index":3972,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["revokeall",{"_index":3318,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(@body",{"_index":3343,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(value",{"_index":3326,"title":{},"body":{"controllers/SessionController.html":{}}}],["revoked",{"_index":18,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/StatusUpdateDto.html":{}}}],["right",{"_index":1101,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["rmsync",{"_index":2505,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["role",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ClientController.html":{},"entities/ClientEntity.html":{},"classes/CreateTenantDto.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"injectables/KeycloakClientsProvider.html":{},"controllers/PresentationManagementController.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.clients",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["role.enum",{"_index":3198,"title":{},"body":{"guards/RolesGuard.html":{}}}],["role.issuanceoffer",{"_index":542,"title":{},"body":{"injectables/AuthService.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["role.issuances",{"_index":544,"title":{},"body":{"injectables/AuthService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/RoleDto.html":{}}}],["role.presentationoffer",{"_index":543,"title":{},"body":{"injectables/AuthService.html":{},"injectables/KeycloakClientsProvider.html":{},"controllers/SessionController.html":{}}}],["role.presentations",{"_index":545,"title":{},"body":{"injectables/AuthService.html":{},"controllers/KeyController.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["role.tenants",{"_index":547,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ClientController.html":{},"injectables/InternalClientsProvider.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["roledto",{"_index":369,"title":{"classes/RoleDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RoleDto.html":{},"coverage.html":{}}}],["roles",{"_index":541,"title":{},"body":{"injectables/AuthService.html":{},"entities/ClientEntity.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateTenantDto.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/RoleDto.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["roles.decorator",{"_index":3200,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles.find(r",{"_index":2413,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["roles/role.enum",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ClientController.html":{},"entities/ClientEntity.html":{},"classes/CreateTenantDto.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/RoleDto.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{}}}],["roles_key",{"_index":3199,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":3193,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["root",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["rootoftrust",{"_index":66,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/typealiases.html":{}}}],["rootoftrustpolicy",{"_index":71,"title":{"classes/RootOfTrustPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["rootpath",{"_index":288,"title":{},"body":{"modules/AppModule.html":{}}}],["row",{"_index":2483,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["rows",{"_index":2427,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["rows.map(e",{"_index":2429,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["rp",{"_index":3117,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["rpid",{"_index":3104,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["rsa",{"_index":2226,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["rules",{"_index":1105,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["run",{"_index":3522,"title":{},"body":{"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["running",{"_index":152,"title":{},"body":{"controllers/AppController.html":{}}}],["runs",{"_index":1103,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["rxjs",{"_index":2951,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":3377,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["s",{"_index":4198,"title":{},"body":{"miscellaneous/functions.html":{}}}],["s3",{"_index":3216,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["s3_access_key_id",{"_index":3749,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_bucket",{"_index":4387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["s3_endpoint",{"_index":4388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["s3_force_path_style",{"_index":3747,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_public_base_url",{"_index":4394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["s3_region",{"_index":4386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["s3_secret_access_key",{"_index":3751,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3client",{"_index":3212,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{}}}],["s3filestorage",{"_index":3209,"title":{"classes/S3FileStorage.html":{}},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["safeext",{"_index":1848,"title":{},"body":{"injectables/FilesService.html":{}}}],["saltgenerator",{"_index":1445,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["same",{"_index":837,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sanitize",{"_index":3372,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody",{"_index":3357,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody(body",{"_index":3368,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized",{"_index":3373,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized[field",{"_index":3415,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizes",{"_index":3370,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["save",{"_index":683,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/DBKeyService.html":{}}}],["saved",{"_index":556,"title":{},"body":{"injectables/AuthService.html":{}}}],["saves",{"_index":1836,"title":{},"body":{"injectables/FilesService.html":{}}}],["saveuserupload",{"_index":1820,"title":{},"body":{"injectables/FilesService.html":{}}}],["saveuserupload(tenantid",{"_index":1832,"title":{},"body":{"injectables/FilesService.html":{}}}],["schedulemodule",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":284,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":3497,"title":{},"body":{"injectables/SessionService.html":{}}}],["schema",{"_index":1077,"title":{},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/SchemaResponse.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["schema(@param(\"id",{"_index":1365,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema(id",{"_index":1352,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema.org/draft/2020",{"_index":3253,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["schema_uri",{"_index":3844,"title":{},"body":{"classes/VCT.html":{}}}],["schema_uri#integrity",{"_index":3845,"title":{},"body":{"classes/VCT.html":{}}}],["schemaresponse",{"_index":1118,"title":{"classes/SchemaResponse.html":{}},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/SchemaResponse.html":{},"coverage.html":{}}}],["scope",{"_index":706,"title":{},"body":{"classes/AuthorizeQueries.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["scopes_supported",{"_index":581,"title":{},"body":{"injectables/AuthService.html":{}}}],["sd",{"_index":1394,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["sdjwt",{"_index":1438,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwt.issue",{"_index":1460,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwtinstance",{"_index":2905,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["sdjwtvcinstance",{"_index":1399,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["sdk/client",{"_index":3227,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["sdk/s3",{"_index":3228,"title":{},"body":{"classes/S3FileStorage.html":{},"dependencies.html":{}}}],["seconds",{"_index":564,"title":{},"body":{"injectables/AuthService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/ParResponseDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ClientController.html":{},"entities/ClientEntity.html":{},"classes/ClientSecretResponseDto.html":{},"classes/CreateClientDto.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"injectables/JwtService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["secret.value",{"_index":2486,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["secretaccesskey",{"_index":3750,"title":{},"body":{"modules/StorageModule.html":{}}}],["secretkey",{"_index":1894,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["secretorkey",{"_index":2257,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secretorkeyprovider",{"_index":2217,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":1883,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["secure.decorator",{"_index":985,"title":{},"body":{"controllers/ClientController.html":{},"controllers/TenantController.html":{}}}],["secured",{"_index":984,"title":{},"body":{"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["secured([role.clients",{"_index":991,"title":{},"body":{"controllers/ClientController.html":{}}}],["secured([role.issuanceoffer",{"_index":3336,"title":{},"body":{"controllers/SessionController.html":{}}}],["secured([role.issuances",{"_index":1337,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/StorageController.html":{}}}],["secured([role.presentations",{"_index":2869,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["secured([role.tenants",{"_index":3769,"title":{},"body":{"controllers/TenantController.html":{}}}],["secured(roles",{"_index":4203,"title":{},"body":{"miscellaneous/functions.html":{}}}],["send",{"_index":127,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["sendauthorizationcode",{"_index":723,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sendauthorizationcode(res",{"_index":743,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sendauthorizationresponse",{"_index":724,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sendauthorizationresponse(queries",{"_index":745,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sending",{"_index":3880,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sends",{"_index":3806,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sendwebhook",{"_index":3874,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sendwebhook(session",{"_index":3907,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sendwebhooknotification",{"_index":3898,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sendwebhooknotification(session",{"_index":3909,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sense",{"_index":3973,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["sensitive",{"_index":3371,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields",{"_index":3412,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields.foreach((field",{"_index":3414,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sent",{"_index":97,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["serializers",{"_index":266,"title":{},"body":{"modules/AppModule.html":{}}}],["server",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server')@apioperation({summary",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["server's",{"_index":2604,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["servers",{"_index":1296,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["servestaticmodule",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forrootasync",{"_index":285,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["service.db",{"_index":1663,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["service_documentation",{"_index":588,"title":{},"body":{"injectables/AuthService.html":{}}}],["serviceaccountsenabled",{"_index":2437,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["services",{"_index":123,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/variables.html":{}}}],["session",{"_index":536,"title":{"entities/Session.html":{}},"body":{"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["session.auth_queries",{"_index":793,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.authorization_code",{"_index":823,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.claimswebhook",{"_index":2806,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.claimswebhook!.auth",{"_index":3875,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.auth.config.value",{"_index":3878,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.auth.type",{"_index":3876,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.auth?.type",{"_index":3884,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.url",{"_index":3882,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.controller",{"_index":3478,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.credentialpayload",{"_index":3892,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.credentialpayload!.claims",{"_index":3890,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.credentialpayload?.claims?.[credentialconfigurationid",{"_index":1432,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["session.credentials",{"_index":852,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.id",{"_index":771,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.issuanceid",{"_index":804,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["session.notifywebhook",{"_index":3899,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.pipe",{"_index":3333,"title":{},"body":{"controllers/SessionController.html":{}}}],["session.requestid",{"_index":2727,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.service",{"_index":3334,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{}}}],["session.tenant.name",{"_index":2762,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.tenantid",{"_index":773,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["session.vp_nonce",{"_index":2810,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session/.well",{"_index":3912,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["session/authorize",{"_index":634,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["session/entities/session.entity",{"_index":664,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["session/oid4vp",{"_index":2673,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["session/session.decorator",{"_index":666,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["session/session.module",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["session/session.service",{"_index":668,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session/vci",{"_index":2636,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_id",{"_index":2670,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_logger_key",{"_index":3378,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["session_tidy_up_interval",{"_index":3524,"title":{},"body":{"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["session_ttl",{"_index":4374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["session_type",{"_index":3481,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["session_validation_schema",{"_index":4066,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessioncontroller",{"_index":3313,"title":{"controllers/SessionController.html":{}},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"coverage.html":{}}}],["sessionentity",{"_index":665,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["sessionid",{"_index":264,"title":{},"body":{"modules/AppModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionPipe.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["sessionidparam",{"_index":3381,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["sessionlogcontext",{"_index":2717,"title":{"interfaces/SessionLogContext.html":{}},"body":{"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["sessionlogger",{"_index":2651,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessionlogger(\"nonce",{"_index":2664,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger(\"notification_id",{"_index":2661,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger(\"session",{"_index":2658,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["sessionloggerinterceptor",{"_index":2154,"title":{"injectables/SessionLoggerInterceptor.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{},"index.html":{}}}],["sessionloggerservice",{"_index":2155,"title":{"injectables/SessionLoggerService.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["sessionmodule",{"_index":178,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/SessionModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["sessionpipe",{"_index":3332,"title":{"injectables/SessionPipe.html":{}},"body":{"controllers/SessionController.html":{},"injectables/SessionPipe.html":{},"coverage.html":{}}}],["sessionrepository",{"_index":3501,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessions",{"_index":3309,"title":{},"body":{"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sessionscounter",{"_index":3498,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionservice",{"_index":667,"title":{"injectables/SessionService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["sessionstatus",{"_index":3292,"title":{},"body":{"entities/Session.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["sessionstatus.active",{"_index":3549,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.completed",{"_index":3551,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.expired",{"_index":3552,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.failed",{"_index":3553,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.fetched",{"_index":3550,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus})@column('varchar",{"_index":3294,"title":{},"body":{"entities/Session.html":{}}}],["sessiontype",{"_index":3566,"title":{},"body":{"injectables/SessionService.html":{}}}],["set",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClaimsQuery.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["set+json",{"_index":3942,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["set+json')@get('jwks.json",{"_index":3920,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["setauthcode",{"_index":725,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["setauthcode(issuer_state",{"_index":747,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["setentry",{"_index":3621,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setentry(id",{"_index":3638,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setexpirationtime(expiresin",{"_index":1901,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setglobalconfig",{"_index":2161,"title":{},"body":{"modules/IssuerModule.html":{}}}],["setinterval(async",{"_index":2403,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["setinterval(callback",{"_index":3546,"title":{},"body":{"injectables/SessionService.html":{}}}],["setissuedat",{"_index":1898,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setissuer(issuer",{"_index":1899,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setmetadata(is_public_key",{"_index":4350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":4369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(session_logger_key",{"_index":4370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setprotectedheader",{"_index":1896,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setprotectedheader(header",{"_index":1639,"title":{},"body":{"classes/DBKeyService.html":{}}}],["setstate",{"_index":3494,"title":{},"body":{"injectables/SessionService.html":{}}}],["setstate(session",{"_index":3527,"title":{},"body":{"injectables/SessionService.html":{}}}],["setsubject(options.subject",{"_index":1900,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["settimeout",{"_index":3094,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["setup",{"_index":3815,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["setuptenant",{"_index":3791,"title":{},"body":{"injectables/TenantService.html":{}}}],["setuptenant(tenant",{"_index":3804,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["sha",{"_index":1443,"title":{},"body":{"injectables/CredentialsService.html":{},"miscellaneous/variables.html":{}}}],["sha256",{"_index":1799,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["shape",{"_index":4197,"title":{},"body":{"miscellaneous/functions.html":{}}}],["shouldenableautologging",{"_index":2541,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["shouldlog",{"_index":3430,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["show",{"_index":2463,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["shuffel",{"_index":3650,"title":{},"body":{"injectables/StatusListService.html":{}}}],["shuffled",{"_index":3636,"title":{},"body":{"injectables/StatusListService.html":{}}}],["sign",{"_index":2320,"title":{},"body":{"entities/KeyEntity.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/S3FileStorage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sign(privatekeyinstance",{"_index":1640,"title":{},"body":{"classes/DBKeyService.html":{}}}],["signalg",{"_index":1440,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["signature",{"_index":1502,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["signature).catch((err",{"_index":2977,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["signaturebase64url",{"_index":4345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signed",{"_index":3962,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["signedjwt",{"_index":2772,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwt.length",{"_index":2778,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwtlength",{"_index":2777,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signer",{"_index":827,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["signer(tenantid",{"_index":1574,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["signing",{"_index":405,"title":{},"body":{"controllers/AuthController.html":{},"entities/CertEntity.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/StatusListService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["signjwt",{"_index":1542,"title":{},"body":{"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{}}}],["signjwt(payload",{"_index":1576,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["simplicity",{"_index":2992,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["singleline",{"_index":254,"title":{},"body":{"modules/AppModule.html":{}}}],["size",{"_index":1804,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"injectables/StatusListService.html":{}}}],["skip",{"_index":1237,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["slice(1",{"_index":1851,"title":{},"body":{"injectables/FilesService.html":{}}}],["someone",{"_index":3142,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["somewhere",{"_index":558,"title":{},"body":{"injectables/AuthService.html":{}}}],["sort",{"_index":3654,"title":{},"body":{"injectables/StatusListService.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/ClientSecretResponseDto.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["specific",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/FilesService.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["specified",{"_index":3957,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["sqlite",{"_index":1662,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["sqlite3",{"_index":4144,"title":{},"body":{"dependencies.html":{}}}],["src",{"_index":2517,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src.pipe(write",{"_index":2519,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/.../auth",{"_index":4239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authentication",{"_index":4151,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../cert.entity.ts",{"_index":4232,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../client.provider.ts",{"_index":4241,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../combined.schema.ts",{"_index":4255,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../config",{"_index":4242,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../crypto",{"_index":4233,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../crypto.service.ts",{"_index":4244,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database",{"_index":4243,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ed25519.ts",{"_index":4245,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../helpers.ts",{"_index":4171,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../issuer",{"_index":4247,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../key",{"_index":4248,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../keys.entity.ts",{"_index":4235,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../log",{"_index":4249,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":4170,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../media",{"_index":4152,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../policies.dto.ts",{"_index":4236,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../presentation",{"_index":4154,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../public.decorator.ts",{"_index":4246,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../registrar",{"_index":4250,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.enum.ts",{"_index":4155,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":4251,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../secure.decorator.ts",{"_index":4173,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../session",{"_index":4252,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session.decorator.ts",{"_index":4174,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../session.entity.ts",{"_index":4156,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../storage",{"_index":4253,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../storage.module.ts",{"_index":4234,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../storage.types.ts",{"_index":4237,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../tenant.entity.ts",{"_index":4238,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../token.decorator.ts",{"_index":4254,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../util.ts",{"_index":4172,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../validation.schema.ts",{"_index":4240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../webhook.dto.ts",{"_index":4150,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/app.controller.ts",{"_index":142,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app/app.controller.ts:8",{"_index":145,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/dto/oidc",{"_index":3980,"title":{},"body":{"coverage.html":{}}}],["src/auth/auth",{"_index":3983,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.controller.ts",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:106",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:67",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:89",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard.ts",{"_index":2184,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/auth.guard.ts:12",{"_index":2191,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.guard.ts:7",{"_index":2189,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":415,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:128",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:15",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:34",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/client/adapters/internal",{"_index":1933,"title":{},"body":{"injectables/InternalClientsProvider.html":{},"coverage.html":{}}}],["src/auth/client/adapters/keycloak",{"_index":2366,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"coverage.html":{}}}],["src/auth/client/client.controller.ts",{"_index":961,"title":{},"body":{"controllers/ClientController.html":{},"coverage.html":{}}}],["src/auth/client/client.controller.ts:26",{"_index":979,"title":{},"body":{"controllers/ClientController.html":{}}}],["src/auth/client/client.controller.ts:37",{"_index":977,"title":{},"body":{"controllers/ClientController.html":{}}}],["src/auth/client/client.controller.ts:42",{"_index":982,"title":{},"body":{"controllers/ClientController.html":{}}}],["src/auth/client/client.controller.ts:53",{"_index":970,"title":{},"body":{"controllers/ClientController.html":{}}}],["src/auth/client/client.controller.ts:64",{"_index":974,"title":{},"body":{"controllers/ClientController.html":{}}}],["src/auth/client/client.provider.ts",{"_index":1034,"title":{},"body":{"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/client/client.provider.ts:10",{"_index":1056,"title":{},"body":{"interfaces/ClientsProvider.html":{}}}],["src/auth/client/client.provider.ts:13",{"_index":1058,"title":{},"body":{"interfaces/ClientsProvider.html":{}}}],["src/auth/client/client.provider.ts:17",{"_index":1035,"title":{},"body":{"classes/ClientView.html":{}}}],["src/auth/client/client.provider.ts:18",{"_index":1036,"title":{},"body":{"classes/ClientView.html":{}}}],["src/auth/client/client.provider.ts:19",{"_index":1038,"title":{},"body":{"classes/ClientView.html":{}}}],["src/auth/client/client.provider.ts:20",{"_index":1037,"title":{},"body":{"classes/ClientView.html":{}}}],["src/auth/client/client.provider.ts:6",{"_index":1055,"title":{},"body":{"interfaces/ClientsProvider.html":{}}}],["src/auth/client/client.provider.ts:7",{"_index":1054,"title":{},"body":{"interfaces/ClientsProvider.html":{}}}],["src/auth/client/client.provider.ts:8",{"_index":1053,"title":{},"body":{"interfaces/ClientsProvider.html":{}}}],["src/auth/client/client.provider.ts:9",{"_index":1052,"title":{},"body":{"interfaces/ClientsProvider.html":{}}}],["src/auth/client/dto/client",{"_index":1031,"title":{},"body":{"classes/ClientSecretResponseDto.html":{},"coverage.html":{}}}],["src/auth/client/dto/create",{"_index":1059,"title":{},"body":{"classes/CreateClientDto.html":{},"coverage.html":{}}}],["src/auth/client/entities/client.entity.ts",{"_index":1009,"title":{},"body":{"entities/ClientEntity.html":{},"coverage.html":{}}}],["src/auth/client/entities/client.entity.ts:16",{"_index":1014,"title":{},"body":{"entities/ClientEntity.html":{}}}],["src/auth/client/entities/client.entity.ts:23",{"_index":1022,"title":{},"body":{"entities/ClientEntity.html":{}}}],["src/auth/client/entities/client.entity.ts:29",{"_index":1026,"title":{},"body":{"entities/ClientEntity.html":{}}}],["src/auth/client/entities/client.entity.ts:37",{"_index":1016,"title":{},"body":{"entities/ClientEntity.html":{}}}],["src/auth/client/entities/client.entity.ts:44",{"_index":1019,"title":{},"body":{"entities/ClientEntity.html":{}}}],["src/auth/client/entities/client.entity.ts:54",{"_index":1024,"title":{},"body":{"entities/ClientEntity.html":{}}}],["src/auth/dto/client",{"_index":1005,"title":{},"body":{"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/dto/oidc",{"_index":3998,"title":{},"body":{"coverage.html":{}}}],["src/auth/dto/role.dto.ts",{"_index":3190,"title":{},"body":{"classes/RoleDto.html":{},"coverage.html":{}}}],["src/auth/dto/role.dto.ts:10",{"_index":3192,"title":{},"body":{"classes/RoleDto.html":{}}}],["src/auth/dto/token",{"_index":3835,"title":{},"body":{"classes/TokenResponse.html":{},"coverage.html":{}}}],["src/auth/jwt.service.ts",{"_index":1877,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{}}}],["src/auth/jwt.service.ts:14",{"_index":2203,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:28",{"_index":2205,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:65",{"_index":2207,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:91",{"_index":2206,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":2208,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:10",{"_index":2212,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:24",{"_index":2214,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:31",{"_index":2216,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:59",{"_index":2220,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:83",{"_index":2222,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/public.decorator.ts",{"_index":4003,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/roles/role.enum.ts",{"_index":4159,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/roles/roles.decorator.ts",{"_index":4004,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/roles/roles.guard.ts",{"_index":3195,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/roles/roles.guard.ts:10",{"_index":3197,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/roles/roles.guard.ts:7",{"_index":3196,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/secure.decorator.ts",{"_index":4005,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/auth/tenant/dto/create",{"_index":1065,"title":{},"body":{"classes/CreateTenantDto.html":{},"coverage.html":{}}}],["src/auth/tenant/entitites/tenant.entity.ts",{"_index":3778,"title":{},"body":{"entities/TenantEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/tenant/entitites/tenant.entity.ts:17",{"_index":3783,"title":{},"body":{"entities/TenantEntity.html":{}}}],["src/auth/tenant/entitites/tenant.entity.ts:24",{"_index":3785,"title":{},"body":{"entities/TenantEntity.html":{}}}],["src/auth/tenant/entitites/tenant.entity.ts:32",{"_index":3782,"title":{},"body":{"entities/TenantEntity.html":{}}}],["src/auth/tenant/entitites/tenant.entity.ts:38",{"_index":3787,"title":{},"body":{"entities/TenantEntity.html":{}}}],["src/auth/tenant/entitites/tenant.entity.ts:47",{"_index":3781,"title":{},"body":{"entities/TenantEntity.html":{}}}],["src/auth/tenant/tenant.controller.ts",{"_index":3755,"title":{},"body":{"controllers/TenantController.html":{},"coverage.html":{}}}],["src/auth/tenant/tenant.controller.ts:20",{"_index":3764,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/auth/tenant/tenant.controller.ts:30",{"_index":3766,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/auth/tenant/tenant.controller.ts:40",{"_index":3763,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/auth/tenant/tenant.controller.ts:49",{"_index":3761,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/auth/tenant/tenant.service.ts",{"_index":3789,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["src/auth/tenant/tenant.service.ts:104",{"_index":3801,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:115",{"_index":3805,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:131",{"_index":3799,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:31",{"_index":3795,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:47",{"_index":3803,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:70",{"_index":3802,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:80",{"_index":3800,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:89",{"_index":3797,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/token.decorator.ts",{"_index":1968,"title":{},"body":{"interfaces/InternalTokenPayload.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/crypto.module.ts",{"_index":1523,"title":{},"body":{"modules/CryptoModule.html":{}}}],["src/crypto/crypto.service.ts",{"_index":4013,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/encryption/encryption.service.ts",{"_index":1732,"title":{},"body":{"injectables/EncryptionService.html":{},"coverage.html":{}}}],["src/crypto/encryption/encryption.service.ts:12",{"_index":1740,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:26",{"_index":1752,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:44",{"_index":1750,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:54",{"_index":1742,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:74",{"_index":1749,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/key/adapters/db",{"_index":1533,"title":{},"body":{"classes/DBKeyService.html":{},"coverage.html":{}}}],["src/crypto/key/adapters/vault",{"_index":4020,"title":{},"body":{"coverage.html":{}}}],["src/crypto/key/crypto",{"_index":1477,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/key/dto/key",{"_index":2273,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["src/crypto/key/entities/cert.entity.ts",{"_index":880,"title":{},"body":{"entities/CertEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/entities/cert.entity.ts:21",{"_index":895,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:27",{"_index":902,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:33",{"_index":899,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:39",{"_index":891,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:45",{"_index":904,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:51",{"_index":893,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:57",{"_index":887,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:63",{"_index":906,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts",{"_index":2313,"title":{},"body":{"entities/KeyEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/entities/keys.entity.ts:16",{"_index":2314,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:22",{"_index":2318,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:28",{"_index":2317,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:34",{"_index":2315,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:40",{"_index":2321,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/key",{"_index":4029,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/key/key.controller.ts",{"_index":2286,"title":{},"body":{"controllers/KeyController.html":{},"coverage.html":{}}}],["src/crypto/key/key.controller.ts:37",{"_index":2296,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:48",{"_index":2292,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:63",{"_index":2300,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:77",{"_index":2294,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.module.ts",{"_index":2327,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.module.ts:16",{"_index":2329,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.service.ts",{"_index":2347,"title":{},"body":{"classes/KeyService.html":{},"coverage.html":{}}}],["src/crypto/key/key.service.ts:12",{"_index":2349,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:23",{"_index":2358,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:30",{"_index":2350,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:37",{"_index":2356,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:43",{"_index":2360,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:49",{"_index":2352,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:55",{"_index":2353,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:60",{"_index":2354,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:65",{"_index":2355,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:72",{"_index":2363,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:85",{"_index":2351,"title":{},"body":{"classes/KeyService.html":{}}}],["src/database/database",{"_index":4032,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/database.module.ts",{"_index":1644,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/health/health.controller.ts",{"_index":1913,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:25",{"_index":1922,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1930,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/issuer/authorize/authorize.controller.ts",{"_index":632,"title":{},"body":{"controllers/AuthorizeController.html":{},"coverage.html":{}}}],["src/issuer/authorize/authorize.controller.ts:30",{"_index":648,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:44",{"_index":655,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:65",{"_index":658,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:81",{"_index":645,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.service.ts",{"_index":719,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["src/issuer/authorize/authorize.service.ts:103",{"_index":750,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:206",{"_index":740,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:224",{"_index":732,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:296",{"_index":744,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:303",{"_index":748,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:37",{"_index":731,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:48",{"_index":737,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:55",{"_index":734,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:78",{"_index":746,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/dto/authorize",{"_index":696,"title":{},"body":{"classes/AuthorizeQueries.html":{},"coverage.html":{}}}],["src/issuer/authorize/dto/par",{"_index":2824,"title":{},"body":{"classes/ParResponseDto.html":{},"coverage.html":{}}}],["src/issuer/credentials",{"_index":1348,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"classes/SchemaResponse.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["src/issuer/credentials/credential",{"_index":1166,"title":{},"body":{"injectables/CredentialConfigService.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.controller.ts",{"_index":1322,"title":{},"body":{"controllers/CredentialsController.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.controller.ts:25",{"_index":1330,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:35",{"_index":1332,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:48",{"_index":1328,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.service.ts",{"_index":1367,"title":{},"body":{"injectables/CredentialsService.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.service.ts:107",{"_index":1379,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:203",{"_index":1388,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:229",{"_index":1386,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:23",{"_index":1376,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:46",{"_index":1384,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/dto/credential",{"_index":1149,"title":{},"body":{"classes/CredentialConfigCreate.html":{},"coverage.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts",{"_index":1072,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"coverage.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:100",{"_index":1083,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:105",{"_index":1089,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:111",{"_index":1125,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:116",{"_index":1113,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:120",{"_index":1114,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:123",{"_index":1110,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:128",{"_index":1121,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:133",{"_index":1117,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:139",{"_index":1120,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:172",{"_index":1094,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:179",{"_index":1109,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:34",{"_index":1700,"title":{},"body":{"classes/DisplayImage.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:38",{"_index":1670,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:40",{"_index":1667,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:42",{"_index":1668,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:44",{"_index":1664,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:46",{"_index":1671,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:49",{"_index":1666,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:52",{"_index":1669,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:57",{"_index":2147,"title":{},"body":{"classes/IssuerMetadataCredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:60",{"_index":2146,"title":{},"body":{"classes/IssuerMetadataCredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:63",{"_index":2148,"title":{},"body":{"classes/IssuerMetadataCredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:76",{"_index":1106,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:80",{"_index":1088,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:84",{"_index":1124,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:90",{"_index":1122,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:95",{"_index":1086,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts",{"_index":36,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:24",{"_index":1731,"title":{},"body":{"classes/EmbeddedDisclosurePolicy.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:35",{"_index":49,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:47",{"_index":3208,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:62",{"_index":2826,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:68",{"_index":2828,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:74",{"_index":2827,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:86",{"_index":297,"title":{},"body":{"classes/AttestationBasedPolicy.html":{}}}],["src/issuer/display/display.controller.ts",{"_index":1673,"title":{},"body":{"controllers/DisplayController.html":{},"coverage.html":{}}}],["src/issuer/display/display.controller.ts:26",{"_index":1681,"title":{},"body":{"controllers/DisplayController.html":{}}}],["src/issuer/display/display.controller.ts:37",{"_index":1679,"title":{},"body":{"controllers/DisplayController.html":{}}}],["src/issuer/display/display.service.ts",{"_index":1705,"title":{},"body":{"injectables/DisplayService.html":{},"coverage.html":{}}}],["src/issuer/display/display.service.ts:11",{"_index":1707,"title":{},"body":{"injectables/DisplayService.html":{}}}],["src/issuer/display/display.service.ts:26",{"_index":1710,"title":{},"body":{"injectables/DisplayService.html":{}}}],["src/issuer/display/display.service.ts:38",{"_index":1709,"title":{},"body":{"injectables/DisplayService.html":{}}}],["src/issuer/display/dto/display",{"_index":1689,"title":{},"body":{"classes/DisplayCreateDto.html":{},"coverage.html":{}}}],["src/issuer/display/entities/display.entity.ts",{"_index":1693,"title":{},"body":{"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"coverage.html":{}}}],["src/issuer/display/entities/display.entity.ts:13",{"_index":1703,"title":{},"body":{"classes/DisplayInfo.html":{}}}],["src/issuer/display/entities/display.entity.ts:15",{"_index":1701,"title":{},"body":{"classes/DisplayInfo.html":{}}}],["src/issuer/display/entities/display.entity.ts:19",{"_index":1702,"title":{},"body":{"classes/DisplayInfo.html":{}}}],["src/issuer/display/entities/display.entity.ts:26",{"_index":1695,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["src/issuer/display/entities/display.entity.ts:32",{"_index":1694,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["src/issuer/display/entities/display.entity.ts:40",{"_index":1698,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["src/issuer/display/entities/display.entity.ts:9",{"_index":1704,"title":{},"body":{"classes/DisplayLogo.html":{}}}],["src/issuer/issuance/dto/authentication",{"_index":590,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts",{"_index":1154,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"coverage.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:13",{"_index":1157,"title":{},"body":{"classes/CredentialConfigMapping.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:30",{"_index":2030,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/entities/issuance",{"_index":1975,"title":{},"body":{"entities/IssuanceConfig.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.controller.ts",{"_index":2013,"title":{},"body":{"controllers/IssuanceController.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.controller.ts:20",{"_index":2019,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:30",{"_index":2021,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:46",{"_index":2017,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.service.ts",{"_index":2031,"title":{},"body":{"injectables/IssuanceService.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.service.ts:159",{"_index":2047,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:168",{"_index":2041,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:181",{"_index":2043,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:197",{"_index":2049,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:21",{"_index":2036,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:221",{"_index":2039,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:39",{"_index":2046,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:48",{"_index":2045,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuer",{"_index":2090,"title":{},"body":{"controllers/IssuerManagementController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/issuer/issuer.module.ts",{"_index":2157,"title":{},"body":{"modules/IssuerModule.html":{}}}],["src/issuer/oid4vci/dto/notification",{"_index":2594,"title":{},"body":{"classes/NotificationRequestDto.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/dto/offer",{"_index":2612,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts",{"_index":2635,"title":{},"body":{"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:29",{"_index":2640,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:43",{"_index":2647,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:53",{"_index":2644,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts",{"_index":4056,"title":{},"body":{"coverage.html":{}}}],["src/issuer/oid4vci/util.ts",{"_index":4058,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/issuer/status",{"_index":3579,"title":{},"body":{"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":4061,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/metric/metric.module.ts",{"_index":2585,"title":{},"body":{"modules/MetricModule.html":{}}}],["src/registrar/dto/access",{"_index":6,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["src/registrar/entities/registrar.entity.ts",{"_index":2996,"title":{},"body":{"entities/RegistrarEntity.html":{},"coverage.html":{}}}],["src/registrar/entities/registrar.entity.ts:13",{"_index":3001,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/entities/registrar.entity.ts:16",{"_index":3000,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/entities/registrar.entity.ts:19",{"_index":2999,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/entities/registrar.entity.ts:7",{"_index":3002,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/registrar",{"_index":4062,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/registrar/registrar.module.ts",{"_index":3007,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["src/registrar/registrar.service.ts",{"_index":3013,"title":{},"body":{"injectables/RegistrarService.html":{},"coverage.html":{}}}],["src/registrar/registrar.service.ts:102",{"_index":3046,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:124",{"_index":3043,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:132",{"_index":3048,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:149",{"_index":3035,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:172",{"_index":3039,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:189",{"_index":3031,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:232",{"_index":3033,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:29",{"_index":3054,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:33",{"_index":3052,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:37",{"_index":3027,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:56",{"_index":3042,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:94",{"_index":3040,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/session/entities/session.entity.ts",{"_index":3265,"title":{},"body":{"entities/Session.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/session/entities/session.entity.ts:105",{"_index":3283,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:111",{"_index":3273,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:117",{"_index":3302,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:120",{"_index":3279,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:126",{"_index":3287,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:132",{"_index":3288,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:138",{"_index":3274,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:143",{"_index":3271,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:148",{"_index":3285,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:153",{"_index":3284,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:158",{"_index":3299,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:168",{"_index":3298,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:175",{"_index":3296,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:58",{"_index":3281,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:61",{"_index":3282,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:67",{"_index":3290,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:73",{"_index":3291,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:79",{"_index":3276,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:84",{"_index":3270,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:89",{"_index":3289,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:94",{"_index":3269,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:99",{"_index":3303,"title":{},"body":{"entities/Session.html":{}}}],["src/session/session",{"_index":4065,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/session/session.controller.ts",{"_index":3314,"title":{},"body":{"controllers/SessionController.html":{},"coverage.html":{}}}],["src/session/session.controller.ts:25",{"_index":3321,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:35",{"_index":3325,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:46",{"_index":3320,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:59",{"_index":3329,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.decorator.ts",{"_index":4067,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/session/session.module.ts",{"_index":3477,"title":{},"body":{"modules/SessionModule.html":{}}}],["src/session/session.pipe.ts",{"_index":3482,"title":{},"body":{"injectables/SessionPipe.html":{},"coverage.html":{}}}],["src/session/session.pipe.ts:6",{"_index":3485,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["src/session/session.pipe.ts:9",{"_index":3487,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["src/session/session.service.ts",{"_index":3492,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["src/session/session.service.ts:118",{"_index":3528,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:144",{"_index":3504,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:152",{"_index":3512,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:163",{"_index":3511,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:172",{"_index":3515,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:179",{"_index":3530,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:19",{"_index":3500,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:192",{"_index":3509,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:34",{"_index":3517,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:89",{"_index":3526,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:98",{"_index":3507,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/storage/adapters/local.storage.ts",{"_index":2493,"title":{},"body":{"classes/LocalFileStorage.html":{},"coverage.html":{}}}],["src/storage/adapters/local.storage.ts:13",{"_index":2495,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:16",{"_index":2500,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:37",{"_index":2499,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:42",{"_index":2497,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:46",{"_index":2498,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts",{"_index":3210,"title":{},"body":{"classes/S3FileStorage.html":{},"coverage.html":{}}}],["src/storage/adapters/s3.storage.ts:13",{"_index":3215,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:20",{"_index":3221,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:56",{"_index":3220,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:68",{"_index":3217,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:74",{"_index":3218,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:85",{"_index":3219,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/dto/file",{"_index":1812,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["src/storage/entities/files.entity.ts",{"_index":1772,"title":{},"body":{"entities/FileEntity.html":{},"coverage.html":{}}}],["src/storage/entities/files.entity.ts:13",{"_index":1775,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/storage/entities/files.entity.ts:19",{"_index":1774,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/storage/entities/files.entity.ts:7",{"_index":1773,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/storage/files.service.ts",{"_index":1817,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/storage/files.service.ts:15",{"_index":1823,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:30",{"_index":1835,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:64",{"_index":1831,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:73",{"_index":1824,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:77",{"_index":1830,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:88",{"_index":1827,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/storage",{"_index":4071,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/storage/storage.controller.ts",{"_index":3703,"title":{},"body":{"controllers/StorageController.html":{},"coverage.html":{}}}],["src/storage/storage.controller.ts:43",{"_index":3713,"title":{},"body":{"controllers/StorageController.html":{}}}],["src/storage/storage.controller.ts:51",{"_index":3707,"title":{},"body":{"controllers/StorageController.html":{}}}],["src/storage/storage.module.ts",{"_index":3734,"title":{},"body":{"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/storage/storage.module.ts:17",{"_index":3735,"title":{},"body":{"modules/StorageModule.html":{}}}],["src/storage/storage.types.ts",{"_index":1777,"title":{},"body":{"interfaces/FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/storage/storage.types.ts:21",{"_index":1794,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:27",{"_index":1788,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:31",{"_index":1782,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:33",{"_index":1784,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:35",{"_index":1786,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/utils/config",{"_index":4073,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/utils/logger/log",{"_index":4086,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/logger/logger",{"_index":2531,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["src/utils/logger/session",{"_index":3345,"title":{},"body":{"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/mediatype/media",{"_index":4093,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/utils/webhook/webhook.dto.ts",{"_index":87,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/utils/webhook/webhook.dto.ts:105",{"_index":3866,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:19",{"_index":94,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:24",{"_index":98,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:44",{"_index":3863,"title":{},"body":{"classes/WebHookAuthConfigHeader.html":{}}}],["src/utils/webhook/webhook.dto.ts:51",{"_index":3861,"title":{},"body":{"classes/WebHookAuthConfigHeader.html":{}}}],["src/utils/webhook/webhook.dto.ts:60",{"_index":3864,"title":{},"body":{"classes/WebHookAuthConfigNone.html":{}}}],["src/utils/webhook/webhook.dto.ts:65",{"_index":3859,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:77",{"_index":3867,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.service.ts",{"_index":3869,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["src/utils/webhook/webhook.service.ts:111",{"_index":3910,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:12",{"_index":3870,"title":{},"body":{"classes/WebhookResponse.html":{}}}],["src/utils/webhook/webhook.service.ts:20",{"_index":3906,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:40",{"_index":3908,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/verifier/oid4vp/dto/authorization",{"_index":628,"title":{},"body":{"classes/AuthorizationResponse.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/dto/presentation",{"_index":2882,"title":{},"body":{"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts",{"_index":2672,"title":{},"body":{"controllers/Oid4vpController.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:32",{"_index":2678,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:43",{"_index":2682,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.module.ts",{"_index":2693,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts",{"_index":2698,"title":{},"body":{"injectables/Oid4vpService.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:20",{"_index":2703,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:204",{"_index":2711,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:263",{"_index":2712,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:41",{"_index":2705,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/presentations/dto/auth",{"_index":470,"title":{},"body":{"interfaces/AuthResponse.html":{},"coverage.html":{}}}],["src/verifier/presentations/dto/presentation",{"_index":2848,"title":{},"body":{"classes/PresentationConfigCreateDto.html":{},"coverage.html":{}}}],["src/verifier/presentations/dto/vp",{"_index":3145,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{},"coverage.html":{}}}],["src/verifier/presentations/entities/presentation",{"_index":913,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.controller.ts",{"_index":2853,"title":{},"body":{"controllers/PresentationManagementController.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.controller.ts:102",{"_index":2857,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:114",{"_index":2864,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:130",{"_index":2859,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:70",{"_index":2862,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.module.ts",{"_index":2896,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["src/verifier/presentations/presentations.service.ts",{"_index":2901,"title":{},"body":{"injectables/PresentationsService.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.service.ts:147",{"_index":2926,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:160",{"_index":2939,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:176",{"_index":2920,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:186",{"_index":2924,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:207",{"_index":2941,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:220",{"_index":2948,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:243",{"_index":2946,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:258",{"_index":2944,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:275",{"_index":2934,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:33",{"_index":2915,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:53",{"_index":2930,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:66",{"_index":2927,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/resolver/dto/issuer",{"_index":2145,"title":{},"body":{"interfaces/IssuerMetadata.html":{},"coverage.html":{}}}],["src/verifier/resolver/resolver.module.ts",{"_index":3152,"title":{},"body":{"modules/ResolverModule.html":{}}}],["src/verifier/resolver/resolver.service.ts",{"_index":3154,"title":{},"body":{"injectables/ResolverService.html":{},"coverage.html":{}}}],["src/verifier/resolver/resolver.service.ts:12",{"_index":3157,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/resolver/resolver.service.ts:21",{"_index":3159,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/verifier.module.ts",{"_index":3858,"title":{},"body":{"modules/VerifierModule.html":{}}}],["src/well",{"_index":1281,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["st",{"_index":2523,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["st.size",{"_index":2525,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["stack",{"_index":3407,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["stage",{"_index":2724,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["standardflowenabled",{"_index":2440,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["start",{"_index":2708,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["started",{"_index":3460,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["starting",{"_index":3392,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["startswith(\"http",{"_index":2181,"title":{},"body":{"modules/IssuerModule.html":{}}}],["starttime",{"_index":3393,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["startup",{"_index":4310,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state",{"_index":473,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["statements",{"_index":3978,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":3548,"title":{},"body":{"injectables/SessionService.html":{}}}],["static",{"_index":198,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["statsync",{"_index":2506,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["statsync(fullpath",{"_index":2524,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["status",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTenantDto.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["status_list",{"_index":3677,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuscode",{"_index":279,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["statuslist",{"_index":3643,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslist(entry.elements",{"_index":3661,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslist+jwt",{"_index":3666,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistcontroller",{"_index":3578,"title":{"controllers/StatusListController.html":{}},"body":{"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"coverage.html":{}}}],["statuslistentity",{"_index":3594,"title":{"entities/StatusListEntity.html":{}},"body":{"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"coverage.html":{}}}],["statuslistfetcher",{"_index":2906,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["statuslistjwtheaderparameters",{"_index":3644,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistmodule",{"_index":410,"title":{"modules/StatusListModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"index.html":{},"modules.html":{}}}],["statuslistrepository",{"_index":3624,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistservice",{"_index":1373,"title":{"injectables/StatusListService.html":{}},"body":{"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"index.html":{}}}],["statusmanagement",{"_index":1078,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["statusmapping",{"_index":3614,"title":{"entities/StatusMapping.html":{}},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"coverage.html":{}}}],["statusmappingrepository",{"_index":3623,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statusupdatedto",{"_index":3327,"title":{"classes/StatusUpdateDto.html":{}},"body":{"controllers/SessionController.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["step",{"_index":687,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["still",{"_index":539,"title":{},"body":{"injectables/AuthService.html":{}}}],["stopatfirsterror",{"_index":1253,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["storage",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"injectables/FilesService.html":{},"controllers/StorageController.html":{},"miscellaneous/variables.html":{}}}],["storage.controller",{"_index":3738,"title":{},"body":{"modules/StorageModule.html":{}}}],["storage.types",{"_index":2508,"title":{},"body":{"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"modules/StorageModule.html":{}}}],["storage/files.service",{"_index":3811,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["storage/storage.module",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["storage/storage.types",{"_index":1844,"title":{},"body":{"injectables/FilesService.html":{}}}],["storage_driver",{"_index":4378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["storage_validation_schema",{"_index":4072,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["storagecontroller",{"_index":3702,"title":{"controllers/StorageController.html":{}},"body":{"controllers/StorageController.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["storagemodule",{"_index":179,"title":{"modules/StorageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StorageModule.html":{},"index.html":{},"modules.html":{}}}],["storagemodule.forroot",{"_index":292,"title":{},"body":{"modules/AppModule.html":{}}}],["store",{"_index":1172,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"controllers/Oid4vciController.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["store(tenantid",{"_index":1194,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["storecredentialconfiguration",{"_index":1326,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["storecredentialconfiguration(config",{"_index":1331,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["stored",{"_index":1200,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/FilesService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["storedobject",{"_index":1800,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["storeissuanceconfiguration",{"_index":2016,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["storeissuanceconfiguration(config",{"_index":2020,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["storeissuanceconfiguration(tenantid",{"_index":2048,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["storepresentationconfig",{"_index":2855,"title":{},"body":{"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["storepresentationconfig(config",{"_index":2863,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["storepresentationconfig(tenantid",{"_index":2937,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid",{"_index":2911,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid(registrationcertid",{"_index":2940,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["stores",{"_index":1196,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["strategy",{"_index":2228,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["stream",{"_index":1795,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"controllers/StorageController.html":{}}}],["stream.contenttype",{"_index":3732,"title":{},"body":{"controllers/StorageController.html":{}}}],["stream.size",{"_index":3733,"title":{},"body":{"controllers/StorageController.html":{}}}],["streamablefile",{"_index":3715,"title":{},"body":{"controllers/StorageController.html":{}}}],["streamablefile(stream.stream",{"_index":3729,"title":{},"body":{"controllers/StorageController.html":{}}}],["string",{"_index":19,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/ClientSecretResponseDto.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":4179,"title":{},"body":{"miscellaneous/functions.html":{}}}],["string})@get(':id",{"_index":3324,"title":{},"body":{"controllers/SessionController.html":{}}}],["structure",{"_index":861,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{}}}],["structured",{"_index":3419,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["style",{"_index":4392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sub",{"_index":584,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["subclass",{"_index":1102,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["subclass’s",{"_index":1104,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["subfolder",{"_index":1211,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["subject",{"_index":559,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["subject_types_supported",{"_index":578,"title":{},"body":{"injectables/AuthService.html":{}}}],["subtypes",{"_index":136,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["succeeded",{"_index":3471,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["success",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionService.html":{}}}],["successful",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionService.html":{}}}],["successfully",{"_index":2776,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["such",{"_index":1725,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/Session.html":{}}}],["summarize",{"_index":4194,"title":{},"body":{"miscellaneous/functions.html":{}}}],["summarizeflags",{"_index":4081,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["summarizeflags(flags",{"_index":4191,"title":{},"body":{"miscellaneous/functions.html":{}}}],["summarizes",{"_index":4192,"title":{},"body":{"miscellaneous/functions.html":{}}}],["summarizeschemashape",{"_index":4082,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["summarizeschemashape(s",{"_index":4196,"title":{},"body":{"miscellaneous/functions.html":{}}}],["summarizewhenentry",{"_index":4083,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["summarizewhenentry(w",{"_index":4199,"title":{},"body":{"miscellaneous/functions.html":{}}}],["summary",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["super",{"_index":2197,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["super(config",{"_index":2234,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super(configservice",{"_index":1597,"title":{},"body":{"classes/DBKeyService.html":{}}}],["super.authenticate(req",{"_index":2236,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":2201,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["supersecret",{"_index":4299,"title":{},"body":{"miscellaneous/variables.html":{}}}],["support",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/Session.html":{},"modules.html":{}}}],["supported",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["supportedauthenticationscheme.clientattestationjwt",{"_index":788,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["supports",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{}}}],["svcuser",{"_index":2467,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["svcuser.id",{"_index":2480,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["svg",{"_index":4213,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":3935,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["switch",{"_index":863,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["symbol(\"file_storage",{"_index":1810,"title":{},"body":{"interfaces/FileStorage.html":{},"miscellaneous/variables.html":{}}}],["symmetric",{"_index":2259,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["synchronize",{"_index":1650,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["system",{"_index":1011,"title":{},"body":{"entities/ClientEntity.html":{},"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"injectables/StatusListService.html":{},"entities/TenantEntity.html":{}}}],["t",{"_index":1743,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["table",{"_index":2426,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":4097,"title":{},"body":{"coverage.html":{}}}],["tamper",{"_index":1855,"title":{},"body":{"injectables/FilesService.html":{}}}],["tap",{"_index":3376,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["tap((data",{"_index":3395,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["target",{"_index":250,"title":{},"body":{"modules/AppModule.html":{}}}],["tell",{"_index":1267,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/Oid4vpService.html":{}}}],["temp",{"_index":4303,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tenancy",{"_index":3301,"title":{},"body":{"entities/Session.html":{}}}],["tenant",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"classes/CreateClientDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["tenant.clients",{"_index":1023,"title":{},"body":{"entities/ClientEntity.html":{}}}],["tenant.dto",{"_index":3767,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenant.dto.ts",{"_index":1066,"title":{},"body":{"classes/CreateTenantDto.html":{},"coverage.html":{}}}],["tenant.dto.ts:12",{"_index":1069,"title":{},"body":{"classes/CreateTenantDto.html":{}}}],["tenant.id",{"_index":3087,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenant.isdirectory",{"_index":1220,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenant.name",{"_index":1227,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenant.service",{"_index":3768,"title":{},"body":{"controllers/TenantController.html":{}}}],["tenant/2025/08/14/uuid.ext",{"_index":1802,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["tenant/entitites/tenant.entity",{"_index":447,"title":{},"body":{"modules/AuthModule.html":{},"entities/ClientEntity.html":{},"interfaces/InternalTokenPayload.html":{},"interfaces/TokenPayload.html":{}}}],["tenant/tenant.controller",{"_index":448,"title":{},"body":{"modules/AuthModule.html":{}}}],["tenant/tenant.service",{"_index":449,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["tenant_id",{"_index":548,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/InternalTokenPayload.html":{},"injectables/KeycloakClientsProvider.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/TokenPayload.html":{}}}],["tenant_total",{"_index":464,"title":{},"body":{"modules/AuthModule.html":{}}}],["tenantcontroller",{"_index":416,"title":{"controllers/TenantController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/TenantController.html":{},"coverage.html":{}}}],["tenantentity",{"_index":446,"title":{"entities/TenantEntity.html":{}},"body":{"modules/AuthModule.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"modules/CryptoModule.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["tenantfolders",{"_index":1216,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenanthost",{"_index":2730,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["tenantid",{"_index":276,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateClientDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["tenantid)).uri",{"_index":843,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["tenantid/credentials",{"_index":1351,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["tenantid/status",{"_index":3581,"title":{},"body":{"controllers/StatusListController.html":{}}}],["tenantrepository",{"_index":3793,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenants",{"_index":468,"title":{"interfaces/Tenants.html":{}},"body":{"modules/AuthModule.html":{},"entities/ClientEntity.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["tenants:manage",{"_index":4168,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tenantservice",{"_index":414,"title":{"injectables/TenantService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"index.html":{}}}],["tenantstatus",{"_index":3786,"title":{},"body":{"entities/TenantEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["tenanttotal",{"_index":3794,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["terminusmodule",{"_index":1931,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":4188,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tests",{"_index":4186,"title":{},"body":{"miscellaneous/functions.html":{}}}],["text_color",{"_index":1137,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["textencoder().encode(data",{"_index":4343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textencoder().encode(secret",{"_index":1895,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["then((cert",{"_index":1627,"title":{},"body":{"classes/DBKeyService.html":{}}}],["then((entry",{"_index":1768,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["then((file",{"_index":3669,"title":{},"body":{"injectables/StatusListService.html":{}}}],["then((key",{"_index":1624,"title":{},"body":{"classes/DBKeyService.html":{}}}],["then((res",{"_index":3131,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["then((response",{"_index":3108,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["then((session",{"_index":792,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["then(async",{"_index":1758,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{}}}],["then(clients",{"_index":2432,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["then(e",{"_index":1959,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["then(list",{"_index":1953,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["think",{"_index":538,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.accesstoken",{"_index":3081,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.addaccesscertificate",{"_index":3086,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.addrp(name",{"_index":3085,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.authorizeservice.authorizationchallengeendpoint",{"_index":695,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.authzmetadata",{"_index":3974,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.authorizeservice.sendauthorizationresponse(queries",{"_index":678,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.validatetokenrequest(body",{"_index":693,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authservice.getoauth2token(body",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getoidcdiscovery",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authzmetadata(session",{"_index":805,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.bucket",{"_index":3232,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.certrepository",{"_index":1626,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["this.cfg.getorthrow('oidc",{"_index":2383,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.cfg.getorthrow('oidc_client_id",{"_index":2390,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.cfg.getorthrow('oidc_client_secret",{"_index":2391,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.client",{"_index":3078,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.client.setconfig",{"_index":3079,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.clientrepo.create",{"_index":2484,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.clientrepo.delete",{"_index":2491,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.clientrepo.find",{"_index":2428,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.clientrepo.findone",{"_index":2430,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.clientrepo.save(entity",{"_index":2485,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.clients.addclient(tenant.id",{"_index":3823,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.clients.addclient(user.entity!.id",{"_index":1002,"title":{},"body":{"controllers/ClientController.html":{}}}],["this.clients.getclient(user.entity!.id",{"_index":997,"title":{},"body":{"controllers/ClientController.html":{}}}],["this.clients.getclients(user.entity!.id",{"_index":995,"title":{},"body":{"controllers/ClientController.html":{}}}],["this.clients.getclientsecret(user.entity!.id",{"_index":999,"title":{},"body":{"controllers/ClientController.html":{}}}],["this.clients.removeclient(user.entity!.id",{"_index":1004,"title":{},"body":{"controllers/ClientController.html":{}}}],["this.clients.validateclientcredentials",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.config",{"_index":2566,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enabledebugmode",{"_index":2581,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enablehttplogger",{"_index":2580,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enablesessionlogger",{"_index":2579,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.level",{"_index":2582,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.logformat",{"_index":2583,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice",{"_index":3113,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.get",{"_index":2569,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.configservice.get(\"config_import",{"_index":1215,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.configservice.get(\"config_import_force",{"_index":1214,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.configservice.get(\"jwt_secret",{"_index":1881,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.get(\"log_level",{"_index":2568,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice.get(\"oidc",{"_index":567,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["this.configservice.get(\"public_url\")}/storage/${key",{"_index":1871,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.configservice.get(\"registrar_url",{"_index":3082,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow",{"_index":3069,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"config_folder",{"_index":1210,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.configservice.getorthrow(\"jwt_expires_in",{"_index":1893,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow(\"jwt_issuer",{"_index":1891,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow(\"jwt_secret",{"_index":1890,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow(\"oidc_sub",{"_index":2267,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.configservice.getorthrow(\"public_url",{"_index":566,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{}}}],["this.configservice.getorthrow(\"public_url\")}${req.url",{"_index":797,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${session.id",{"_index":826,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${session.tenantid}/credentials",{"_index":1421,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${values.session}/oid4vp",{"_index":2786,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.configservice.getorthrow(\"registrar_oidc_url",{"_index":3068,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"registrar_url",{"_index":3080,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"session_tidy_up_interval",{"_index":3544,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservice.getorthrow(\"session_ttl",{"_index":3575,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservice.getorthrow('auth_client_id",{"_index":1947,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["this.configservice.getorthrow('auth_client_secret",{"_index":1948,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["this.configservie.get(\"crypto_alg",{"_index":1516,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["this.create(tenant",{"_index":1610,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.create(tenantid",{"_index":1623,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.createlist(entry",{"_index":3658,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.createtenant",{"_index":3817,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.credentialconfigrepo",{"_index":1464,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findby",{"_index":1406,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findonebyorfail",{"_index":1471,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepository.delete",{"_index":1242,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.find",{"_index":1276,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.findonebyorfail",{"_index":1278,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.save",{"_index":1279,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialsconfigservice.getbyid",{"_index":2086,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsconfigservice.import",{"_index":2054,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsservice.delete(user.entity!.id",{"_index":1346,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.get(user.entity!.id",{"_index":1342,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.getschema(id",{"_index":1366,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.getvct(id",{"_index":1363,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.store(user.entity!.id",{"_index":1343,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.crypto",{"_index":1598,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.crypto.alg",{"_index":1616,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.crypto.generatekeypair",{"_index":1611,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.crypto.getsigner(privatekey",{"_index":1621,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.cryptoimplementationservice.getalg",{"_index":1412,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.deletekey(token.entity!.id",{"_index":2312,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.getalg",{"_index":1632,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.cryptoservice.getcallbackcontext(tenantid",{"_index":769,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.cryptoservice.getcertchain",{"_index":1463,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.getcertentry",{"_index":1256,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.cryptoservice.getcerts(token.entity!.id",{"_index":2307,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.getjwks(tenantid).then((key",{"_index":3975,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.cryptoservice.import",{"_index":2053,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.cryptoservice.importkey(token.entity",{"_index":2308,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.keyservice.getkid",{"_index":1436,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.keyservice.getkid(tenantid",{"_index":3112,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.cryptoservice.keyservice.getpublickey",{"_index":830,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["this.cryptoservice.keyservice.signer",{"_index":1439,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.cryptoservice.ontenantinit(tenant",{"_index":3826,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.cryptoservice.signjwt",{"_index":2773,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.storeaccesscertificate",{"_index":3121,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.cryptoservice.updatecert(token.entity!.id",{"_index":2310,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.db.pingcheck(\"database",{"_index":1929,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.displayrepository.create",{"_index":1713,"title":{},"body":{"injectables/DisplayService.html":{}}}],["this.displayrepository.findone",{"_index":1712,"title":{},"body":{"injectables/DisplayService.html":{}}}],["this.displayrepository.save(displayentity",{"_index":1714,"title":{},"body":{"injectables/DisplayService.html":{}}}],["this.displayservice.create(user.entity!.id",{"_index":1688,"title":{},"body":{"controllers/DisplayController.html":{}}}],["this.displayservice.get(user.entity!.id",{"_index":1687,"title":{},"body":{"controllers/DisplayController.html":{}}}],["this.encryptionservice.decryptjwe",{"_index":2799,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.getencryptionpublickey",{"_index":2753,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.ontenantinit(tenant.id",{"_index":3827,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.filerepository.delete",{"_index":1875,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filerepository.find",{"_index":1872,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filerepository.save",{"_index":1863,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filesservice.deletebytenant(tenantid",{"_index":3832,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.filesservice.getstream(key).then",{"_index":3728,"title":{},"body":{"controllers/StorageController.html":{}}}],["this.filesservice.saveuserupload(user.entity!.id",{"_index":3725,"title":{},"body":{"controllers/StorageController.html":{}}}],["this.getauthorizationserver",{"_index":772,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.getauthorizationserver(tenantid).createaccesstokenresponse",{"_index":825,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.getbyid",{"_index":1235,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.getclient('root",{"_index":1950,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["this.getdownloadurl(response.key",{"_index":1864,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.getexistingrp(name",{"_index":3106,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.getissuanceconfigurationbyid",{"_index":2057,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.getkid(tenant).catch(async",{"_index":1609,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.getkid(tenantid).catch",{"_index":1622,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.getpresentationconfig",{"_index":2960,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.getprivatekey(tenantid",{"_index":1620,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.getpubfromprivatekey(privatekeyjwk",{"_index":1635,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.health.check",{"_index":1928,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httpservice.get",{"_index":3180,"title":{},"body":{"injectables/ResolverService.html":{}}}],["this.httpservice.post",{"_index":3885,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.import",{"_index":2055,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.init",{"_index":2408,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.isenabled",{"_index":3066,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.ishttploggerenabled",{"_index":2584,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.issuanceconfigrepo.delete",{"_index":2058,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.find",{"_index":2082,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.findoneorfail",{"_index":2083,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.save",{"_index":2088,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceservice.deleteissuanceconfiguration",{"_index":2029,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfiguration(user.entity!.id",{"_index":2026,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfigurationbyid",{"_index":803,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.issuanceservice.storeissuanceconfiguration",{"_index":2027,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.isusingexternaloidc",{"_index":1888,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.jwtservice.generatetoken(payload",{"_index":553,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.isusingexternaloidc",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.kbverifier.bind(this",{"_index":2957,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.kc",{"_index":2388,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.auth(creds",{"_index":2392,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.clients.create",{"_index":2435,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.clients.del",{"_index":2489,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.clients.find",{"_index":2431,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.clients.generatenewclientsecret",{"_index":2464,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.clients.getserviceaccountuser",{"_index":2468,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.getaccesstoken",{"_index":2394,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.roles.create",{"_index":2418,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.roles.find",{"_index":2470,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.roles.find().then(roles",{"_index":2410,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.kc.users.addrealmrolemappings",{"_index":2479,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["this.keyrepository",{"_index":1601,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{}}}],["this.keyrepository.delete",{"_index":1762,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.keyrepository.save",{"_index":1760,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.loadconfiguration",{"_index":2565,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.logger.error",{"_index":1257,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.info",{"_index":1274,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.setcontext(\"sessionlogger",{"_index":3387,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.logger.setcontext(\"sessionloggerservice",{"_index":3457,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.oauth2client",{"_index":3072,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.oauth2client.clientcredentials().then((token",{"_index":3090,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.oid4vciservice.createoffer",{"_index":2136,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.oid4vciservice.getcredential(req",{"_index":2659,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.handlenotification(req",{"_index":2662,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.issuermetadata(session",{"_index":3967,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.oid4vciservice.noncerequest(session",{"_index":2666,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.ontenantinit(tenant.id",{"_index":3830,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.oid4vpservice.createauthorizationrequest(session",{"_index":2687,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.oid4vpservice.createrequest",{"_index":2872,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.oid4vpservice.createrequest(\"pid",{"_index":842,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.oid4vpservice.getresponse(body",{"_index":2688,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.ontenantinit(session.tenantid).then",{"_index":3671,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.parsechallengerequest",{"_index":867,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.parseloglevel",{"_index":2567,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.presentationsservice.deletepresentationconfig",{"_index":2881,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.getpresentationconfig",{"_index":2732,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.getpresentationconfigs",{"_index":2878,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.parseresponse",{"_index":2809,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.storepresentationconfig",{"_index":2879,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.storercid",{"_index":3143,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.publicbaseurl",{"_index":3239,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.publicbaseurl.replace",{"_index":3240,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.reflector.get",{"_index":3379,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.reflector.getallandoverride",{"_index":2198,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["this.refreshaccesstoken",{"_index":3083,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarrepository.delete",{"_index":3089,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarrepository.findonebyorfail",{"_index":3127,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarrepository.save",{"_index":3088,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarservice.addregistrationcertificate",{"_index":2738,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.isenabled",{"_index":2736,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.ontenantinit(tenant",{"_index":3829,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.repo.delete",{"_index":1966,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["this.repo.find",{"_index":1952,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["this.repo.findone",{"_index":1958,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["this.repo.save",{"_index":1951,"title":{},"body":{"injectables/InternalClientsProvider.html":{}}}],["this.resolverservice.resolvepublickey",{"_index":2974,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.s3",{"_index":3250,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.s3.send",{"_index":3231,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.sanitizebody(request.body",{"_index":3391,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.schedulerregistry.addinterval(\"tidyupsessions",{"_index":3547,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sdjwtinstance",{"_index":2955,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.sendauthorizationcode(res",{"_index":853,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionlogger.logauthorizationrequest(logcontext",{"_index":2741,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logcredentialverification",{"_index":2811,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowcomplete(logcontext",{"_index":2822,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowerror(logcontext",{"_index":2781,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowstart(logcontext",{"_index":2726,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logsession",{"_index":2775,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionlogger.logsession(logcontext",{"_index":3879,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionlogger.logsessionerror",{"_index":3896,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionrepository.countby",{"_index":3555,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.delete",{"_index":3559,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.find",{"_index":3571,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail",{"_index":3572,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail(where",{"_index":3573,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.save(session",{"_index":3561,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.update",{"_index":3567,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.dec",{"_index":3570,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.inc",{"_index":3563,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.set",{"_index":3557,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionservice",{"_index":790,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.add(body.issuer_state",{"_index":688,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.sessionservice.add(issuer_state",{"_index":876,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.add(res.state",{"_index":2815,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.add(session.id",{"_index":2739,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionservice.add(values.session",{"_index":2798,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.create",{"_index":2793,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.delete(id",{"_index":3341,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.get(body.auth_session",{"_index":849,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.get(body.issuer_state",{"_index":857,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.get(sessionid",{"_index":3490,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["this.sessionservice.getall",{"_index":3338,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.setauthcode(issuer_state",{"_index":874,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setauthcode(values.issuer_state",{"_index":795,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setentry(entry.index",{"_index":3684,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.setuptenant(tenant",{"_index":3822,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.shouldlog",{"_index":3458,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.statuslistfetcher.bind(this",{"_index":2958,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.statuslistrepository",{"_index":3668,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.delete",{"_index":3659,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.findonebyorfail",{"_index":3672,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.save",{"_index":3657,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.update",{"_index":3667,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistservice.createentry",{"_index":1451,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.statuslistservice.getlist(tenantid",{"_index":3593,"title":{},"body":{"controllers/StatusListController.html":{}}}],["this.statuslistservice.ontenantinit(tenant.id",{"_index":3828,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.statuslistservice.updatestatus(value",{"_index":3344,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.statusmappingrepository.delete",{"_index":3660,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statusmappingrepository.findby",{"_index":3680,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statusmappingrepository.save",{"_index":3676,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.storage.delete(file.id",{"_index":1874,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storage.getsignedurl",{"_index":1868,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storage.getsignedurl(key",{"_index":1869,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storage.put(key",{"_index":1858,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.store(tenant.name",{"_index":1270,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.storeissuanceconfiguration",{"_index":2081,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.storepresentationconfig(tenant.name",{"_index":2962,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.tenantrepository.count",{"_index":3818,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantrepository.delete",{"_index":3834,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantrepository.find",{"_index":3820,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantrepository.findoneby",{"_index":3816,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantrepository.findoneorfail",{"_index":3825,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantrepository.save(data",{"_index":3821,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantrepository.update",{"_index":3831,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantservice",{"_index":2269,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.tenantservice.createtenant(data",{"_index":3773,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantservice.deletetenant(id",{"_index":3777,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantservice.getall",{"_index":3771,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantservice.gettenant(id",{"_index":3775,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenanttotal.set",{"_index":3819,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tidyupsessions",{"_index":3542,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.verifier.bind(this",{"_index":2956,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository",{"_index":2967,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.delete",{"_index":2961,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.find",{"_index":2963,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.save",{"_index":2966,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.update",{"_index":2969,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.webhookservice.sendwebhook",{"_index":2821,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.wellknownservice.getauthzmetadata(session",{"_index":3941,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.wellknownservice.getissuermetadata(session",{"_index":3939,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.wellknownservice.getjwks(session.tenantid",{"_index":3945,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["throw",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionPipe.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["tick",{"_index":2407,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["tidy",{"_index":3519,"title":{},"body":{"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["tidyupsessions",{"_index":3495,"title":{},"body":{"injectables/SessionService.html":{}}}],["time",{"_index":1456,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/ParResponseDto.html":{}}}],["timestamp",{"_index":888,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["title",{"_index":3251,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["toassign",{"_index":2471,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["toassign.length",{"_index":2478,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["toassign.map(r",{"_index":2481,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["todo",{"_index":238,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/FilesService.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"modules/MetricModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["token",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/InternalTokenPayload.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"controllers/StorageController.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["token(body",{"_index":656,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["token.accesstoken",{"_index":3091,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["token.decorator",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ClientController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["token_endpoint",{"_index":569,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["token_endpoint_auth_methods_supported",{"_index":575,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["token_exchange",{"_index":3472,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["token_type",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/TokenResponse.html":{}}}],["tokenpayload",{"_index":969,"title":{"interfaces/TokenPayload.html":{}},"body":{"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/InternalTokenPayload.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenresponse",{"_index":330,"title":{"classes/TokenResponse.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/TokenResponse.html":{},"coverage.html":{}}}],["tokens",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/KeycloakClientsProvider.html":{}}}],["tolowercase",{"_index":1850,"title":{},"body":{"injectables/FilesService.html":{}}}],["toodo",{"_index":2060,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["tostring(\"ascii",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{}}}],["total",{"_index":466,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["tracking",{"_index":2890,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{}}}],["transform",{"_index":3483,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["transform(sessionid",{"_index":3486,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["transformer",{"_index":51,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["translatetime",{"_index":255,"title":{},"body":{"modules/AppModule.html":{}}}],["transport",{"_index":249,"title":{},"body":{"modules/AppModule.html":{}}}],["true",{"_index":48,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"classes/NoneTrustPolicy.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"controllers/StorageController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["true})@column('json",{"_index":1093,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@column({type",{"_index":1018,"title":{},"body":{"entities/ClientEntity.html":{}}}],["true})@isnumber",{"_index":1116,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isoptional()@isobject",{"_index":1082,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isoptional()@isstring",{"_index":2836,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@isoptional()@validate(webhookconfig)@type(undefined",{"_index":2845,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@isstring",{"_index":2838,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@type(undefined",{"_index":296,"title":{},"body":{"classes/AttestationBasedPolicy.html":{},"classes/CredentialQuery.html":{},"classes/DCQL.html":{},"classes/PolicyCredential.html":{}}}],["trust",{"_index":3169,"title":{},"body":{"injectables/ResolverService.html":{}}}],["trusted",{"_index":935,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["trusted_authorities",{"_index":943,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["trustedauthorityquery",{"_index":937,"title":{"classes/TrustedAuthorityQuery.html":{}},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["try",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/Oid4vpService.html":{},"classes/S3FileStorage.html":{}}}],["trying",{"_index":2405,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["ttl",{"_index":3574,"title":{},"body":{"injectables/SessionService.html":{}}}],["two",{"_index":3958,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["txcode",{"_index":767,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["typ",{"_index":2766,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["type",{"_index":20,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"controllers/ClientController.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/ClientSecretResponseDto.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type(undefined)@isobject",{"_index":3860,"title":{},"body":{"classes/WebHookAuthConfigHeader.html":{}}}],["type.decorator",{"_index":3929,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["type.decorator.ts",{"_index":4094,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":3930,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["type.enum.ts",{"_index":4153,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typealiases",{"_index":4230,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":3064,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["typeorm",{"_index":427,"title":{},"body":{"modules/AuthModule.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"entities/FileEntity.html":{},"injectables/FilesService.html":{},"injectables/InternalClientsProvider.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"dependencies.html":{}}}],["typeorm/query",{"_index":3538,"title":{},"body":{"injectables/SessionService.html":{}}}],["typeorm/repository/repository",{"_index":1588,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"modules/KeyModule.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["typeormhealthindicator",{"_index":1924,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormmodule",{"_index":421,"title":{},"body":{"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{}}}],["typeormmodule.forfeature",{"_index":2178,"title":{},"body":{"modules/IssuerModule.html":{}}}],["typeormmodule.forfeature([certentity",{"_index":1531,"title":{},"body":{"modules/CryptoModule.html":{},"modules/KeyModule.html":{}}}],["typeormmodule.forfeature([fileentity",{"_index":3740,"title":{},"body":{"modules/StorageModule.html":{}}}],["typeormmodule.forfeature([presentationconfig",{"_index":2900,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["typeormmodule.forfeature([registrarentity",{"_index":3012,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["typeormmodule.forfeature([session",{"_index":3479,"title":{},"body":{"modules/SessionModule.html":{}}}],["typeormmodule.forfeature([statusmapping",{"_index":3617,"title":{},"body":{"modules/StatusListModule.html":{}}}],["typeormmodule.forfeature([tenantentity",{"_index":450,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1646,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleoptions",{"_index":1645,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":2322,"title":{},"body":{"entities/KeyEntity.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":3098,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["typically",{"_index":1302,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{}}}],["unauthorizedexception",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(\"invalid",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":1092,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/OfferRequestDto.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"classes/RoleDto.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"classes/WebhookConfig.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apiproduces('application/json",{"_index":2099,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["undefined})@apiresponse({status",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isarray",{"_index":1317,"title":{},"body":{"classes/CredentialSetQuery.html":{}}}],["undefined})@isobject()@isoptional",{"_index":2614,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["undefined})@post('offer",{"_index":2101,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["undefined})@post('request",{"_index":2861,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["undefined})@type(undefined",{"_index":1091,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/WebhookConfig.html":{}}}],["union",{"_index":1098,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["unique",{"_index":26,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/ClientEntity.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["unknown",{"_index":742,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/InternalClientsProvider.html":{},"interfaces/InternalTokenPayload.html":{},"injectables/IssuanceService.html":{},"injectables/KeycloakClientsProvider.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["unknown(true",{"_index":4298,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsecure",{"_index":2179,"title":{},"body":{"modules/IssuerModule.html":{}}}],["unsigned",{"_index":3960,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["unsupported",{"_index":871,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["up",{"_index":151,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/variables.html":{}}}],["update",{"_index":2943,"title":{},"body":{"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["update.dto",{"_index":2303,"title":{},"body":{"controllers/KeyController.html":{},"controllers/SessionController.html":{},"injectables/StatusListService.html":{}}}],["update.dto.ts",{"_index":3696,"title":{},"body":{"classes/StatusUpdateDto.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["update.dto.ts:16",{"_index":3697,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:24",{"_index":3700,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:8",{"_index":3698,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["updated",{"_index":908,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["updatedat",{"_index":884,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["updatedatecolumn",{"_index":905,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["updatekey",{"_index":2290,"title":{},"body":{"controllers/KeyController.html":{}}}],["updatekey(token",{"_index":2297,"title":{},"body":{"controllers/KeyController.html":{}}}],["updatekeydto",{"_index":2298,"title":{"classes/UpdateKeyDto.html":{}},"body":{"controllers/KeyController.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["updates",{"_index":2301,"title":{},"body":{"controllers/KeyController.html":{}}}],["updatestatus",{"_index":3622,"title":{},"body":{"injectables/StatusListService.html":{}}}],["updatestatus(value",{"_index":3640,"title":{},"body":{"injectables/StatusListService.html":{}}}],["upload",{"_index":1839,"title":{},"body":{"injectables/FilesService.html":{},"controllers/StorageController.html":{}}}],["upload(user",{"_index":3708,"title":{},"body":{"controllers/StorageController.html":{}}}],["upload.dto",{"_index":3720,"title":{},"body":{"controllers/StorageController.html":{}}}],["upload.dto.ts",{"_index":1813,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["upload.dto.ts:5",{"_index":1815,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["uploaded",{"_index":1837,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadedfile",{"_index":3716,"title":{},"body":{"controllers/StorageController.html":{}}}],["uploading",{"_index":1838,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploads",{"_index":4385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uri",{"_index":1133,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["url",{"_index":126,"title":{},"body":{"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/variables.html":{}}}],["url(payload.iss).hostname",{"_index":3174,"title":{},"body":{"injectables/ResolverService.html":{}}}],["urls",{"_index":4393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urn:${randomuuid",{"_index":682,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["usage",{"_index":1761,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"miscellaneous/typealiases.html":{}}}],["use",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/EC_Public.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":106,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"classes/ClaimsQuery.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CryptoImplementationService.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["usedclaims",{"_index":1430,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["useexternaloidc",{"_index":2230,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usefactory",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["useful",{"_index":2443,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"interfaces/SessionLogContext.html":{}}}],["useinterceptors",{"_index":2648,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StorageController.html":{}}}],["useinterceptors(fileinterceptor(\"file",{"_index":3723,"title":{},"body":{"controllers/StorageController.html":{}}}],["useinterceptors(sessionloggerinterceptor",{"_index":2656,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["useinterceptors(undefined)@secured(['undefined'])@apiconsumes('multipart/form",{"_index":3709,"title":{},"body":{"controllers/StorageController.html":{}}}],["usekeycloak",{"_index":455,"title":{},"body":{"modules/AuthModule.html":{}}}],["user",{"_index":271,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/ClientController.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"interfaces/InternalTokenPayload.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/KeycloakClientsProvider.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"guards/RolesGuard.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/SessionModule.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["user.entity!.id",{"_index":2028,"title":{},"body":{"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["user.roles?.includes(role",{"_index":3204,"title":{},"body":{"guards/RolesGuard.html":{}}}],["usermodel",{"_index":2458,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["username",{"_index":1656,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":603,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["uses",{"_index":1916,"title":{},"body":{"controllers/HealthController.html":{},"injectables/SessionLoggerService.html":{}}}],["using",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["utf8",{"_index":1232,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["utility",{"_index":4201,"title":{},"body":{"miscellaneous/functions.html":{}}}],["utils/config",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["utils/logger//session",{"_index":2652,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["utils/logger/session",{"_index":2162,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["utils/mediatype/media",{"_index":3928,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["utils/webhook/webhook.dto",{"_index":598,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["utils/webhook/webhook.service",{"_index":2165,"title":{},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["uuid",{"_index":1590,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"dependencies.html":{}}}],["v4",{"_index":1589,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["valid",{"_index":851,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["valid(\"db",{"_index":4353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid(\"es256",{"_index":4318,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid(\"json",{"_index":4362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid(\"local",{"_index":4379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid(\"sqlite",{"_index":4321,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid(\"trace",{"_index":4359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":659,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/ClaimsQuery.html":{},"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["validate(config",{"_index":1245,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/PresentationsService.html":{}}}],["validate(issuancedto",{"_index":2061,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["validate(payload",{"_index":2221,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(webhookconfig",{"_index":960,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["validateclientcredentials",{"_index":1051,"title":{},"body":{"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{}}}],["validateclientcredentials(clientid",{"_index":1057,"title":{},"body":{"interfaces/ClientsProvider.html":{},"injectables/InternalClientsProvider.html":{}}}],["validateclientcredentials?(clientid",{"_index":1048,"title":{},"body":{"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{}}}],["validated",{"_index":2223,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatenested",{"_index":57,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["validatenested()@apiproperty({oneof",{"_index":3865,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["validatenested()@type(undefined",{"_index":1665,"title":{},"body":{"classes/Display.html":{},"classes/DisplayInfo.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/KeyImportDto.html":{}}}],["validatenested()@type(undefined)@column('json",{"_index":1697,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["validatenested()@type(undefined)@isoptional",{"_index":2616,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["validatetokenrequest",{"_index":726,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["validatetokenrequest(body",{"_index":749,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["validation",{"_index":1263,"title":{},"body":{"injectables/CredentialConfigService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["validation.schema",{"_index":1880,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["validation.schema.ts",{"_index":3984,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["validation_schema",{"_index":218,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validationerror",{"_index":1259,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors",{"_index":1244,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors.length",{"_index":1266,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors.map((error",{"_index":2079,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationschema",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":58,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntity.html":{},"classes/CreateTenantDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["value",{"_index":93,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/StatusListService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.config",{"_index":1419,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.credentialconfigids",{"_index":2085,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.credentialconfigurationid",{"_index":3682,"title":{},"body":{"injectables/StatusListService.html":{}}}],["value.embeddeddisclosurepolicy",{"_index":1423,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.id",{"_index":1418,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.sessionid",{"_index":3681,"title":{},"body":{"injectables/StatusListService.html":{}}}],["value.status",{"_index":3685,"title":{},"body":{"injectables/StatusListService.html":{}}}],["values",{"_index":41,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"interfaces/InternalTokenPayload.html":{},"controllers/IssuerManagementController.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/SessionService.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["values.session",{"_index":2783,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["values.uri",{"_index":2875,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["values.webhook",{"_index":2794,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["varchar",{"_index":3688,"title":{},"body":{"entities/StatusMapping.html":{}}}],["variable",{"_index":3525,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["variables",{"_index":4190,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":122,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["vault",{"_index":2338,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vault_token",{"_index":4357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vault_url",{"_index":4355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vaultkeyservice",{"_index":2333,"title":{},"body":{"modules/KeyModule.html":{},"coverage.html":{}}}],["vc",{"_index":1401,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["vcs",{"_index":2903,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vct",{"_index":1079,"title":{"classes/VCT.html":{}},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["vct(@param(\"id",{"_index":1361,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["vct(id",{"_index":1355,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["verbose",{"_index":2574,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["verifiable",{"_index":932,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["verification",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{}}}],["verification.'})@apiresponse({status",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["verificationcounter",{"_index":3558,"title":{},"body":{"injectables/SessionService.html":{}}}],["verificationresult",{"_index":3275,"title":{},"body":{"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["verified",{"_index":3277,"title":{},"body":{"entities/Session.html":{}}}],["verifier",{"_index":1498,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["verifier/oid4vp/dto/presentation",{"_index":2108,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["verifier/oid4vp/oid4vp.module",{"_index":2166,"title":{},"body":{"modules/IssuerModule.html":{}}}],["verifier/oid4vp/oid4vp.service",{"_index":759,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifier/presentations/dto/vp",{"_index":3056,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["verifier/presentations/entities/presentation",{"_index":62,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["verifier/presentations/presentations.module",{"_index":3009,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["verifier/presentations/presentations.service",{"_index":3057,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["verifier/verifier.module",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["verifier_attestations",{"_index":2765,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["verifiermodule",{"_index":180,"title":{"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["verify",{"_index":780,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["verify(data",{"_index":2976,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verify(res.vp_token[att",{"_index":2989,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verifyauthorizationcodeaccesstokenrequest",{"_index":821,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifying",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifypreauthorizedcodeaccesstokenrequest",{"_index":809,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifytoken",{"_index":2202,"title":{},"body":{"injectables/JwtService.html":{}}}],["verifytoken(token",{"_index":1906,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["version",{"_index":4216,"title":{},"body":{"properties.html":{}}}],["via",{"_index":686,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{}}}],["void",{"_index":2375,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["vp",{"_index":480,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["vp_formats",{"_index":2754,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["vp_nonce",{"_index":2740,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["vp_token",{"_index":474,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["vprequest",{"_index":2938,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequestrepository",{"_index":2914,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vps",{"_index":2902,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["w",{"_index":4200,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wallet",{"_index":836,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"properties.html":{}}}],["want",{"_index":75,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/FilesService.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["warn",{"_index":2576,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["we'll",{"_index":2132,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["web",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"entities/StatusListEntity.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["webhook",{"_index":110,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth",{"_index":3900,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth.config.value",{"_index":3903,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth.type",{"_index":3901,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth?.type",{"_index":3905,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.url",{"_index":3904,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhookauthconfig",{"_index":113,"title":{"classes/WebHookAuthConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookauthconfigheader",{"_index":111,"title":{"classes/WebHookAuthConfigHeader.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookauthconfignone",{"_index":118,"title":{"classes/WebHookAuthConfigNone.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookconfig",{"_index":125,"title":{"classes/WebhookConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookresponse",{"_index":3868,"title":{"classes/WebhookResponse.html":{}},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["webhookresponse.data",{"_index":3889,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhookresponse.status",{"_index":3894,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhooks",{"_index":91,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["webhooksent",{"_index":2823,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookservice",{"_index":2156,"title":{"injectables/WebhookService.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["webhookurl",{"_index":3881,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webook",{"_index":2817,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["weborigins",{"_index":2441,"title":{},"body":{"injectables/KeycloakClientsProvider.html":{}}}],["well",{"_index":222,"title":{},"body":{"modules/AppModule.html":{},"classes/DBKeyService.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["wellknowncontroller",{"_index":186,"title":{"controllers/WellKnownController.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["wellknownservice",{"_index":181,"title":{"injectables/WellKnownService.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["when(\"db_type",{"_index":4325,"title":{},"body":{"miscellaneous/variables.html":{}}}],["when(\"km_type",{"_index":4356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["when(\"oidc",{"_index":4263,"title":{},"body":{"miscellaneous/variables.html":{}}}],["when(\"registrar_url",{"_index":4367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["when(joi.ref(\"storage_driver",{"_index":4382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whether",{"_index":1840,"title":{},"body":{"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["whitelist",{"_index":1246,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["whose",{"_index":1828,"title":{},"body":{"injectables/FilesService.html":{}}}],["willsoto/nestjs",{"_index":424,"title":{},"body":{"modules/AuthModule.html":{},"modules/MetricModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["withfiletypes",{"_index":1218,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["working",{"_index":4302,"title":{},"body":{"miscellaneous/variables.html":{}}}],["write",{"_index":2515,"title":{},"body":{"classes/LocalFileStorage.html":{},"injectables/RegistrarService.html":{}}}],["writing",{"_index":3139,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["wrong",{"_index":1268,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["wrtites",{"_index":1550,"title":{},"body":{"classes/DBKeyService.html":{}}}],["x",{"_index":1721,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["x509_san_dns",{"_index":2747,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509_san_dns:${hostname",{"_index":2785,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509certificate",{"_index":3162,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x509certificate(buffer.from(cert",{"_index":3171,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x5c",{"_index":1462,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["y",{"_index":1722,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["yes",{"_index":741,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"interfaces/FileStorage.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"miscellaneous/functions.html":{}}}],["you’ll",{"_index":1046,"title":{},"body":{"classes/ClientView.html":{},"interfaces/ClientsProvider.html":{}}}],["yyyy",{"_index":256,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccessCertificateResponse.html":{"url":"interfaces/AccessCertificateResponse.html","title":"interface - AccessCertificateResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccessCertificateResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/dto/access-certificate-response.ts\n        \n\n\n            \n                Description\n            \n            \n                Repsonse of access certificate request.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            crt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revoked\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        crt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        crt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The public key in PEM format.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier of the access certificate.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revoked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revoked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates if the access certificate is revoked.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AccessCertificateResponse {\n    /**\n     * Unique identifier of the access certificate.\n     */\n    id: string;\n    /**\n     * The public key in PEM format.\n     */\n    crt: string;\n    /**\n     * Indicates if the access certificate is revoked.\n     */\n    revoked?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllowListPolicy.html":{"url":"classes/AllowListPolicy.html","title":"class - AllowListPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllowListPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                allowList\n\n            \n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                policy\n                            \n                            \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['allowList'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:31\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApiKeyConfig.html":{"url":"classes/ApiKeyConfig.html","title":"class - ApiKeyConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiKeyConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for API key authentication in webhooks.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                headerName\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        headerName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:19\n                        \n                    \n\n            \n                \n                    The name of the header where the API key will be sent.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:24\n                        \n                    \n\n            \n                \n                    The value of the API key to be sent in the header.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    auth?: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                main\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        main\n                        \n                    \n                \n            \n            \n                \n                        \n                    main()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport { ApiExcludeController } from \"@nestjs/swagger\";\n\n@ApiExcludeController()\n@Controller()\nexport class AppController {\n    @Get()\n    main(): string {\n        return 'EUDIPLO is up and running, more information at https://openwallet-foundation-labs.github.io/eudiplo/latest/';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nMetricModule\n\nMetricModule\n\nAppModule -->\n\nMetricModule->AppModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nStorageModule\n\nStorageModule\n\nAppModule -->\n\nStorageModule->AppModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nWellKnownService\n\nWellKnownService\n\nAppModule -->\n\nWellKnownService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WellKnownService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            WellKnownController\n                        \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CryptoModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            KeyModule\n                        \n                        \n                            MetricModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StorageModule\n                        \n                        \n                            VerifierModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { MulterModule } from \"@nestjs/platform-express\";\nimport { ScheduleModule } from \"@nestjs/schedule\";\nimport { ServeStaticModule } from \"@nestjs/serve-static\";\nimport { memoryStorage } from \"multer\";\nimport { LoggerModule } from \"nestjs-pino\";\nimport { isAbsolute, join } from \"path\";\nimport { AppController } from \"./app/app.controller\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { CryptoModule } from \"./crypto/crypto.module\";\nimport { KeyModule } from \"./crypto/key/key.module\";\nimport { DatabaseModule } from \"./database/database.module\";\nimport { HealthModule } from \"./health/health.module\";\nimport { IssuerModule } from \"./issuer/issuer.module\";\nimport { MetricModule } from \"./metric/metric.module\";\nimport { RegistrarModule } from \"./registrar/registrar.module\";\nimport { SessionModule } from \"./session/session.module\";\nimport { StorageModule } from \"./storage/storage.module\";\nimport { VALIDATION_SCHEMA } from \"./utils/config-printer/combined.schema\";\nimport { VerifierModule } from \"./verifier/verifier.module\";\nimport { WellKnownController } from \"./well-known/well-known.controller\";\nimport { WellKnownService } from \"./well-known/well-known.service\";\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            validationSchema: VALIDATION_SCHEMA,\n            isGlobal: true,\n            expandVariables: true,\n        }),\n        LoggerModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const enableHttpLogger = configService.get(\n                    \"LOG_ENABLE_HTTP_LOGGER\",\n                    false,\n                );\n                //TODO: check if logging to file is needed: https://github.com/iamolegga/nestjs-pino?tab=readme-ov-file#asynchronous-logging\n                return {\n                    pinoHttp: {\n                        level: configService.get(\"LOG_LEVEL\", \"info\"),\n                        autoLogging: enableHttpLogger,\n                        transport: {\n                            target: \"pino-pretty\",\n                            options: {\n                                colorize: true,\n                                singleLine: false,\n                                translateTime: \"yyyy-mm-dd HH:MM:ss\",\n                                ignore: \"pid,hostname\",\n                            },\n                        },\n                        customProps: (req: any) => ({\n                            sessionId: req.params?.session,\n                        }),\n                        serializers: {\n                            req: (req: any) => ({\n                                method: req.method,\n                                url: req.url,\n                                headers: {\n                                    \"user-agent\": req.headers[\"user-agent\"],\n                                    \"content-type\": req.headers[\"content-type\"],\n                                },\n                                sessionId: req.params?.session,\n                                tenantId: req.params?.tenantId,\n                            }),\n                            res: (res: any) => ({\n                                statusCode: res.statusCode,\n                            }),\n                        },\n                    },\n                };\n            },\n        }),\n        AuthModule,\n        KeyModule.forRoot(),\n        MulterModule.register({\n            storage: memoryStorage(),\n        }),\n        CryptoModule,\n        IssuerModule,\n        VerifierModule,\n        RegistrarModule,\n        ScheduleModule.forRoot(),\n        ServeStaticModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const folder = configService.getOrThrow(\"FOLDER\");\n                const rootPath = isAbsolute(folder)\n                    ? join(folder, \"public\")\n                    : join(__dirname, \"../\", folder, \"public\");\n                return [\n                    {\n                        rootPath,\n                    },\n                ];\n            },\n        }),\n        DatabaseModule,\n        SessionModule,\n        DatabaseModule,\n        HealthModule,\n        MetricModule,\n        StorageModule.forRoot(),\n    ],\n    controllers: [WellKnownController, AppController],\n    providers: [WellKnownService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AttestationBasedPolicy.html":{"url":"classes/AttestationBasedPolicy.html","title":"class - AttestationBasedPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AttestationBasedPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                policy\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['attestationBased'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:80\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PolicyCredential[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:86\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Authentication Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                getGlobalJwks\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                getOAuth2Token\n                            \n                            \n                                    \n                                    \n                                    \n                                getOidcDiscovery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getGlobalJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGlobalJwks()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('.well-known/jwks.json')@ApiOperation({summary: 'JSON Web Key Set', description: 'Returns the JSON Web Key Set for token verification.'})@ApiResponse({status: 200, description: 'JSON Web Key Set'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:106\n                        \n                    \n\n\n            \n                \n                        Global JWKS endpoint for client credentials flow.\nThis provides the JSON Web Key Set for verifying tokens issued by this server.\n\n\n                        \n                            Returns :         KeyResponseDto\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        getOAuth2Token\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOAuth2Token(body: any, headers: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('oauth2/token')@ApiBody({type: ClientCredentialsDto, examples: undefined})@ApiResponse({status: 200, description: 'OAuth2 token response', type: TokenResponse, examples: undefined})@ApiResponse({status: 401, description: 'Invalid client credentials'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:67\n                        \n                    \n\n\n            \n                \n                        OAuth2 Token endpoint - supports client credentials flow only\nAccepts client credentials either in Authorization header (Basic auth) or request body\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getOidcDiscovery\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOidcDiscovery()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('.well-known/oauth-authorization-server')@ApiOperation({summary: 'OIDC Discovery Configuration', description: 'Returns the OpenID Connect discovery configuration for client credentials authentication.'})@ApiResponse({status: 200, description: 'OIDC Discovery Configuration'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:89\n                        \n                    \n\n\n            \n                \n                        OIDC Discovery endpoint for client credentials flow.\nThis endpoint provides the OpenID Connect configuration for applications\nthat need to authenticate using client_id and client_secret.\n\n\n                        \n                            Returns :         OidcDiscoveryDto\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Headers, Post } from \"@nestjs/common\";\nimport {\n    ApiBody,\n    ApiExcludeController,\n    ApiExtraModels,\n    ApiOperation,\n    ApiResponse,\n    ApiTags,\n} from \"@nestjs/swagger\";\nimport { KeyResponseDto } from \"../crypto/key/dto/key-response.dto\";\nimport { AuthService } from \"./auth.service\";\nimport { ClientCredentialsDto } from \"./dto/client-credentials.dto\";\nimport { OidcDiscoveryDto } from \"./dto/oidc-discovery.dto\";\nimport { RoleDto } from \"./dto/role.dto\";\nimport { TokenResponse } from \"./dto/token-response.dto\";\n\n/**\n * Authentication Controller\n */\n@ApiExtraModels(RoleDto)\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@ApiTags(\"Authentication\")\n@Controller()\nexport class AuthController {\n    constructor(private authService: AuthService) {}\n\n    /**\n     * OAuth2 Token endpoint - supports client credentials flow only\n     * Accepts client credentials either in Authorization header (Basic auth) or request body\n     * @param body\n     * @param headers\n     * @returns\n     */\n    @Post(\"oauth2/token\")\n    @ApiBody({\n        type: ClientCredentialsDto,\n        examples: {\n            client_credentials: {\n                summary: \"Client Credentials Flow\",\n                value: {\n                    grant_type: \"client_credentials\",\n                    client_id: \"root\",\n                    client_secret: \"root\",\n                },\n            },\n        },\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"OAuth2 token response\",\n        type: TokenResponse,\n        examples: {\n            success: {\n                summary: \"Successful response\",\n                value: {\n                    access_token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n                    token_type: \"Bearer\",\n                    expires_in: 86400,\n                },\n            },\n        },\n    })\n    @ApiResponse({\n        status: 401,\n        description: \"Invalid client credentials\",\n    })\n    getOAuth2Token(\n        @Body() body: any,\n        @Headers() headers: any,\n    ): Promise {\n        return this.authService.getOAuth2Token(body, headers);\n    }\n\n    /**\n     * OIDC Discovery endpoint for client credentials flow.\n     * This endpoint provides the OpenID Connect configuration for applications\n     * that need to authenticate using client_id and client_secret.\n     */\n    @Get(\".well-known/oauth-authorization-server\")\n    @ApiOperation({\n        summary: \"OIDC Discovery Configuration\",\n        description:\n            \"Returns the OpenID Connect discovery configuration for client credentials authentication.\",\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"OIDC Discovery Configuration\",\n    })\n    getOidcDiscovery(): OidcDiscoveryDto {\n        return this.authService.getOidcDiscovery();\n    }\n\n    /**\n     * Global JWKS endpoint for client credentials flow.\n     * This provides the JSON Web Key Set for verifying tokens issued by this server.\n     */\n    @Get(\".well-known/jwks.json\")\n    @ApiOperation({\n        summary: \"JSON Web Key Set\",\n        description: \"Returns the JSON Web Key Set for token verification.\",\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"JSON Web Key Set\",\n    })\n    getGlobalJwks(): KeyResponseDto {\n        // For now, return an empty key set since the actual keys are tenant-specific\n        // This can be enhanced later to include global signing keys if needed\n        return {\n            keys: [],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCryptoModule->AuthModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nAuthModule -->\n\nIssuerModule->AuthModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAuthModule -->\n\nRegistrarModule->AuthModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAuthModule -->\n\nSessionModule->AuthModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nAuthModule -->\n\nStatusListModule->AuthModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nTenantService\n\nTenantService\n\nAuthModule -->\n\nTenantService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            TenantService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            TenantController\n                        \n                        \n                            ClientController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { getRepositoryToken, TypeOrmModule } from \"@nestjs/typeorm\";\nimport { makeGaugeProvider } from \"@willsoto/nestjs-prometheus\";\nimport { Repository } from \"typeorm\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { IssuerModule } from \"../issuer/issuer.module\";\nimport { StatusListModule } from \"../issuer/status-list/status-list.module\";\nimport { RegistrarModule } from \"../registrar/registrar.module\";\nimport { SessionModule } from \"../session/session.module\";\nimport { AuthController } from \"./auth.controller\";\nimport { JwtAuthGuard } from \"./auth.guard\";\nimport { AuthService } from \"./auth.service\";\nimport { InternalClientsProvider } from \"./client/adapters/internal-clients.service\";\nimport { KeycloakClientsProvider } from \"./client/adapters/keycloak-clients.service\";\nimport { ClientController } from \"./client/client.controller\";\nimport { CLIENTS_PROVIDER, ClientsProvider } from \"./client/client.provider\";\nimport { ClientEntity } from \"./client/entities/client.entity\";\nimport { JwtService } from \"./jwt.service\";\nimport { JwtStrategy } from \"./jwt.strategy\";\nimport { TenantEntity } from \"./tenant/entitites/tenant.entity\";\nimport { TenantController } from \"./tenant/tenant.controller\";\nimport { TenantService } from \"./tenant/tenant.service\";\n@Module({\n    imports: [\n        PassportModule,\n        ConfigModule,\n        CryptoModule,\n        StatusListModule,\n        RegistrarModule,\n        SessionModule,\n        IssuerModule,\n        TypeOrmModule.forFeature([TenantEntity, ClientEntity]),\n    ],\n    providers: [\n        JwtStrategy,\n        JwtAuthGuard,\n        JwtService,\n        TenantService,\n        {\n            provide: CLIENTS_PROVIDER,\n            inject: [ConfigService, getRepositoryToken(ClientEntity)],\n            useFactory: (\n                cfg: ConfigService,\n                repo: Repository,\n            ): ClientsProvider => {\n                const useKeycloak = !!cfg.get(\"OIDC\"); // if OIDC base/realm is configured, pick KC\n                return useKeycloak\n                    ? new KeycloakClientsProvider(cfg, repo)\n                    : new InternalClientsProvider(cfg, repo);\n            },\n        },\n        makeGaugeProvider({\n            name: \"tenant_total\",\n            help: \"Total number of tenants\",\n        }),\n        AuthService,\n    ],\n    controllers: [AuthController, TenantController, ClientController],\n    exports: [\n        CLIENTS_PROVIDER,\n        PassportModule,\n        JwtStrategy,\n        JwtAuthGuard,\n        JwtService,\n    ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResponse.html":{"url":"interfaces/AuthResponse.html","title":"interface - AuthResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/auth-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthResponse DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            state\n                                        \n                                \n                                \n                                        \n                                            vp_token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The state parameter to maintain state between the request and callback.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vp_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        vp_token:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The VP token containing the presentation data.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AuthResponse {\n    /**\n     * The VP token containing the presentation data.\n     */\n    vp_token: {\n        /**\n         * Key-value pairs representing the VP token data.\n         */\n        [key: string]: string;\n    };\n    /**\n     * The state parameter to maintain state between the request and callback.\n     */\n    state: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getOAuth2Token\n                            \n                            \n                                getOidcDiscovery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, clients: InternalClientsProvider, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor for AuthService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                        JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clients\n                                                  \n                                                        \n                                                                        InternalClientsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOAuth2Token\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOAuth2Token(body: any, headers: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Get OAuth2 token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOidcDiscovery\n                        \n                    \n                \n            \n            \n                \ngetOidcDiscovery()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:128\n                        \n                    \n\n\n            \n                \n                        Get OIDC Discovery configuration\n\n\n                        \n                            Returns :         OidcDiscoveryDto\n\n                        \n                            \n                                OIDC Discovery configuration\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InternalClientsProvider } from \"./client/adapters/internal-clients.service\";\nimport { CLIENTS_PROVIDER } from \"./client/client.provider\";\nimport { OidcDiscoveryDto } from \"./dto/oidc-discovery.dto\";\nimport { TokenResponse } from \"./dto/token-response.dto\";\nimport { JwtService } from \"./jwt.service\";\nimport { Role } from \"./roles/role.enum\";\nimport { InternalTokenPayload } from \"./token.decorator\";\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n    /**\n     * Constructor for AuthService\n     * @param jwtService\n     * @param tenantService\n     * @param configService\n     */\n    constructor(\n        private jwtService: JwtService,\n        @Inject(CLIENTS_PROVIDER) private clients: InternalClientsProvider,\n        private configService: ConfigService,\n    ) {}\n\n    /**\n     * Get OAuth2 token\n     * @param body\n     * @param headers\n     * @returns\n     */\n    async getOAuth2Token(body: any, headers: any): Promise {\n        if (this.jwtService.isUsingExternalOIDC()) {\n            throw new UnauthorizedException(\n                \"OAuth2 token endpoint is not available when using external OIDC provider. Use your external OIDC provider for authentication.\",\n            );\n        }\n\n        // Only support client credentials flow\n        if (body.grant_type !== \"client_credentials\") {\n            throw new UnauthorizedException(\n                \"Only client_credentials grant type is supported\",\n            );\n        }\n\n        let clientId: string;\n        let clientSecret: string;\n\n        // Try to extract credentials from Authorization header (Basic auth)\n        const authHeader = headers.authorization;\n        if (authHeader && authHeader.startsWith(\"Basic \")) {\n            try {\n                const base64Credentials = authHeader.substring(6);\n                const credentials = Buffer.from(\n                    base64Credentials,\n                    \"base64\",\n                ).toString(\"ascii\");\n                const [id, secret] = credentials.split(\":\");\n                clientId = id;\n                clientSecret = secret;\n            } catch {\n                throw new UnauthorizedException(\n                    \"Invalid Authorization header format\",\n                );\n            }\n        } else {\n            // Fall back to request body\n            clientId = body.client_id;\n            clientSecret = body.client_secret;\n        }\n\n        if (!clientId || !clientSecret) {\n            throw new UnauthorizedException(\n                \"Client credentials must be provided either in Authorization header (Basic auth) or request body\",\n            );\n        }\n\n        const client = await this.clients.validateClientCredentials(\n            clientId,\n            clientSecret,\n        );\n\n        if (!client) {\n            throw new UnauthorizedException(\"Invalid client credentials\");\n        }\n\n        //TODO: check if the access token should only include the session id or also e.g. the credentials that should be issued. I would think this is not required since we still need the claims for it.\n        const payload: InternalTokenPayload = {\n            roles: [\n                Role.IssuanceOffer,\n                Role.PresentationOffer,\n                Role.Issuances,\n                Role.Presentations,\n                Role.Clients,\n                Role.Tenants,\n            ],\n            tenant_id: client.tenantId!,\n        };\n\n        //TODO: make expiresIn configurable?\n        const access_token = await this.jwtService.generateToken(payload, {\n            expiresIn: \"24h\",\n            audience: \"eudiplo-service\",\n            //TODO: check if the clientId should be saved here or somewhere else like in client_id\n            subject: clientId,\n        });\n\n        const refresh_token = await this.jwtService.generateToken(payload, {\n            expiresIn: \"30d\",\n            audience: \"eudiplo-service\",\n            subject: clientId,\n        });\n\n        return {\n            access_token,\n            refresh_token,\n            token_type: \"Bearer\",\n            expires_in: 86400, // 24 hours in seconds\n        };\n    }\n\n    /**\n     * Get OIDC Discovery configuration\n     * @returns OIDC Discovery configuration\n     */\n    getOidcDiscovery(): OidcDiscoveryDto {\n        const publicUrl = this.configService.getOrThrow(\"PUBLIC_URL\");\n        const oidc = this.configService.get(\"OIDC\");\n\n        return {\n            issuer: oidc ?? publicUrl,\n            token_endpoint: `${publicUrl}/oauth2/token`,\n            jwks_uri: `${publicUrl}/.well-known/jwks.json`,\n            response_types_supported: [\"token\"],\n            grant_types_supported: [\"client_credentials\"],\n            token_endpoint_auth_methods_supported: [\n                \"client_secret_basic\",\n                \"client_secret_post\",\n            ],\n            subject_types_supported: [\"public\"],\n            id_token_signing_alg_values_supported: [\"ES256\"],\n            scopes_supported: [\"openid\"],\n            claims_supported: [\"iss\", \"sub\", \"aud\", \"exp\", \"iat\"],\n            service_documentation:\n                \"https://openwallet-foundation-labs.github.io/eudiplo/latest/\",\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationMethodAuth.html":{"url":"classes/AuthenticationMethodAuth.html","title":"class - AuthenticationMethodAuth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationMethodAuth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            AuthenticationMethodInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                method\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationUrlConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['auth'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:59\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthenticationMethodInterface.html":{"url":"interfaces/AuthenticationMethodInterface.html","title":"interface - AuthenticationMethodInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthenticationMethodInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            method\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:     \"none\" | \"auth\" | \"presentationDuringIssuance\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"none\" | \"auth\" | \"presentationDuringIssuance\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationMethodNone.html":{"url":"classes/AuthenticationMethodNone.html","title":"class - AuthenticationMethodNone","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationMethodNone\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            AuthenticationMethodInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                method\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['none'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:69\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationMethodPresentation.html":{"url":"classes/AuthenticationMethodPresentation.html","title":"class - AuthenticationMethodPresentation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationMethodPresentation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            AuthenticationMethodInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                method\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PresentationDuringIssuanceConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['presentationDuringIssuance'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:49\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationUrlConfig.html":{"url":"classes/AuthenticationUrlConfig.html","title":"class - AuthenticationUrlConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationUrlConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for authentication method 'auth'\nUsed for OID4VCI authorized code flow where the user will be redirected for authentication\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                url\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:21\n                        \n                    \n\n            \n                \n                    The URL used in the OID4VCI authorized code flow.\nThis URL is where users will be redirected for authentication.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:29\n                        \n                    \n\n            \n                \n                    Optional webhook configuration for authentication callbacks\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizationResponse.html":{"url":"classes/AuthorizationResponse.html","title":"class - AuthorizationResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizationResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/authorization-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the authorization response containing the VP token.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                response\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/authorization-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The response string containing the authorization details.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from \"class-validator\";\n\n/**\n * DTO for the authorization response containing the VP token.\n */\nexport class AuthorizationResponse {\n    /**\n     * The response string containing the authorization details.\n     */\n    @IsString()\n    response: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthorizeController.html":{"url":"controllers/AuthorizeController.html","title":"controller - AuthorizeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthorizeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/authorize\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI authorization endpoints.\nThis controller handles the authorization requests, token requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authorizationChallengeEndpoint\n                            \n                            \n                                    \n                                authorize\n                            \n                            \n                                    \n                                    \n                                    Async\n                                par\n                            \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response, body: AuthorizeQueries, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('challenge')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:81\n                        \n                    \n\n\n            \n                \n                        Endpoint for the authorization challenge.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorize\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorize(queries: AuthorizeQueries, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:30\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Authorization Request.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        par\n                        \n                    \n                \n            \n            \n                \n                        \n                    par(body: AuthorizeQueries)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({description: 'Pushed Authorization Request', type: AuthorizeQueries})@Post('par')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:44\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Pushed Authorization Request (PAR).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n            \n                \n                        \n                    token(body: any, req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('token')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:65\n                        \n                    \n\n\n            \n                \n                        Endpoint to validate the token request.\nThis endpoint is used to exchange the authorization code for an access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { Body, Controller, Get, Post, Query, Req, Res } from \"@nestjs/common\";\nimport { ApiBody, ApiExcludeController } from \"@nestjs/swagger\";\nimport type { Request, Response } from \"express\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionEntity } from \"../../session/session.decorator\";\nimport { SessionService } from \"../../session/session.service\";\nimport { AuthorizeService } from \"./authorize.service\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\nimport { ParResponseDto } from \"./dto/par-response.dto\";\n\n/**\n * Controller for the OpenID4VCI authorization endpoints.\n * This controller handles the authorization requests, token requests.\n */\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@Controller(\":session/authorize\")\nexport class AuthorizeController {\n    constructor(\n        private readonly authorizeService: AuthorizeService,\n        private sessionService: SessionService,\n    ) {}\n\n    /**\n     * Endpoint to handle the Authorization Request.\n     * @param queries\n     * @param res\n     */\n    @Get()\n    authorize(@Query() queries: AuthorizeQueries, @Res() res: Response) {\n        return this.authorizeService.sendAuthorizationResponse(queries, res);\n    }\n\n    /**\n     * Endpoint to handle the Pushed Authorization Request (PAR).\n     * @param body\n     * @returns\n     */\n    @ApiBody({\n        description: \"Pushed Authorization Request\",\n        type: AuthorizeQueries,\n    })\n    @Post(\"par\")\n    async par(@Body() body: AuthorizeQueries): Promise {\n        const request_uri = `urn:${randomUUID()}`;\n        // save both so we can retrieve the session also via the request_uri in the authorize step.\n        await this.sessionService.add(body.issuer_state!, {\n            request_uri,\n            auth_queries: body,\n        });\n        return {\n            expires_in: 500,\n            request_uri,\n        };\n    }\n\n    /**\n     * Endpoint to validate the token request.\n     * This endpoint is used to exchange the authorization code for an access token.\n     * @param body\n     * @param req\n     * @returns\n     */\n    @Post(\"token\")\n    token(\n        @Body() body: any,\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ): Promise {\n        //TODO: define body\n        return this.authorizeService.validateTokenRequest(body, req, session);\n    }\n\n    /**\n     * Endpoint for the authorization challenge.\n     * @param res\n     * @param body\n     * @returns\n     */\n    @Post(\"challenge\")\n    authorizationChallengeEndpoint(\n        @Res() res: Response,\n        @Body() body: AuthorizeQueries,\n        @SessionEntity() session: Session,\n    ) {\n        return this.authorizeService.authorizationChallengeEndpoint(\n            res,\n            body,\n            session,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizeQueries.html":{"url":"classes/AuthorizeQueries.html","title":"class - AuthorizeQueries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizeQueries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/authorize-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                auth_session\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                client_id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge_method\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                dpop_jkt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                issuer_state\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                redirect_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resource\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        auth_session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge_method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        dpop_jkt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        issuer_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        redirect_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\n\nexport class AuthorizeQueries {\n    @IsOptional()\n    @IsString()\n    issuer_state?: string;\n    @IsOptional()\n    @IsString()\n    response_type?: string;\n    @IsOptional()\n    @IsString()\n    client_id?: string;\n    @IsOptional()\n    @IsString()\n    redirect_uri?: string;\n    @IsOptional()\n    @IsString()\n    resource?: string;\n    @IsOptional()\n    @IsString()\n    scope?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge_method?: string;\n    @IsOptional()\n    @IsString()\n    dpop_jkt?: string;\n    @IsOptional()\n    @IsString()\n    request_uri?: string;\n    @IsOptional()\n    @IsString()\n    auth_session?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthorizeService.html":{"url":"injectables/AuthorizeService.html","title":"injectable - AuthorizeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthorizeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authorizationChallengeEndpoint\n                            \n                            \n                                authzMetadata\n                            \n                            \n                                getAuthorizationServer\n                            \n                            \n                                    Async\n                                parseChallengeRequest\n                            \n                            \n                                    Private\n                                    Async\n                                sendAuthorizationCode\n                            \n                            \n                                    Async\n                                sendAuthorizationResponse\n                            \n                            \n                                    Async\n                                setAuthCode\n                            \n                            \n                                    Async\n                                validateTokenRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, oid4vpService: Oid4vpService, sessionService: SessionService, issuanceService: IssuanceService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/authorize/authorize.service.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vpService\n                                                  \n                                                        \n                                                                        Oid4vpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issuanceService\n                                                  \n                                                        \n                                                                        IssuanceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response>, body: AuthorizeQueries, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:224\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \nauthzMetadata(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     AuthorizationServerMetadata\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthorizationServer\n                        \n                    \n                \n            \n            \n                \ngetAuthorizationServer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Oauth2AuthorizationServer\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        parseChallengeRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseChallengeRequest(body: AuthorizeQueries, tenantId: string, webhook?: WebhookConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:206\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                webhook\n                                            \n                                                            WebhookConfig\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        sendAuthorizationCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationCode(res: Response, issuer_state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:296\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendAuthorizationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationResponse(queries: AuthorizeQueries, res: Response>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setAuthCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAuthCode(issuer_state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:303\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateTokenRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateTokenRequest(body: any, req: Request, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from \"@openid4vc/oauth2\";\nimport type { Request, Response } from \"express\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\nimport { Oid4vpService } from \"../../verifier/oid4vp/oid4vp.service\";\nimport { IssuanceService } from \"../issuance/issuance.service\";\nimport { getHeadersFromRequest } from \"../oid4vci/util\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow(\"PUBLIC_URL\") +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: [\"ES256\"],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        \"request_uri not found or not provided in the request\",\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                \"request_uri not found or not provided in the request\",\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow(\"PUBLIC_URL\")}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.id}`,\n            signer: {\n                method: \"jwk\",\n                alg: \"ES256\",\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    \"jwk\",\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: \"wallet\", // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest(\"pid\", { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: \"insufficient_authorization\",\n            auth_session,\n            presentation,\n            error_description:\n                \"Presentation of credential required before issuance\",\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    \"Session does not have valid credentials for issuance\",\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                issuanceId,\n                session.tenantId,\n            );\n\n        // Use the new authentication configuration structure\n        const authConfig = issuanceConfig.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                \"No authentication configuration found for issuance config\",\n            );\n        }\n\n        switch (authConfig.method) {\n            case \"presentationDuringIssuance\": {\n                // OID4VP flow - credential presentation required\n                const webhook = issuanceConfig.claimsWebhook;\n                const response = await this.parseChallengeRequest(\n                    body,\n                    session.tenantId,\n                    webhook,\n                );\n                res.status(400).send(response);\n                break;\n            }\n            case \"auth\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            case \"none\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            default:\n                throw new Error(\n                    `Unsupported authentication method: ${(authConfig as any).method}`,\n                );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CertEntity.html":{"url":"entities/CertEntity.html","title":"entity - CertEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CertEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/cert.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage certificates for keys.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                crt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:57\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:39\n                        \n                    \n\n            \n                \n                    Certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:51\n                        \n                    \n\n            \n                \n                    Description of the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:21\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:33\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:27\n                        \n                    \n\n            \n                \n                    Tenant ID for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CertificateType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {default: 'signing', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:45\n                        \n                    \n\n            \n                \n                    Type of the certificate (access or signing).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:63\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\n\nexport type CertificateType = \"access\" | \"signing\";\n\n/**\n * Entity to manage certificates for keys.\n */\n@Entity()\nexport class CertEntity {\n    /**\n     * Unique identifier for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    id: string;\n\n    /**\n     * Tenant ID for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Certificate in PEM format.\n     */\n    @Column(\"varchar\")\n    crt: string;\n\n    /**\n     * Type of the certificate (access or signing).\n     */\n    @Column(\"varchar\", { default: \"signing\", primary: true })\n    type: CertificateType;\n\n    /**\n     * Description of the key.\n     */\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClaimsQuery.html":{"url":"classes/ClaimsQuery.html","title":"class - ClaimsQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClaimsQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                path\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:84\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ClientController.html":{"url":"controllers/ClientController.html","title":"controller - ClientController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ClientController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client/client.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                client\n            \n\n\n            \n                Description\n            \n            \n                Controller to manage clients.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createClient\n                            \n                            \n                                    \n                                deleteClient\n                            \n                            \n                                    \n                                getClient\n                            \n                            \n                                    \n                                getClients\n                            \n                            \n                                    \n                                getClientSecret\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    createClient(createClientDto: CreateClientDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/client/client.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Create a new client\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createClientDto\n                                            \n                                                            CreateClientDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteClient(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/client/client.controller.ts:64\n                        \n                    \n\n\n            \n                \n                        Get a client by its id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClient(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/client/client.controller.ts:37\n                        \n                    \n\n\n            \n                \n                        Get a client by its id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClients(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/client/client.controller.ts:26\n                        \n                    \n\n\n            \n                \n                        Get all clients for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getClientSecret\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClientSecret(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/secret')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/client/client.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Inject, Param, Post } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Secured } from '../secure.decorator';\nimport { Role } from '../roles/role.enum';\nimport { Token, TokenPayload } from '../token.decorator';\nimport { CreateClientDto } from './dto/create-client.dto';\nimport { CLIENTS_PROVIDER, ClientsProvider } from './client.provider';\nimport { ClientSecretResponseDto } from './dto/client-secret-response.dto';\n\n/**\n * Controller to manage clients.\n */\n@ApiTags('client')\n@Secured([Role.Clients, Role.Tenants])\n@Controller('client')\nexport class ClientController {\n    \n    constructor(@Inject(CLIENTS_PROVIDER) private clients: ClientsProvider) {}\n\n    /**\n     * Get all clients for a user\n     * @param user \n     * @returns \n     */\n    @Get()\n    getClients(@Token() user: TokenPayload) {\n        return this.clients.getClients(user.entity!.id);\n    }\n\n    /**\n     * Get a client by its id\n     * @param id \n     * @param user \n     * @returns \n     */\n    @Get(':id')\n    getClient(@Param('id') id: string, @Token() user: TokenPayload) {\n        return this.clients.getClient(user.entity!.id, id);\n    }\n\n    @Get(':id/secret')\n    getClientSecret(@Param('id') id: string, @Token() user: TokenPayload): Promise {\n        return this.clients.getClientSecret(user.entity!.id, id).then(secret => ({ secret }));\n    }\n\n    /**\n     * Create a new client\n     * @param createClientDto \n     * @param user \n     * @returns \n     */\n    @Post()\n    createClient(@Body() createClientDto: CreateClientDto, @Token() user: TokenPayload) {\n        return this.clients.addClient(user.entity!.id, createClientDto);\n    }\n\n    /**\n     * Get a client by its id\n     * @param id \n     * @param user \n     * @returns \n     */\n    @Delete(':id')\n    deleteClient(@Param('id') id: string, @Token() user: TokenPayload) {\n        return this.clients.removeClient(user.entity!.id, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClientCredentialsDto.html":{"url":"classes/ClientCredentialsDto.html","title":"class - ClientCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClientCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/client-credentials.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                client_id\n                            \n                            \n                                    \n                                client_secret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from \"class-validator\";\n\nexport class ClientCredentialsDto {\n    @IsString()\n    client_id: string;\n    @IsString()\n    client_secret: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ClientEntity.html":{"url":"entities/ClientEntity.html","title":"entity - ClientEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ClientEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client/entities/client.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a client in the system that belongs to a tenant.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                clientId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                roles\n                            \n                            \n                                    \n                                    \n                                secret\n                            \n                            \n                                    \n                                    Optional\n                                tenant\n                            \n                            \n                                    \n                                    Optional\n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        clientId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/client/entities/client.entity.ts:16\n                        \n                    \n\n            \n                \n                    The unique identifier for the client.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/client/entities/client.entity.ts:37\n                        \n                    \n\n            \n                \n                    The description of the client.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Role, {each: true})@Column({type: 'json'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/client/entities/client.entity.ts:44\n                        \n                    \n\n            \n                \n                    The roles assigned to the client.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/client/entities/client.entity.ts:23\n                        \n                    \n\n            \n                \n                    The secret key for the client.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, tenant => tenant.clients, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/client/entities/client.entity.ts:54\n                        \n                    \n\n            \n                \n                    The tenant that the client belongs to.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/client/entities/client.entity.ts:29\n                        \n                    \n\n            \n                \n                    The unique identifier for the tenant that the client belongs to. Only null for accounts that manage tenants, that do not belong to a client.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryColumn } from \"typeorm\";\nimport { Role } from \"../../roles/role.enum\";\nimport { TenantEntity } from \"../../tenant/entitites/tenant.entity\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\n/**\n * Represents a client in the system that belongs to a tenant.\n */\n@Entity()\nexport class ClientEntity {\n    /**\n     * The unique identifier for the client.\n     */\n    @IsString()\n    @PrimaryColumn()\n    clientId: string;\n\n    /**\n     * The secret key for the client.\n     */\n    @IsString()\n    @Column({ nullable: true })\n    secret: string;\n\n    /**\n     * The unique identifier for the tenant that the client belongs to. Only null for accounts that manage tenants, that do not belong to a client.\n     */\n    @Column({ nullable: true })\n    tenantId?: string;\n\n    /**\n     * The description of the client.\n     */\n    @IsString()\n    @IsOptional()\n    @Column({ nullable: true })\n    description?: string;\n\n    /**\n     * The roles assigned to the client.\n     */\n    @IsEnum(Role, { each: true })\n    @Column({ type: \"json\", })\n    roles: Role[];\n\n    /**\n     * The tenant that the client belongs to.\n     */\n    @ManyToOne(\n        () => TenantEntity,\n        (tenant) => tenant.clients,\n        { onDelete: \"CASCADE\" },\n    )\n    tenant?: TenantEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClientSecretResponseDto.html":{"url":"classes/ClientSecretResponseDto.html","title":"class - ClientSecretResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClientSecretResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client/dto/client-secret-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                secret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/client/dto/client-secret-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ClientSecretResponseDto {\n    secret: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClientView.html":{"url":"classes/ClientView.html","title":"class - ClientView","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClientView\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client/client.provider.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                clientId\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                roles\n                            \n                            \n                                    Optional\n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        clientId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/client/client.provider.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/client/client.provider.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/client/client.provider.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/client/client.provider.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateClientDto } from \"./dto/create-client.dto\";\n\nexport const CLIENTS_PROVIDER = \"CLIENTS_PROVIDER\";\n\nexport interface ClientsProvider {\n  getClientSecret(sub: string, id: string): Promise;\n  getClients(tenantId: string): Promise;\n  getClient(tenantId: string, clientId: string): Promise;\n  addClient(tenantId: string, dto: CreateClientDto): Promise;\n  removeClient(tenantId: string, clientId: string): Promise;\n\n  // Only for internal backend (not used with KC; you’ll validate JWTs instead)\n  validateClientCredentials?(clientId: string, clientSecret: string): Promise;\n}\n\nexport class ClientView {\n  clientId: string;\n  description?: string;\n  tenantId?: string;\n  roles: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClientsProvider.html":{"url":"interfaces/ClientsProvider.html","title":"interface - ClientsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ClientsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client/client.provider.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addClient\n                                    \n                                \n                                \n                                    \n                                        getClient\n                                    \n                                \n                                \n                                    \n                                        getClients\n                                    \n                                \n                                \n                                    \n                                        getClientSecret\n                                    \n                                \n                                \n                                    \n                                        removeClient\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        validateClientCredentials\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addClient\n                        \n                    \n                \n            \n            \n                \naddClient(tenantId: string, dto: CreateClientDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/client.provider.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateClientDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise<>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClient\n                        \n                    \n                \n            \n            \n                \ngetClient(tenantId: string, clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/client.provider.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClients\n                        \n                    \n                \n            \n            \n                \ngetClients(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/client.provider.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClientSecret\n                        \n                    \n                \n            \n            \n                \ngetClientSecret(sub: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/client.provider.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sub\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeClient\n                        \n                    \n                \n            \n            \n                \nremoveClient(tenantId: string, clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/client.provider.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        validateClientCredentials\n                        \n                    \n                \n            \n            \n                \nvalidateClientCredentials(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/client.provider.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateClientDto } from \"./dto/create-client.dto\";\n\nexport const CLIENTS_PROVIDER = \"CLIENTS_PROVIDER\";\n\nexport interface ClientsProvider {\n  getClientSecret(sub: string, id: string): Promise;\n  getClients(tenantId: string): Promise;\n  getClient(tenantId: string, clientId: string): Promise;\n  addClient(tenantId: string, dto: CreateClientDto): Promise;\n  removeClient(tenantId: string, clientId: string): Promise;\n\n  // Only for internal backend (not used with KC; you’ll validate JWTs instead)\n  validateClientCredentials?(clientId: string, clientSecret: string): Promise;\n}\n\nexport class ClientView {\n  clientId: string;\n  description?: string;\n  tenantId?: string;\n  roles: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateClientDto.html":{"url":"classes/CreateClientDto.html","title":"class - CreateClientDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateClientDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client/dto/create-client.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(ClientEntity, [\n    \"tenant\",\n    \"tenantId\",\n    \"secret\"\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { ClientEntity } from \"../entities/client.entity\";\n\nexport class CreateClientDto extends OmitType(ClientEntity, [\n    \"tenant\",\n    \"tenantId\",\n    \"secret\"\n] as const) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTenantDto.html":{"url":"classes/CreateTenantDto.html","title":"class - CreateTenantDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTenantDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tenant/dto/create-tenant.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(TenantEntity, [\n    \"clients\",\n    \"status\",\n] as const)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/tenant/dto/create-tenant.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { IsOptional, IsString } from \"class-validator\";\nimport { Role } from \"../../roles/role.enum\";\nimport { TenantEntity } from \"../entitites/tenant.entity\";\n\nexport class CreateTenantDto extends OmitType(TenantEntity, [\n    \"clients\",\n    \"status\",\n] as const) {\n    @IsOptional()\n    @IsString({ each: true })\n    roles?: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CredentialConfig.html":{"url":"entities/CredentialConfig.html","title":"entity - CredentialConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CredentialConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                claims\n                            \n                            \n                                    \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                disclosureFrame\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                embeddedDisclosurePolicy\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                issuanceConfigs\n                            \n                            \n                                    \n                                key\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                keyBinding\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                keyId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lifeTime\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                statusManagement\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IssuerMetadataCredentialConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        disclosureFrame\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        embeddedDisclosurePolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EmbeddedDisclosurePolicy\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@ApiProperty({oneOf: undefined})@Type(undefined, {discriminator: undefined, keepDiscriminatorProperty: true})@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:172\n                        \n                    \n\n            \n                \n                    Embedded disclosure policy (discriminated union by policy).\nThe discriminator makes class-transformer instantiate the right subclass,\nand then class-validator runs that subclass’s rules.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceConfigs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IssuanceConfig[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, issuance => issuance.credentialConfigs, {cascade: undefined, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:179\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CertEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        keyBinding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Column('boolean', {default: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        keyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:120\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lifeTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Column('int', {nullable: true})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SchemaResponse\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:139\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        statusManagement\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Column('boolean', {default: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:90\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         VCT\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:111\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // --- credential-config.entity.ts ---\n\nimport {\n    ApiExtraModels,\n    ApiHideProperty,\n    ApiProperty,\n    getSchemaPath,\n} from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToMany, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { VCT } from \"../../credentials-metadata/dto/vct.dto\";\nimport { IssuanceConfig } from \"../../issuance/entities/issuance-config.entity\";\nimport {\n    AllowListPolicy,\n    AttestationBasedPolicy,\n    EmbeddedDisclosurePolicy,\n    NoneTrustPolicy,\n    RootOfTrustPolicy,\n} from \"./policies.dto\";\n\nexport class DisplayImage {\n    @IsString()\n    uri: string;\n}\nexport class Display {\n    @IsString()\n    name: string;\n    @IsString()\n    description: string;\n    @IsString()\n    locale: string;\n    @IsString()\n    background_color?: string;\n    @IsString()\n    text_color?: string;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    background_image?: DisplayImage;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    logo?: DisplayImage;\n}\n\nexport class IssuerMetadataCredentialConfig {\n    @IsString()\n    format: string;\n    @ValidateNested()\n    @Type(() => Display)\n    display: Display[];\n    @IsOptional()\n    @IsString()\n    scope?: string;\n}\n\n@ApiExtraModels(\n    AttestationBasedPolicy,\n    NoneTrustPolicy,\n    AllowListPolicy,\n    RootOfTrustPolicy,\n)\n@Entity()\nexport class CredentialConfig {\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id!: string;\n\n    @IsString()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId!: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => IssuerMetadataCredentialConfig)\n    config!: IssuerMetadataCredentialConfig;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    claims?: Record;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    disclosureFrame?: Record;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => VCT)\n    @Column(\"json\", { nullable: true })\n    vct?: VCT;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    keyBinding?: boolean;\n\n    @IsOptional()\n    @IsString()\n    keyId?: string;\n\n    @ManyToOne(() => CertEntity)\n    key!: CertEntity;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    statusManagement?: boolean;\n\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    @IsNumber()\n    lifeTime?: number;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => SchemaResponse)\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n\n    /**\n     * Embedded disclosure policy (discriminated union by `policy`).\n     * The discriminator makes class-transformer instantiate the right subclass,\n     * and then class-validator runs that subclass’s rules.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(AttestationBasedPolicy) },\n            { $ref: getSchemaPath(NoneTrustPolicy) },\n            { $ref: getSchemaPath(AllowListPolicy) },\n            { $ref: getSchemaPath(RootOfTrustPolicy) },\n        ],\n    })\n    @Type(() => AttestationBasedPolicy, {\n        discriminator: {\n            property: \"policy\",\n            subTypes: [\n                { name: \"none\", value: NoneTrustPolicy },\n                { name: \"allowList\", value: AllowListPolicy },\n                { name: \"rootOfTrust\", value: RootOfTrustPolicy },\n                {\n                    name: \"attestationBased\",\n                    value: AttestationBasedPolicy,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true, // keep `policy` on the instance\n    })\n    @Column(\"json\", { nullable: true })\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n\n    @ManyToMany(\n        () => IssuanceConfig,\n        (issuance) => issuance.credentialConfigs,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    issuanceConfigs!: IssuanceConfig[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialConfigCreate.html":{"url":"classes/CredentialConfigCreate.html","title":"class - CredentialConfigCreate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialConfigCreate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/dto/credential-config-create.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(CredentialConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"issuanceConfigs\",\n    \"key\",\n])\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { CredentialConfig } from \"../entities/credential.entity\";\n\nexport class CredentialConfigCreate extends OmitType(CredentialConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"issuanceConfigs\",\n    \"key\",\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialConfigMapping.html":{"url":"classes/CredentialConfigMapping.html","title":"class - CredentialConfigMapping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialConfigMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/issuance.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for mapping credential configurations in issuance.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:13\n                        \n                    \n\n            \n                \n                    Unique identifier for the credential configuration.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\nimport { IssuanceConfig } from \"../entities/issuance-config.entity\";\n\n/**\n * DTO for mapping credential configurations in issuance.\n */\nexport class CredentialConfigMapping {\n    /**\n     * Unique identifier for the credential configuration.\n     */\n    @IsString()\n    id: string;\n}\n\n/**\n * DTO for mapping issuance configurations.\n */\nexport class IssuanceDto extends OmitType(IssuanceConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"credentialConfigs\",\n] as const) {\n    /**\n     * Ids of the credential configurations associated with this issuance configuration.\n     */\n    @IsArray()\n    credentialConfigIds: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialConfigService.html":{"url":"injectables/CredentialConfigService.html","title":"injectable - CredentialConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credential-config/credential-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing credential configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                store\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(credentialConfigRepository: Repository, configService: ConfigService, logger: PinoLogger, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credential-config/credential-config.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor for CredentialConfigService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        credentialConfigRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for CredentialConfig entity.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:198\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the CredentialConfig entity to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the result of the delete operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:158\n                        \n                    \n\n\n            \n                \n                        Retrieves all credential configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CredentialConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:171\n                        \n                    \n\n\n            \n                \n                        Retrieves a credential configuration by its ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Imports the configs\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:149\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n            \n                \nstore(tenantId: string, config: CredentialConfigCreate)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:185\n                        \n                    \n\n\n            \n                \n                        Stores a credential configuration for a given tenant.\nIf the configuration already exists, it will be overwritten.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                config\n                                            \n                                                            CredentialConfigCreate\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CredentialConfig entity to store.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored CredentialConfig entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../../crypto/crypto.service\";\nimport { CredentialConfigCreate } from \"../dto/credential-config-create.dto\";\nimport { CredentialConfig } from \"../entities/credential.entity\";\n\n/**\n * Service for managing credential configurations.\n */\n@Injectable()\nexport class CredentialConfigService {\n    /**\n     * Constructor for CredentialConfigService.\n     * @param credentialConfigRepository - Repository for CredentialConfig entity.\n     */\n    constructor(\n        @InjectRepository(CredentialConfig)\n        private readonly credentialConfigRepository: Repository,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Imports the configs\n     */\n    public async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"issuance/credentials\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    try {\n                        const payload = JSON.parse(\n                            readFileSync(join(path, file), \"utf8\"),\n                        );\n\n                        const id = file.replace(\".json\", \"\");\n                        payload.id = id;\n                        const exists = await this.getById(\n                            tenant.name,\n                            id,\n                        ).catch(() => false);\n                        if (exists && !force) {\n                            continue; // Skip if config already exists and force is not set\n                        } else if (exists && force) {\n                            //delete old element so removed elements are not present\n                            await this.credentialConfigRepository.delete({\n                                id,\n                                tenantId: tenant.name,\n                            });\n                        }\n\n                        // Validate the payload against CredentialConfig\n                        const config = plainToClass(\n                            CredentialConfigCreate,\n                            payload,\n                        );\n                        const validationErrors = await validate(config, {\n                            whitelist: true,\n                            forbidUnknownValues: false, // avoid false positives on plain objects\n                            forbidNonWhitelisted: false,\n                            stopAtFirstError: false,\n                        });\n\n                        // Check if keyId is provided and if the certificate exists\n                        if (config.keyId) {\n                            const cert = await this.cryptoService.getCertEntry(\n                                tenant.name,\n                                config.keyId,\n                            );\n                            if (!cert) {\n                                this.logger.error(\n                                    {\n                                        event: \"ValidationError\",\n                                        file,\n                                        tenant: tenant.name,\n                                        errors: [\n                                            {\n                                                property: \"keyId\",\n                                                constraints: {\n                                                    isDefined:\n                                                        \"Key ID must be defined in the crypto service.\",\n                                                },\n                                                value: config.keyId,\n                                            },\n                                        ],\n                                    },\n                                    `Validation failed for credentials config ${file} in tenant ${tenant.name}`,\n                                );\n                                continue; // Skip this invalid config\n                            }\n                            (config as CredentialConfig).key = cert;\n                        }\n\n                        if (validationErrors.length > 0) {\n                            this.logger.error(\n                                {\n                                    event: \"ValidationError\",\n                                    file,\n                                    tenant: tenant.name,\n                                    //we need to extract the constraints because they tell what is wrong, also from the children elements\n                                    errors: validationErrors,\n                                },\n                                `Validation failed for credentials config ${file} in tenant ${tenant.name}`,\n                            );\n                            continue; // Skip this invalid config\n                        }\n\n                        await this.store(tenant.name, config);\n                        counter++;\n                    } catch (e) {\n                        this.logger.error(\n                            {\n                                event: \"ImportError\",\n                                file,\n                                tenant: tenant.name,\n                                error: e.message,\n                            },\n                            `Failed to import credentials config ${file} in tenant ${tenant.name}`,\n                        );\n                    }\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} credential configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    async onTenantDelete(tenantId: string) {\n        await this.credentialConfigRepository.delete({ tenantId });\n    }\n\n    /**\n     * Retrieves all credential configurations for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @returns A promise that resolves to an array of CredentialConfig entities.\n     */\n    get(tenantId: string) {\n        return this.credentialConfigRepository.find({\n            where: { tenantId },\n            relations: [\"key\"],\n        });\n    }\n\n    /**\n     * Retrieves a credential configuration by its ID for a given tenant.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    getById(tenantId: string, id: string) {\n        return this.credentialConfigRepository.findOneByOrFail({\n            id,\n            tenantId,\n        });\n    }\n\n    /**\n     * Stores a credential configuration for a given tenant.\n     * If the configuration already exists, it will be overwritten.\n     * @param tenantId - The ID of the tenant.\n     * @param config - The CredentialConfig entity to store.\n     * @returns A promise that resolves to the stored CredentialConfig entity.\n     */\n    store(tenantId: string, config: CredentialConfigCreate) {\n        return this.credentialConfigRepository.save({\n            ...config,\n            tenantId,\n        });\n    }\n\n    /**\n     * Deletes a credential configuration for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @param id - The ID of the CredentialConfig entity to delete.\n     * @returns A promise that resolves to the result of the delete operation.\n     */\n    delete(tenantId: string, id: string) {\n        return this.credentialConfigRepository.delete({\n            id,\n            tenantId,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialIssuerMetadataDto.html":{"url":"classes/CredentialIssuerMetadataDto.html","title":"class - CredentialIssuerMetadataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialIssuerMetadataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/credential-issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the metadata for a credential issuer.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_server\n                            \n                            \n                                authorization_servers\n                            \n                            \n                                batch_credential_issuance\n                            \n                            \n                                credential_configurations_supported\n                            \n                            \n                                credential_endpoint\n                            \n                            \n                                credential_issuer\n                            \n                            \n                                display\n                            \n                            \n                                notification_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_server\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:41\n                        \n                    \n\n            \n                \n                    The URL of the preferred authorization server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_servers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:12\n                        \n                    \n\n            \n                \n                    List of authorization servers that support the credential issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        batch_credential_issuance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:24\n                        \n                    \n\n            \n                \n                    Information about batch credential issuance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_configurations_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:37\n                        \n                    \n\n            \n                \n                    Object of credentials configurations supported by the issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:16\n                        \n                    \n\n            \n                \n                    The URL of the credential issuance endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:8\n                        \n                    \n\n            \n                \n                    The issuer identifier, typically a URL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        display\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:33\n                        \n                    \n\n            \n                \n                    Display information for the credentials that are getting issued.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notification_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:20\n                        \n                    \n\n            \n                \n                    The URL of the notification endpoint for credential issuance.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CredentialIssuerMetadataDto {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    credential_issuer: string;\n    /**\n     * List of authorization servers that support the credential issuer.\n     */\n    authorization_servers: string[];\n    /**\n     * The URL of the credential issuance endpoint.\n     */\n    credential_endpoint: string;\n    /**\n     * The URL of the notification endpoint for credential issuance.\n     */\n    notification_endpoint: string;\n    /**\n     * Information about batch credential issuance.\n     */\n    batch_credential_issuance: {\n        /**\n         * Amount of elements in a batch.\n         */\n        batch_size: number;\n    };\n    /**\n     * Display information for the credentials that are getting issued.\n     */\n    display: Array;\n    /**\n     * Object of credentials configurations supported by the issuer.\n     */\n    credential_configurations_supported: any;\n    /**\n     * The URL of the preferred authorization server.\n     */\n    authorization_server: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialQuery.html":{"url":"classes/CredentialQuery.html","title":"class - CredentialQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                format\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                meta\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                multiple\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                trusted_authorities\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        format\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        multiple\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        trusted_authorities\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TrustedAuthorityQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:71\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialSetQuery.html":{"url":"classes/CredentialSetQuery.html","title":"class - CredentialSetQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialSetQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                options\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                required\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[][]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', items: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:98\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsController.html":{"url":"controllers/CredentialsController.html","title":"controller - CredentialsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management/credentials\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing credential configurations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getConfigs\n                            \n                            \n                                    \n                                storeCredentialConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:48\n                        \n                    \n\n\n            \n                \n                        Deletes an credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getConfigs\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfigs(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Returns the credential configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeCredentialConfiguration(config: CredentialConfigCreate, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:35\n                        \n                    \n\n\n            \n                \n                        Stores the credential configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            CredentialConfigCreate\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post } from \"@nestjs/common\";\nimport { Role } from \"../../auth/roles/role.enum\";\nimport { Secured } from \"../../auth/secure.decorator\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { CredentialConfigService } from \"./credential-config/credential-config.service\";\nimport { CredentialConfigCreate } from \"./dto/credential-config-create.dto\";\n\n/**\n * Controller for managing credential configurations.\n */\n@Secured([Role.Issuances])\n@Controller(\"issuer-management/credentials\")\nexport class CredentialsController {\n    /**\n     * Initializes the CredentialsController with the CredentialConfigService.\n     * @param credentialsService\n     */\n    constructor(private readonly credentialsService: CredentialConfigService) {}\n\n    /**\n     * Returns the credential configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getConfigs(@Token() user: TokenPayload) {\n        return this.credentialsService.get(user.entity!.id);\n    }\n\n    /**\n     * Stores the credential configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeCredentialConfiguration(\n        @Body() config: CredentialConfigCreate,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.store(user.entity!.id, config);\n    }\n\n    /**\n     * Deletes an credential configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteIssuanceConfiguration(\n        @Param(\"id\") id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.delete(user.entity!.id, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsMetadataController.html":{"url":"controllers/CredentialsMetadataController.html","title":"controller - CredentialsMetadataController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsMetadataController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/credentials-metadata.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/credentials-metadata\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n            \n                \n                        \n                    schema(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('schema/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n            \n                \n                        \n                    vct(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('vct/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:15\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the credential configuration.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from \"@nestjs/common\";\nimport { ApiExcludeController } from \"@nestjs/swagger\";\nimport { CredentialsService } from \"../credentials/credentials.service\";\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@Controller(\":tenantId/credentials-metadata\")\nexport class CredentialsMetadataController {\n    constructor(private readonly credentialsService: CredentialsService) {}\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n     * @param id - The identifier of the credential configuration.\n     */\n    @Get(\"vct/:id\")\n    vct(@Param(\"id\") id: string, @Param(\"tenantId\") tenantId: string) {\n        return this.credentialsService.getVCT(id, tenantId);\n    }\n\n    /**\n     * Retrieves the schema for a specific credential\n     * @param id\n     * @returns\n     */\n    @Get(\"schema/:id\")\n    schema(@Param(\"id\") id: string, @Param(\"tenantId\") tenantId: string) {\n        return this.credentialsService.getSchema(id, tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialsService.html":{"url":"injectables/CredentialsService.html","title":"injectable - CredentialsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing credentials and their configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                getCredentialConfigurationSupported\n                            \n                            \n                                    Async\n                                getSchema\n                            \n                            \n                                    Async\n                                getVCT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, configService: ConfigService, statusListService: StatusListService, credentialConfigRepo: Repository, cryptoImplementationService: CryptoImplementationService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credentials.service.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for CredentialsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoImplementationService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(credentialConfigurationId: string, holderCnf: Jwk, session: Session, issuanceConfig: IssuanceConfig, claims?: Record>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:107\n                        \n                    \n\n\n            \n                \n                        Issues a credential based on the provided configuration and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                holderCnf\n                                            \n                                                        Jwk\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuanceConfig\n                                            \n                                                            IssuanceConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                claims\n                                            \n                                                        Record>\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredentialConfigurationSupported\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredentialConfigurationSupported(session: Session, issuanceConfig: IssuanceConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Returns the credential configuration that is required for oid4vci\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuanceConfig\n                                            \n                                                            IssuanceConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSchema\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSchema(credentialConfigurationId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:229\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getVCT\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVCT(credentialId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:203\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport type { Jwk } from \"@openid4vc/oauth2\";\nimport { CredentialConfigurationSupported } from \"@openid4vc/openid4vci\";\nimport { digest, generateSalt } from \"@sd-jwt/crypto-nodejs\";\nimport { JWTwithStatusListPayload } from \"@sd-jwt/jwt-status-list\";\nimport { SDJwtVcInstance } from \"@sd-jwt/sd-jwt-vc\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { CryptoImplementationService } from \"../../crypto/key/crypto-implementation/crypto-implementation.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SchemaResponse } from \"../credentials-metadata/dto/schema-response.dto\";\nimport { VCT } from \"../credentials-metadata/dto/vct.dto\";\nimport { IssuanceConfig } from \"../issuance/entities/issuance-config.entity\";\nimport { StatusListService } from \"../status-list/status-list.service\";\nimport { CredentialConfig } from \"./entities/credential.entity\";\n\n/**\n * Service for managing credentials and their configurations.\n */\n@Injectable()\nexport class CredentialsService {\n    /**\n     * Constructor for CredentialsService.\n     * @param cryptoService\n     * @param configService\n     * @param statusListService\n     * @param credentialConfigRepo\n     * @param cryptoImplementationService\n     */\n    constructor(\n        private cryptoService: CryptoService,\n        private configService: ConfigService,\n        private statusListService: StatusListService,\n        @InjectRepository(CredentialConfig)\n        private credentialConfigRepo: Repository,\n        private cryptoImplementationService: CryptoImplementationService,\n    ) {}\n\n    /**\n     * Returns the credential configuration that is required for oid4vci\n     * @param tenantId\n     * @returns\n     */\n    async getCredentialConfigurationSupported(\n        session: Session,\n        issuanceConfig: IssuanceConfig,\n    ): Promise> {\n        const credential_configurations_supported: Record = {};\n\n        const configs = await this.credentialConfigRepo.findBy({\n            tenantId: session.tenantId,\n        });\n\n        //add key binding when required:\n        const kb = {\n            proof_types_supported: {\n                jwt: {\n                    proof_signing_alg_values_supported: [\n                        this.cryptoImplementationService.getAlg(),\n                    ],\n                },\n            },\n            credential_signing_alg_values_supported: [\n                this.cryptoImplementationService.getAlg(),\n            ],\n            cryptographic_binding_methods_supported: [\"jwk\"],\n        };\n\n        for (const value of configs) {\n            const isUsed = issuanceConfig.credentialConfigs.find(\n                (config) => config.id === value.id,\n            );\n            (value.config as CredentialConfigurationSupported).vct =\n                `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.tenantId}/credentials-metadata/vct/${value.id}`;\n\n            if (value.embeddedDisclosurePolicy) {\n                delete (value.embeddedDisclosurePolicy as any).$schema;\n                (\n                    value.config as CredentialConfigurationSupported\n                ).disclosure_policy = value.embeddedDisclosurePolicy;\n            }\n\n            if (isUsed?.id)\n                value.config = {\n                    ...value.config,\n                    ...kb,\n                };\n            (\n                credential_configurations_supported as CredentialConfigurationSupported\n            )[value.id] = value.config;\n        }\n        return credential_configurations_supported;\n    }\n\n    /**\n     * Issues a credential based on the provided configuration and session.\n     * @param credentialConfigurationId\n     * @param holderCnf\n     * @param session\n     * @returns\n     */\n    async getCredential(\n        credentialConfigurationId: string,\n        holderCnf: Jwk,\n        session: Session,\n        issuanceConfig: IssuanceConfig,\n        claims?: Record>,\n    ) {\n        const credentialConfiguration = issuanceConfig.credentialConfigs.find(\n            (config) => config.id === credentialConfigurationId,\n        );\n        if (!credentialConfiguration)\n            throw new ConflictException(\n                `Credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        //use passed claims, if not provided try the ones stored in the session and the use default ones from the config is provided\n        const usedClaims =\n            claims?.[credentialConfigurationId] ??\n            session.credentialPayload?.claims?.[credentialConfigurationId] ??\n            credentialConfiguration.claims;\n        const disclosureFrame = credentialConfiguration.disclosureFrame;\n\n        const keyId =\n            credentialConfiguration?.keyId ??\n            (await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                \"signing\",\n            ));\n\n        //at this point it is sd-jwt specific.\n\n        const sdjwt = new SDJwtVcInstance({\n            signer: await this.cryptoService.keyService.signer(\n                session.tenantId,\n                keyId,\n            ),\n            signAlg: this.cryptoImplementationService.getAlg(),\n            hasher: digest,\n            hashAlg: \"sha-256\",\n            saltGenerator: generateSalt,\n            loadTypeMetadataFormat: true,\n        });\n\n        // If status management is enabled, create a status entry\n        let status: JWTwithStatusListPayload | undefined;\n        if (credentialConfiguration.statusManagement) {\n            status = await this.statusListService.createEntry(\n                session,\n                credentialConfigurationId,\n            );\n        }\n\n        const iat = Math.round(new Date().getTime() / 1000);\n        // Set expiration time if lifeTime is defined\n        let exp: number | undefined;\n        if (credentialConfiguration.lifeTime) {\n            exp = iat + credentialConfiguration.lifeTime;\n        }\n\n        // If key binding is enabled, include the JWK in the cnf\n        let cnf: { jwk: Jwk } | undefined;\n\n        if (credentialConfiguration.keyBinding) {\n            cnf = {\n                jwk: holderCnf,\n            };\n        }\n\n        return sdjwt.issue(\n            {\n                iss: this.configService.getOrThrow(\"PUBLIC_URL\"),\n                iat,\n                exp,\n                vct: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.tenantId}/credentials-metadata/vct/${credentialConfigurationId}`,\n                cnf,\n                ...usedClaims,\n                ...status,\n            },\n            disclosureFrame,\n            {\n                header: {\n                    x5c: await this.cryptoService.getCertChain(\n                        \"signing\",\n                        session.tenantId,\n                    ),\n                    alg: this.cryptoImplementationService.getAlg(),\n                },\n            },\n        );\n    }\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n     * @param credentialId\n     * @param tenantId\n     * @returns\n     */\n    async getVCT(credentialId: string, tenantId: string): Promise {\n        const credentialConfig = await this.credentialConfigRepo\n            .findOneByOrFail({\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(\n                    `Credential configuration with id ${credentialId} not found`,\n                );\n            });\n        if (!credentialConfig.vct) {\n            throw new ConflictException(\n                `VCT for credential configuration with id ${credentialId} not found`,\n            );\n        }\n        const host = this.configService.getOrThrow(\"PUBLIC_URL\");\n        credentialConfig.vct.vct = `${host}/${tenantId}/credentials-metadata/vct/${credentialConfig.id}`;\n        return credentialConfig.vct;\n    }\n\n    /**\n     * Retrieves the schema for a specific credential configuration.\n     * @param id\n     * @param tenantId\n     * @returns\n     */\n    async getSchema(\n        credentialConfigurationId: string,\n        tenantId: string,\n    ): Promise {\n        const credentialConfig =\n            await this.credentialConfigRepo.findOneByOrFail({\n                tenantId,\n            });\n        if (!credentialConfig) {\n            throw new ConflictException(\n                `Credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        if (!credentialConfig.schema) {\n            throw new ConflictException(\n                `Schema for credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        return credentialConfig.schema;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoImplementatationModule.html":{"url":"modules/CryptoImplementatationModule.html","title":"module - CryptoImplementatationModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoImplementatationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoImplementatationModule\n\n\n\ncluster_CryptoImplementatationModule_exports\n\n\n\ncluster_CryptoImplementatationModule_providers\n\n\n\n\nCryptoImplementationService \n\nCryptoImplementationService \n\n\n\nCryptoImplementatationModule\n\nCryptoImplementatationModule\n\nCryptoImplementationService  -->\n\nCryptoImplementatationModule->CryptoImplementationService \n\n\n\n\n\nCryptoImplementationService\n\nCryptoImplementationService\n\nCryptoImplementatationModule -->\n\nCryptoImplementationService->CryptoImplementatationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoImplementationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoImplementationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { CryptoImplementationService } from \"./crypto-implementation.service\";\n\n@Global()\n@Module({\n    imports: [ConfigModule],\n    providers: [CryptoImplementationService],\n    exports: [CryptoImplementationService],\n})\nexport class CryptoImplementatationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptoImplementation.html":{"url":"interfaces/CryptoImplementation.html","title":"interface - CryptoImplementation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CryptoImplementation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface to imeplement different algorithms.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alg\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        generateKeyPair\n                                    \n                                \n                                \n                                    \n                                        getSigner\n                                    \n                                \n                                \n                                    \n                                        getVerifier\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyPair\n                        \n                    \n                \n            \n            \n                \ngenerateKeyPair()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:19\n                        \n                    \n\n\n            \n                \n                        Generates a new keypair\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSigner\n                        \n                    \n                \n            \n            \n                \ngetSigner(privateKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:24\n                        \n                    \n\n\n            \n                \n                        creates a signer based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKeyJWK\n                                            \n                                                            JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getVerifier\n                        \n                    \n                \n            \n            \n                \ngetVerifier(publicKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:29\n                        \n                    \n\n\n            \n                \n                        creates a verifier based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                publicKeyJWK\n                                            \n                                                            JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alg:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type KeyPair = {\n    publicKey: JsonWebKey;\n    privateKey: JsonWebKey;\n};\n\ntype Signer = (data: string) => Promise;\n\ntype Verifier = (data: string, signature: string) => Promise;\n\n/**\n * Generic interface to imeplement different algorithms.\n */\nexport interface CryptoImplementation {\n    //name of the algorithm\n    alg: string;\n    /**\n     * Generates a new keypair\n     */\n    generateKeyPair(): Promise;\n    /**\n     * creates a signer based on the passed key.\n     * @param privateKeyJWK\n     */\n    getSigner(privateKeyJWK: JsonWebKey): Promise;\n    /**\n     * creates a verifier based on the passed key.\n     * @param publicKeyJWK\n     */\n    getVerifier(publicKeyJWK: JsonWebKey): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoImplementationService.html":{"url":"injectables/CryptoImplementationService.html","title":"injectable - CryptoImplementationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoImplementationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAlg\n                            \n                            \n                                getCrypto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configServie: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configServie\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAlg\n                        \n                    \n                \n            \n            \n                \ngetAlg()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Return the algorithm that is used for the crypto operations like signing.\n\n\n                        \n                            Returns :         CryptoType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCrypto\n                        \n                    \n                \n            \n            \n                \ngetCrypto(alg)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Returns the crypto implementation based on the configured algorithm.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                alg\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    this.configServie.get(\"CRYPTO_ALG\")\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CryptoImplementation\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ES256 } from \"@sd-jwt/crypto-nodejs\";\nimport { CryptoImplementation } from \"./crypto-implementation\";\nimport { ED25519 } from \"./ed25519\";\n\nexport type CryptoType = \"ES256\" | \"Ed25519\";\n\n@Injectable()\nexport class CryptoImplementationService {\n    constructor(private configServie: ConfigService) {}\n\n    /**\n     * Return the algorithm that is used for the crypto operations like signing.\n     * @returns\n     */\n    getAlg(): CryptoType {\n        return this.configServie.get(\"CRYPTO_ALG\") as CryptoType;\n    }\n\n    /**\n     * Returns the crypto implementation based on the configured algorithm.\n     * @param alg\n     * @returns\n     */\n    getCrypto(\n        alg = this.configServie.get(\"CRYPTO_ALG\"),\n    ): CryptoImplementation {\n        switch (alg) {\n            case \"Ed25519\":\n                return ED25519;\n            case \"ES256\":\n                return ES256;\n            default:\n                throw new Error(`Unsupported algorithm ${alg}`);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoModule.html":{"url":"modules/CryptoModule.html","title":"module - CryptoModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\n\nCryptoService \n\nCryptoService \n\n\n\nEncryptionService \n\nEncryptionService \n\n\n\nCryptoModule\n\nCryptoModule\n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/crypto.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            KeyController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { TenantEntity } from \"../auth/tenant/entitites/tenant.entity\";\nimport { CryptoService } from \"./crypto.service\";\nimport { EncryptionService } from \"./encryption/encryption.service\";\nimport { CertEntity } from \"./key/entities/cert.entity\";\nimport { KeyEntity } from \"./key/entities/keys.entity\";\nimport { KeyController } from \"./key/key.controller\";\n\n@Module({\n    imports: [TypeOrmModule.forFeature([CertEntity, KeyEntity, TenantEntity])],\n    controllers: [KeyController],\n    providers: [CryptoService, EncryptionService],\n    exports: [CryptoService, EncryptionService],\n})\nexport class CryptoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBKeyService.html":{"url":"classes/DBKeyService.html","title":"class - DBKeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBKeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/adapters/db-key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The key service is responsible for managing the keys of the issuer.\n\n            \n\n            \n                Extends\n            \n            \n                            KeyService\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                crypto\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                getKid\n                            \n                            \n                                    Private\n                                    Async\n                                getPrivateKey\n                            \n                            \n                                    Private\n                                getPubFromPrivateKey\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                import\n                            \n                            \n                                init\n                            \n                            \n                                    Async\n                                signer\n                            \n                            \n                                    Async\n                                signJWT\n                            \n                            \n                                    Protected\n                                getCertificate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoImplementationService, certRepository: Repository, keyRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/adapters/db-key.service.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        certRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        crypto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/adapters/db-key.service.ts:28\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:86\n\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair and wrtites the private key to the file system.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the generated key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKid\n                        \n                    \n                \n            \n            \n                \ngetKid(tenantId: string, type: CertificateType)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:136\n\n                        \n                    \n\n\n            \n                \n                        Gets one key id for the tenant.\nIf no key exists, it will throw an error.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                type\n                                            \n                                                            CertificateType\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    \"signing\"\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getPrivateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPrivateKey(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Get the keys from the file system or generate them if they do not exist\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getPubFromPrivateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPubFromPrivateKey(privateKey: JWK_EC_Private)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:62\n                        \n                    \n\n\n            \n                \n                        Get the public key from the private key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKey\n                                            \n                                                        JWK_EC_Private\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         EC_Public\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:152\n\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:158\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        import\n                        \n                    \n                \n            \n            \n                \nimport(tenantId: string, body: KeyImportDto)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:46\n\n                        \n                    \n\n\n            \n                \n                        Import a key into the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        init\n                        \n                    \n                \n            \n            \n                \ninit(tenant: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:77\n\n                        \n                    \n\n\n            \n                \n                        Initialize the key service for a specific tenant.\nThis will create the keys if they do not exist.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenant\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:109\n\n                        \n                    \n\n\n            \n                \n                        Get the signer for the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JWTHeaderParameters, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:195\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWTHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCertificate(tenantId: string, keyId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:85\n\n                        \n                    \n\n\n            \n                \n                        Get the certificate for the given key id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConfigService } from \"@nestjs/config\";\nimport { Signer } from \"@sd-jwt/types\";\nimport {\n    CryptoKey,\n    exportJWK,\n    exportSPKI,\n    importJWK,\n    JWK,\n    JWK_EC_Private,\n    JWTHeaderParameters,\n    JWTPayload,\n    SignJWT,\n} from \"jose\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { v4 } from \"uuid\";\nimport { EC_Public } from \"../../../well-known/dto/jwks-response.dto\";\nimport { CryptoImplementation } from \"../crypto-implementation/crypto-implementation\";\nimport { CryptoImplementationService } from \"../crypto-implementation/crypto-implementation.service\";\nimport { KeyImportDto } from \"../dto/key-import.dto\";\nimport { CertEntity, CertificateType } from \"../entities/cert.entity\";\nimport { KeyEntity } from \"../entities/keys.entity\";\nimport { KeyService } from \"../key.service\";\n\n/**\n * The key service is responsible for managing the keys of the issuer.\n */\nexport class DBKeyService extends KeyService {\n    private crypto: CryptoImplementation;\n\n    constructor(\n        configService: ConfigService,\n        private cryptoService: CryptoImplementationService,\n        certRepository: Repository,\n        private keyRepository: Repository,\n    ) {\n        super(configService, certRepository);\n        this.crypto = cryptoService.getCrypto();\n    }\n\n    /**\n     * Import a key into the key service.\n     * @param tenantId\n     * @param body\n     * @returns\n     */\n    import(tenantId: string, body: KeyImportDto): Promise {\n        const privateKey = body.privateKey;\n        return this.keyRepository\n            .save({\n                id: privateKey.kid,\n                tenantId,\n                key: privateKey,\n            })\n            .then(() => privateKey.kid);\n    }\n\n    /**\n     * Get the public key from the private key.\n     * @param privateKey\n     * @returns\n     */\n    private getPubFromPrivateKey(privateKey: JWK_EC_Private): EC_Public {\n        const {\n            d: _d,\n            key_ops: _key_ops,\n            ext: _ext,\n            ...publicKey\n        } = privateKey;\n        return publicKey as EC_Public;\n    }\n\n    /**\n     * Initialize the key service for a specific tenant.\n     * This will create the keys if they do not exist.\n     * @param tenant\n     */\n    init(tenant: string): Promise {\n        return this.getKid(tenant).catch(async () => this.create(tenant));\n    }\n\n    /**\n     * Creates a new keypair and wrtites the private key to the file system.\n     * @param tenantId\n     * @returns key id of the generated key.\n     */\n    async create(tenantId: string): Promise {\n        const keys = await this.crypto.generateKeyPair();\n        const privateKey = keys.privateKey as JWK;\n        //add a random key id for reference\n        privateKey.kid = v4();\n        privateKey.alg = this.crypto.alg;\n\n        //remove exportable and key_ops from the private key\n        delete privateKey.ext;\n        delete privateKey.key_ops;\n\n        return this.keyRepository\n            .save({\n                id: privateKey.kid,\n                tenantId,\n                key: privateKey,\n            })\n            .then(() => privateKey.kid!);\n    }\n\n    /**\n     * Get the signer for the key service\n     */\n    async signer(tenantId: string, keyId?: string): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n        return this.crypto.getSigner(privateKey);\n    }\n\n    /**\n     * Get the keys from the file system or generate them if they do not exist\n     * @returns\n     */\n    private async getPrivateKey(tenantId: string, keyId?: string) {\n        keyId =\n            keyId ||\n            (await this.getKid(tenantId).catch(() => this.create(tenantId)));\n\n        return this.keyRepository\n            .findOneByOrFail({\n                id: keyId,\n                tenantId,\n            })\n            .then((key) => key.key);\n    }\n\n    /**\n     * Gets one key id for the tenant.\n     * If no key exists, it will throw an error.\n     * @returns\n     */\n    getKid(\n        tenantId: string,\n        type: CertificateType = \"signing\",\n    ): Promise {\n        return this.certRepository\n            .findOneByOrFail({\n                tenantId,\n                type,\n            })\n            .then((cert) => cert.id);\n    }\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    getPublicKey(type: \"jwk\", tenantId: string, keyId?: string): Promise;\n    getPublicKey(\n        type: \"pem\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    async getPublicKey(\n        type: \"pem\" | \"jwk\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n\n        // Convert the private key to a public key\n        // First import the private key as a CryptoKey\n        const privateKeyInstance = await importJWK(\n            privateKey,\n            this.cryptoService.getAlg(),\n            { extractable: true },\n        );\n\n        // Export it as a JWK to get the public key components\n        const privateKeyJWK = (await exportJWK(\n            privateKeyInstance,\n        )) as JWK_EC_Private;\n\n        // Remove private key components to get only the public key\n\n        const publicKey = this.getPubFromPrivateKey(privateKeyJWK);\n\n        if (type === \"pem\") {\n            // Import the public key and export as PEM\n            const publicKeyInstance = await importJWK(\n                publicKey,\n                this.cryptoService.getAlg(),\n                { extractable: true },\n            );\n            return exportSPKI(publicKeyInstance as CryptoKey);\n        } else {\n            return publicKey;\n        }\n    }\n\n    async signJWT(\n        payload: JWTPayload,\n        header: JWTHeaderParameters,\n        tenantId: string,\n        keyId?: string,\n    ): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n        const privateKeyInstance = (await importJWK(privateKey)) as CryptoKey;\n        return new SignJWT(payload)\n            .setProtectedHeader(header)\n            .sign(privateKeyInstance);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DCQL.html":{"url":"classes/DCQL.html","title":"class - DCQL","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DCQL\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                credential_set\n                            \n                            \n                                    \n                                    \n                                    \n                                credentials\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        credential_set\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialSetQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:105\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { TypeOrmModule, TypeOrmModuleOptions } from \"@nestjs/typeorm\";\nimport { join } from \"path\";\n\n@Module({\n    imports: [\n        TypeOrmModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (\n                configService: ConfigService,\n            ): TypeOrmModuleOptions => {\n                const dbType = configService.get(\n                    \"DB_TYPE\",\n                );\n\n                const commonOptions = {\n                    synchronize: true,\n                    autoLoadEntities: true,\n                };\n\n                if (dbType === \"postgres\") {\n                    return {\n                        type: \"postgres\",\n                        host: configService.getOrThrow(\"DB_HOST\"),\n                        port: configService.getOrThrow(\"DB_PORT\"),\n                        username:\n                            configService.getOrThrow(\"DB_USERNAME\"),\n                        password:\n                            configService.getOrThrow(\"DB_PASSWORD\"),\n                        database:\n                            configService.getOrThrow(\"DB_DATABASE\"),\n                        ...commonOptions,\n                    };\n                }\n\n                return {\n                    type: \"sqlite\",\n                    database: join(\n                        configService.getOrThrow(\"FOLDER\"),\n                        \"service.db\",\n                    ),\n                    ...commonOptions,\n                };\n            },\n        }),\n    ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Display.html":{"url":"classes/Display.html","title":"class - Display","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Display\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                background_color\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                background_image\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                locale\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                logo\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                text_color\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        background_color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        background_image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DisplayImage\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        locale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        logo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DisplayImage\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        text_color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ApiExtraModels,\n    ApiHideProperty,\n    ApiProperty,\n    getSchemaPath,\n} from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToMany, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { VCT } from \"../../credentials-metadata/dto/vct.dto\";\nimport { IssuanceConfig } from \"../../issuance/entities/issuance-config.entity\";\nimport {\n    AllowListPolicy,\n    AttestationBasedPolicy,\n    EmbeddedDisclosurePolicy,\n    NoneTrustPolicy,\n    RootOfTrustPolicy,\n} from \"./policies.dto\";\n\nexport class DisplayImage {\n    @IsString()\n    uri: string;\n}\nexport class Display {\n    @IsString()\n    name: string;\n    @IsString()\n    description: string;\n    @IsString()\n    locale: string;\n    @IsString()\n    background_color?: string;\n    @IsString()\n    text_color?: string;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    background_image?: DisplayImage;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    logo?: DisplayImage;\n}\n\nexport class IssuerMetadataCredentialConfig {\n    @IsString()\n    format: string;\n    @ValidateNested()\n    @Type(() => Display)\n    display: Display[];\n    @IsOptional()\n    @IsString()\n    scope?: string;\n}\n\n@ApiExtraModels(\n    AttestationBasedPolicy,\n    NoneTrustPolicy,\n    AllowListPolicy,\n    RootOfTrustPolicy,\n)\n@Entity()\nexport class CredentialConfig {\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id!: string;\n\n    @IsString()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId!: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => IssuerMetadataCredentialConfig)\n    config!: IssuerMetadataCredentialConfig;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    claims?: Record;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    disclosureFrame?: Record;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => VCT)\n    @Column(\"json\", { nullable: true })\n    vct?: VCT;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    keyBinding?: boolean;\n\n    @IsOptional()\n    @IsString()\n    keyId?: string;\n\n    @ManyToOne(() => CertEntity)\n    key!: CertEntity;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    statusManagement?: boolean;\n\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    @IsNumber()\n    lifeTime?: number;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => SchemaResponse)\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n\n    /**\n     * Embedded disclosure policy (discriminated union by `policy`).\n     * The discriminator makes class-transformer instantiate the right subclass,\n     * and then class-validator runs that subclass’s rules.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(AttestationBasedPolicy) },\n            { $ref: getSchemaPath(NoneTrustPolicy) },\n            { $ref: getSchemaPath(AllowListPolicy) },\n            { $ref: getSchemaPath(RootOfTrustPolicy) },\n        ],\n    })\n    @Type(() => AttestationBasedPolicy, {\n        discriminator: {\n            property: \"policy\",\n            subTypes: [\n                { name: \"none\", value: NoneTrustPolicy },\n                { name: \"allowList\", value: AllowListPolicy },\n                { name: \"rootOfTrust\", value: RootOfTrustPolicy },\n                {\n                    name: \"attestationBased\",\n                    value: AttestationBasedPolicy,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true, // keep `policy` on the instance\n    })\n    @Column(\"json\", { nullable: true })\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n\n    @ManyToMany(\n        () => IssuanceConfig,\n        (issuance) => issuance.credentialConfigs,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    issuanceConfigs!: IssuanceConfig[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DisplayController.html":{"url":"controllers/DisplayController.html","title":"controller - DisplayController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DisplayController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/display.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                display\n            \n\n\n            \n                Description\n            \n            \n                Display Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDisplay\n                            \n                            \n                                    \n                                getDisplay\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDisplay\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDisplay(user: TokenPayload, displayData: DisplayCreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/display/display.controller.ts:37\n                        \n                    \n\n\n            \n                \n                        Create a new display for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user token payload\n\n                                            \n                                        \n                                        \n                                                displayData\n                                            \n                                                            DisplayCreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The display data to create\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created display information\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getDisplay\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDisplay(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/display/display.controller.ts:26\n                        \n                    \n\n\n            \n                \n                        Get display information for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user token payload\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The display information\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post } from \"@nestjs/common\";\nimport { Role } from \"../../auth/roles/role.enum\";\nimport { Secured } from \"../../auth/secure.decorator\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { DisplayService } from \"./display.service\";\nimport { DisplayCreateDto } from \"./dto/display-create.dto\";\n\n/**\n * Display Controller\n */\n@Secured([Role.Issuances])\n@Controller(\"display\")\nexport class DisplayController {\n    /**\n     * Display Controller\n     * @param displayService\n     */\n    constructor(private readonly displayService: DisplayService) {}\n\n    /**\n     * Get display information for a user\n     * @param user The user token payload\n     * @returns The display information\n     */\n    @Get()\n    getDisplay(@Token() user: TokenPayload) {\n        return this.displayService.get(user.entity!.id);\n    }\n\n    /**\n     * Create a new display for a user\n     * @param user The user token payload\n     * @param displayData The display data to create\n     * @returns The created display information\n     */\n    @Post()\n    createDisplay(\n        @Token() user: TokenPayload,\n        @Body() displayData: DisplayCreateDto,\n    ) {\n        return this.displayService.create(user.entity!.id, displayData);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DisplayCreateDto.html":{"url":"classes/DisplayCreateDto.html","title":"class - DisplayCreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DisplayCreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/dto/display-create.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(DisplayEntity, [\n    \"tenant\",\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { DisplayEntity } from \"../entities/display.entity\";\n\nexport class DisplayCreateDto extends OmitType(DisplayEntity, [\n    \"tenant\",\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DisplayEntity.html":{"url":"entities/DisplayEntity.html","title":"entity - DisplayEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DisplayEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/entities/display.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:32\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DisplayInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)@Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:40\n                        \n                    \n\n            \n                \n                    The display information.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsString, ValidateNested } from \"class-validator\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\n\nclass DisplayLogo {\n    @IsString()\n    url: string;\n}\nexport class DisplayInfo {\n    @IsString()\n    name: string;\n    @IsString()\n    locale: string;\n\n    @ValidateNested()\n    @Type(() => DisplayLogo)\n    logo: DisplayLogo;\n}\n\n@Entity()\nexport class DisplayEntity {\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The display information.\n     */\n    @ValidateNested()\n    @Type(() => DisplayInfo)\n    @Column(\"json\")\n    value: DisplayInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DisplayImage.html":{"url":"classes/DisplayImage.html","title":"class - DisplayImage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DisplayImage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ApiExtraModels,\n    ApiHideProperty,\n    ApiProperty,\n    getSchemaPath,\n} from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToMany, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { VCT } from \"../../credentials-metadata/dto/vct.dto\";\nimport { IssuanceConfig } from \"../../issuance/entities/issuance-config.entity\";\nimport {\n    AllowListPolicy,\n    AttestationBasedPolicy,\n    EmbeddedDisclosurePolicy,\n    NoneTrustPolicy,\n    RootOfTrustPolicy,\n} from \"./policies.dto\";\n\nexport class DisplayImage {\n    @IsString()\n    uri: string;\n}\nexport class Display {\n    @IsString()\n    name: string;\n    @IsString()\n    description: string;\n    @IsString()\n    locale: string;\n    @IsString()\n    background_color?: string;\n    @IsString()\n    text_color?: string;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    background_image?: DisplayImage;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    logo?: DisplayImage;\n}\n\nexport class IssuerMetadataCredentialConfig {\n    @IsString()\n    format: string;\n    @ValidateNested()\n    @Type(() => Display)\n    display: Display[];\n    @IsOptional()\n    @IsString()\n    scope?: string;\n}\n\n@ApiExtraModels(\n    AttestationBasedPolicy,\n    NoneTrustPolicy,\n    AllowListPolicy,\n    RootOfTrustPolicy,\n)\n@Entity()\nexport class CredentialConfig {\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id!: string;\n\n    @IsString()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId!: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => IssuerMetadataCredentialConfig)\n    config!: IssuerMetadataCredentialConfig;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    claims?: Record;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    disclosureFrame?: Record;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => VCT)\n    @Column(\"json\", { nullable: true })\n    vct?: VCT;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    keyBinding?: boolean;\n\n    @IsOptional()\n    @IsString()\n    keyId?: string;\n\n    @ManyToOne(() => CertEntity)\n    key!: CertEntity;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    statusManagement?: boolean;\n\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    @IsNumber()\n    lifeTime?: number;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => SchemaResponse)\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n\n    /**\n     * Embedded disclosure policy (discriminated union by `policy`).\n     * The discriminator makes class-transformer instantiate the right subclass,\n     * and then class-validator runs that subclass’s rules.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(AttestationBasedPolicy) },\n            { $ref: getSchemaPath(NoneTrustPolicy) },\n            { $ref: getSchemaPath(AllowListPolicy) },\n            { $ref: getSchemaPath(RootOfTrustPolicy) },\n        ],\n    })\n    @Type(() => AttestationBasedPolicy, {\n        discriminator: {\n            property: \"policy\",\n            subTypes: [\n                { name: \"none\", value: NoneTrustPolicy },\n                { name: \"allowList\", value: AllowListPolicy },\n                { name: \"rootOfTrust\", value: RootOfTrustPolicy },\n                {\n                    name: \"attestationBased\",\n                    value: AttestationBasedPolicy,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true, // keep `policy` on the instance\n    })\n    @Column(\"json\", { nullable: true })\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n\n    @ManyToMany(\n        () => IssuanceConfig,\n        (issuance) => issuance.credentialConfigs,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    issuanceConfigs!: IssuanceConfig[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DisplayInfo.html":{"url":"classes/DisplayInfo.html","title":"class - DisplayInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DisplayInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/entities/display.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                locale\n                            \n                            \n                                    \n                                    \n                                logo\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        locale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        logo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DisplayLogo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsString, ValidateNested } from \"class-validator\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\n\nclass DisplayLogo {\n    @IsString()\n    url: string;\n}\nexport class DisplayInfo {\n    @IsString()\n    name: string;\n    @IsString()\n    locale: string;\n\n    @ValidateNested()\n    @Type(() => DisplayLogo)\n    logo: DisplayLogo;\n}\n\n@Entity()\nexport class DisplayEntity {\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The display information.\n     */\n    @ValidateNested()\n    @Type(() => DisplayInfo)\n    @Column(\"json\")\n    value: DisplayInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DisplayLogo.html":{"url":"classes/DisplayLogo.html","title":"class - DisplayLogo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DisplayLogo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/entities/display.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsString, ValidateNested } from \"class-validator\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\n\nclass DisplayLogo {\n    @IsString()\n    url: string;\n}\nexport class DisplayInfo {\n    @IsString()\n    name: string;\n    @IsString()\n    locale: string;\n\n    @ValidateNested()\n    @Type(() => DisplayLogo)\n    logo: DisplayLogo;\n}\n\n@Entity()\nexport class DisplayEntity {\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The display information.\n     */\n    @ValidateNested()\n    @Type(() => DisplayInfo)\n    @Column(\"json\")\n    value: DisplayInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DisplayService.html":{"url":"injectables/DisplayService.html","title":"injectable - DisplayService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DisplayService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/display.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Display Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(displayRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/display/display.service.ts:11\n                            \n                        \n\n                \n                    \n                            Display Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        displayRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(tenantId: string, displayData: DisplayCreateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/display/display.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Create a new display for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant\n\n                                            \n                                        \n                                        \n                                                displayData\n                                            \n                                                            DisplayCreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The display data to create\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created display information\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/display/display.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Get display information for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The display information for the tenant\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { DisplayCreateDto } from \"./dto/display-create.dto\";\nimport { DisplayEntity } from \"./entities/display.entity\";\n\n/**\n * Display Service\n */\n@Injectable()\nexport class DisplayService {\n    /**\n     * Display Service\n     * @param displayRepository\n     */\n    constructor(\n        @InjectRepository(DisplayEntity)\n        private readonly displayRepository: Repository,\n    ) {}\n\n    /**\n     * Get display information for a user\n     * @param tenantId The ID of the tenant\n     * @returns The display information for the tenant\n     */\n    get(tenantId: string): Promise {\n        return this.displayRepository.findOne({\n            where: { tenantId },\n        });\n    }\n\n    /**\n     * Create a new display for a user\n     * @param tenantId The ID of the tenant\n     * @param displayData The display data to create\n     * @returns The created display information\n     */\n    create(\n        tenantId: string,\n        displayData: DisplayCreateDto,\n    ): Promise {\n        const displayEntity = this.displayRepository.create({\n            ...displayData,\n            tenantId,\n        });\n        return this.displayRepository.save(displayEntity);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EC_Public.html":{"url":"classes/EC_Public.html","title":"class - EC_Public","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EC_Public\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\nThis class is used to define the structure of EC public keys in JWK format.\n\n            \n\n\n            \n                Implements\n            \n            \n                            JWK_EC_Public\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crv\n                            \n                            \n                                kty\n                            \n                            \n                                x\n                            \n                            \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:15\n                        \n                    \n\n            \n                \n                    The algorithm intended for use with the key, such as 'ES256'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        kty\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The key type, which is always 'EC' for Elliptic Curve keys.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:19\n                        \n                    \n\n            \n                \n                    The x coordinate of the EC public key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:23\n                        \n                    \n\n            \n                \n                    The y coordinate of the EC public key.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from \"jose\";\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: \"EC\";\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmbeddedDisclosurePolicy.html":{"url":"classes/EmbeddedDisclosurePolicy.html","title":"class - EmbeddedDisclosurePolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmbeddedDisclosurePolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                policy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncryptionService.html":{"url":"injectables/EncryptionService.html","title":"injectable - EncryptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncryptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/encryption/encryption.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling encryption and decryption operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decryptJwe\n                            \n                            \n                                getEncryptionPublicKey\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(keyRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/encryption/encryption.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor for the EncryptionService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        keyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decryptJwe\n                        \n                    \n                \n            \n            \n                \n                        \n                    decryptJwe(response: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:54\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Encrypts a response using JWE (JSON Web Encryption).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe response to encrypt.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to encrypt the response.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The encrypted response as a JWE string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEncryptionPublicKey\n                        \n                    \n                \n            \n            \n                \ngetEncryptionPublicKey(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Retrieves the public encryption key for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the public key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The public encryption key as a JWK.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Deletes the encryption keys for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to delete the keys.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Initializes the encryption keys for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to initialize the keys.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { exportJWK, generateKeyPair, importJWK, JWK, jwtDecrypt } from \"jose\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { v4 } from \"uuid\";\nimport { KeyEntity } from \"../key/entities/keys.entity\";\n\n/**\n * Service for handling encryption and decryption operations.\n */\n@Injectable()\nexport class EncryptionService {\n    /**\n     * Constructor for the EncryptionService.\n     * @param configService\n     */\n    constructor(\n        @InjectRepository(KeyEntity)\n        private keyRepository: Repository,\n    ) {}\n\n    /**\n     * Initializes the encryption keys for a given tenant.\n     * @param tenantId - The ID of the tenant for which to initialize the keys.\n     */\n    async onTenantInit(tenantId: string) {\n        const privateKey = await generateKeyPair(\"ECDH-ES\", {\n            crv: \"P-256\",\n            extractable: true,\n        }).then(async (secret) => exportJWK(secret.privateKey));\n\n        this.keyRepository.save({\n            id: v4(),\n            tenantId,\n            key: privateKey,\n            usage: \"encrypt\",\n        });\n    }\n\n    /**\n     * Deletes the encryption keys for a given tenant.\n     * @param tenantId - The ID of the tenant for which to delete the keys.\n     */\n    async onTenantDelete(tenantId: string) {\n        await this.keyRepository.delete({ tenantId });\n    }\n\n    /**\n     * Encrypts a response using JWE (JSON Web Encryption).\n     * @param response - The response to encrypt.\n     * @param tenantId - The ID of the tenant for which to encrypt the response.\n     * @returns The encrypted response as a JWE string.\n     */\n    async decryptJwe(response: string, tenantId: string): Promise {\n        const privateEncryptionKey = await this.keyRepository\n            .findOneByOrFail({\n                tenantId,\n                usage: \"encrypt\",\n            })\n            .then(\n                (keyEntity) =>\n                    importJWK(keyEntity.key, \"ECDH-ES\") as Promise,\n            );\n\n        const res = await jwtDecrypt(response, privateEncryptionKey);\n        return res.payload;\n    }\n\n    /**\n     * Retrieves the public encryption key for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve the public key.\n     * @returns The public encryption key as a JWK.\n     */\n    getEncryptionPublicKey(tenantId: string): Promise {\n        return this.keyRepository\n            .findOneByOrFail({\n                tenantId,\n                usage: \"encrypt\",\n            })\n            .then((entry) => {\n                delete entry.key.d;\n                return entry.key;\n            });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/FileEntity.html":{"url":"entities/FileEntity.html","title":"entity - FileEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  FileEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/entities/files.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/entities/files.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/entities/files.entity.ts:19\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/entities/files.entity.ts:13\n                        \n                    \n\n            \n                \n                    Tenant ID for the key.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryColumn } from \"typeorm\";\nimport { TenantEntity } from \"../../auth/tenant/entitites/tenant.entity\";\n\n@Entity()\nexport class FileEntity {\n    @PrimaryColumn()\n    id: string;\n\n    /**\n     * Tenant ID for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileStorage.html":{"url":"interfaces/FileStorage.html","title":"interface - FileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/storage.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        delete\n                                    \n                                \n                                \n                                    \n                                        exists\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        getSignedUrl\n                                    \n                                \n                                \n                                    \n                                        getStream\n                                    \n                                \n                                \n                                    \n                                        put\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        getSignedUrl\n                        \n                    \n                \n            \n            \n                \ngetSignedUrl(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Readable } from \"stream\";\n\nexport type PutOptions = {\n    contentType?: string;\n    metadata?: Record;\n    acl?: \"private\" | \"public\";\n    checksum?: string; // e.g., sha256 base64\n};\n\nexport type StoredObject = {\n    key: string; // canonical key (e.g. \"tenant/2025/08/14/uuid.ext\")\n    etag?: string;\n    size?: number;\n    url?: string; // public URL if ACL=public or a presigned URL\n    contentType?: string;\n    metadata?: Record;\n};\n\nexport interface FileStorage {\n    put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise;\n\n    getStream(\n        key: string,\n    ): Promise;\n\n    delete(key: string): Promise;\n\n    exists(key: string): Promise;\n\n    getSignedUrl?(key: string): Promise; // optional for local\n}\n\nexport const FILE_STORAGE = Symbol(\"FILE_STORAGE\");\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/dto/file-upload.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', format: 'binary'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/dto/file-upload.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class FileUploadDto {\n    @ApiProperty({ type: \"string\", format: \"binary\" })\n    file: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                    Async\n                                deleteByTenant\n                            \n                            \n                                getDownloadUrl\n                            \n                            \n                                getStream\n                            \n                            \n                                    Async\n                                saveUserUpload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(storage: FileStorage, fileRepository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/storage/files.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        storage\n                                                  \n                                                        \n                                                                        FileStorage\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fileRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:73\n                        \n                    \n\n\n            \n                \n                        Deletes a file from the storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The unique identifier of the file.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the file is deleted.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteByTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteByTenant(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Deletes all files associated with a specific tenant\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant whose files should be deleted.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDownloadUrl\n                        \n                    \n                \n            \n            \n                \ngetDownloadUrl(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Retrieves a readable stream of the file associated with the given key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The unique identifier of the file.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to a readable stream of the file.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveUserUpload\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveUserUpload(tenantId: string, file: Express.Multer.File, isPublic)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:30\n                        \n                    \n\n\n            \n                \n                        Saves a user-uploaded file to the storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The ID of the tenant uploading the file.\n\n                                            \n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The file to upload.\n\n                                            \n                                        \n                                        \n                                                isPublic\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                            \n                                                    Whether the file should be publicly accessible.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The metadata of the stored file.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { randomUUID } from \"crypto\";\nimport { extname } from \"path\";\nimport { Repository } from \"typeorm\";\nimport {\n    FILE_STORAGE,\n    FileStorage,\n    StoredObject,\n} from \"../storage/storage.types\";\nimport { FileEntity } from \"./entities/files.entity\";\n\n@Injectable()\nexport class FilesService {\n    constructor(\n        @Inject(FILE_STORAGE) private storage: FileStorage,\n        @InjectRepository(FileEntity)\n        private fileRepository: Repository,\n        private configService: ConfigService,\n    ) {}\n\n    /**\n     * Saves a user-uploaded file to the storage.\n     * @param tenantId The ID of the tenant uploading the file.\n     * @param file The file to upload.\n     * @param isPublic Whether the file should be publicly accessible.\n     * @returns The metadata of the stored file.\n     */\n    async saveUserUpload(\n        tenantId: string,\n        file: Express.Multer.File,\n        isPublic = false,\n    ): Promise {\n        const safeExt = extname(file.originalname || \"\")\n            .toLowerCase()\n            .slice(1);\n        const key = `${new Date().toISOString().slice(0, 10)}-${randomUUID()}${safeExt ? \".\" + safeExt : \"\"}`;\n\n        // TODO: add checksum if you want tamper detection:\n        // const checksum = createHash('sha256').update(bufferOrStreamToBuffer(body)).digest('base64');\n\n        const response = await this.storage.put(key, file.buffer, {\n            contentType: file.mimetype,\n            acl: isPublic ? \"public\" : \"private\",\n            metadata: { originalName: file.originalname },\n        });\n        await this.fileRepository.save({\n            id: key,\n            tenantId,\n        });\n        const url = await this.getDownloadUrl(response.key);\n        return {\n            key: response.key,\n            url,\n        };\n    }\n\n    /**\n     * Retrieves a readable stream of the file associated with the given key.\n     * @param key The unique identifier of the file.\n     * @returns A promise that resolves to a readable stream of the file.\n     */\n    getStream(key: string) {\n        return Promise.resolve(this.storage.getStream(key));\n    }\n\n    /**\n     * Deletes a file from the storage.\n     * @param key The unique identifier of the file.\n     * @returns A promise that resolves when the file is deleted.\n     */\n    delete(key: string) {\n        return Promise.resolve(this.storage.delete(key));\n    }\n\n    getDownloadUrl(key: string) {\n        if (this.storage.getSignedUrl) return this.storage.getSignedUrl(key);\n        return Promise.resolve(\n            `${this.configService.get(\"PUBLIC_URL\")}/storage/${key}`,\n        );\n    }\n\n    /**\n     * Deletes all files associated with a specific tenant\n     * @param tenantId The ID of the tenant whose files should be deleted.\n     */\n    async deleteByTenant(tenantId: string) {\n        const files = await this.fileRepository.find({ where: { tenantId } });\n        await Promise.all(files.map((file) => this.storage.delete(file.id)));\n        await this.fileRepository.delete({ tenantId });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GenerateTokenOptions.html":{"url":"interfaces/GenerateTokenOptions.html","title":"interface - GenerateTokenOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GenerateTokenOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            audience\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresIn\n                                        \n                                \n                                \n                                        \n                                            subject\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresIn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { jwtVerify, SignJWT } from \"jose\";\nimport { DEFAULT_JWT_SECRET } from \"./auth-validation.schema\";\nimport { InternalTokenPayload, TokenPayload } from \"./token.decorator\";\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {\n        if (\n            this.configService.get(\"JWT_SECRET\") === DEFAULT_JWT_SECRET\n        ) {\n            console.warn(\n                \"Using default JWT secret. This is not secure for production environments.\",\n            );\n        }\n    }\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: InternalTokenPayload,\n        options: GenerateTokenOptions,\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow(\"JWT_EXPIRES_IN\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: \"HS256\" })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token verification is handled by external OIDC provider.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = (await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: [\"HS256\"],\n            })) as { payload: TokenPayload };\n            return payload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get(\"OIDC\") !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                HealthController is responsible for providing health check endpoints.\nIt uses the HealthCheckService to perform checks on the database connection.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Endpoint to check the health of the service.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {\n    HealthCheck,\n    HealthCheckService,\n    TypeOrmHealthIndicator,\n} from \"@nestjs/terminus\";\n\n/**\n * HealthController is responsible for providing health check endpoints.\n * It uses the HealthCheckService to perform checks on the database connection.\n */\n@Controller(\"health\")\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private db: TypeOrmHealthIndicator,\n    ) {}\n\n    /**\n     * Endpoint to check the health of the service.\n     * @returns\n     */\n    @Get()\n    @HealthCheck()\n    check() {\n        return this.health.check([() => this.db.pingCheck(\"database\")]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n    imports: [TerminusModule],\n    controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InternalClientsProvider.html":{"url":"injectables/InternalClientsProvider.html","title":"injectable - InternalClientsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InternalClientsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client/adapters/internal-clients.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addClient\n                            \n                            \n                                getClient\n                            \n                            \n                                getClients\n                            \n                            \n                                getClientSecret\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                removeClient\n                            \n                            \n                                validateClientCredentials\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, repo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/client/adapters/internal-clients.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    addClient(tenantId: string, dto: CreateClientDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/internal-clients.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateClientDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClient\n                        \n                    \n                \n            \n            \n                \ngetClient(tenantId: string, clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/internal-clients.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClients\n                        \n                    \n                \n            \n            \n                \ngetClients(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/internal-clients.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClientSecret\n                        \n                    \n                \n            \n            \n                \ngetClientSecret(sub: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/internal-clients.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sub\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/internal-clients.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeClient(tenantId: string, clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/internal-clients.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateClientCredentials\n                        \n                    \n                \n            \n            \n                \nvalidateClientCredentials(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/internal-clients.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap, OnModuleInit } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { randomBytes } from \"crypto\";\nimport { Repository } from \"typeorm\";\nimport { ClientsProvider } from \"../client.provider\";\nimport { ClientEntity } from \"../entities/client.entity\";\nimport { CreateClientDto } from \"../dto/create-client.dto\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Role } from \"../../roles/role.enum\";\n\n@Injectable()\nexport class InternalClientsProvider implements ClientsProvider, OnApplicationBootstrap {\n  constructor(private configService: ConfigService, @InjectRepository(ClientEntity) private repo: Repository) {}\n\n    async onApplicationBootstrap() {\n        const clientId = this.configService.getOrThrow('AUTH_CLIENT_ID');\n        const clientSecret = this.configService.getOrThrow('AUTH_CLIENT_SECRET');\n        if(!await this.getClient('root', clientId)) {\n            await this.repo.save({ clientId, secret: clientSecret, description: 'Internal client', roles: [Role.Tenants] });\n        }\n    }\n\n  getClients(tenantId: string) {\n    return this.repo.find({ where: { tenant: { id: tenantId } } })\n      .then(list => list.map(e => ({ clientId: e.clientId, description: e.description, tenantId, roles: e.roles })));\n  }\n\n  getClient(tenantId: string, clientId: string) {\n    return this.repo.findOne({ where: { clientId, tenant: { id: tenantId } } })\n      .then(e => e ? { clientId: e.clientId, description: e.description, tenantId, roles: e.roles } : null);\n  }\n\n  getClientSecret(sub: string, id: string): Promise {\n        return this.repo.findOne({ where: { clientId: id, tenant: { id: sub } } })\n          .then(e => e!.secret);\n    }\n\n  async addClient(tenantId: string, dto: CreateClientDto) {\n    const secret = randomBytes(32).toString('hex');\n    dto.clientId = `${tenantId}-${dto.clientId}`;\n    const entity = await this.repo.save({ ...dto, secret, tenant: { id: tenantId } });    \n    return { clientId: entity.clientId, description: entity.description, tenantId, roles: entity.roles, clientSecret: secret };\n  }\n\n  async removeClient(tenantId: string, clientId: string) {\n    await this.repo.delete({ clientId, tenant: { id: tenantId } });\n  }\n\n  validateClientCredentials(clientId: string, clientSecret: string) {\n    return this.repo.findOne({ where: { clientId, secret: clientSecret } })\n      .then(e => e ? { clientId: e.clientId, description: e.description, tenantId: e.tenant?.id, roles: e.roles } : null);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InternalTokenPayload.html":{"url":"interfaces/InternalTokenPayload.html","title":"interface - InternalTokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  InternalTokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.decorator.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            TokenPayload\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            tenant_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        tenant_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tenant_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Tenant ID\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from \"@nestjs/common\";\nimport { Role } from \"./roles/role.enum\";\nimport { TenantEntity } from \"./tenant/entitites/tenant.entity\";\n\n/**\n * Token decorator\n */\nexport const Token = createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n);\n\n/**\n * Values of the user token\n */\nexport interface TokenPayload {\n    /**\n     * Tenant entity\n     */\n    entity?: TenantEntity;\n\n    /**\n     * Role for the user\n     */\n    roles: Role[];\n}\n\nexport interface InternalTokenPayload extends TokenPayload {\n    /**\n     * Tenant ID\n     */\n    tenant_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/IssuanceConfig.html":{"url":"entities/IssuanceConfig.html","title":"entity - IssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  IssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/entities/issuance-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage issuance configs\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                authenticationConfig\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                batchSize\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                claimsWebhook\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                credentialConfigs\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                dPopRequired\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        authenticationConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationMethodNone | AuthenticationMethodAuth | AuthenticationMethodPresentation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@ValidateNested()@ApiProperty({oneOf: undefined})@Type(undefined, {discriminator: undefined, keepDiscriminatorProperty: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:114\n                        \n                    \n\n            \n                \n                    Authentication configuration for the issuance process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        batchSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@Column('int', {default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:156\n                        \n                    \n\n            \n                \n                    Value to determine the amount of credentials that are issued in a batch.\nDefault is 1.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        claimsWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:138\n                        \n                    \n\n            \n                \n                    Webhook to receive claims for the issuance process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:123\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credentialConfigs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfig[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, credential => credential.issuanceConfigs)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:80\n                        \n                    \n\n            \n                \n                    Links to all credential config bindings that are included in this issuance config.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:70\n                        \n                    \n\n            \n                \n                    Description of the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        dPopRequired\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@Column('boolean', {default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:164\n                        \n                    \n\n            \n                \n                    Indicates whether DPoP is required for the issuance process. Default value is true.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:49\n                        \n                    \n\n            \n                \n                    Unique identifier for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:147\n                        \n                    \n\n            \n                \n                    Webhook to send the result of the notification response\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:62\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:56\n                        \n                    \n\n            \n                \n                    Tenant ID for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:129\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n    ApiExtraModels,\n    ApiHideProperty,\n    ApiProperty,\n    getSchemaPath,\n} from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    JoinTable,\n    ManyToMany,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { CredentialConfig } from \"../../credentials/entities/credential.entity\";\nimport {\n    AuthenticationMethod,\n    AuthenticationMethodAuth,\n    AuthenticationMethodNone,\n    AuthenticationMethodPresentation,\n} from \"../dto/authentication-config.dto\";\n\n/**\n * Entity to manage issuance configs\n */\n@ApiExtraModels(\n    AuthenticationMethodNone,\n    AuthenticationMethodAuth,\n    AuthenticationMethodPresentation,\n)\n@Entity()\nexport class IssuanceConfig {\n    /**\n     * Unique identifier for the issuance configuration.\n     */\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id: string;\n\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the issuance configuration.\n     */\n    @IsString()\n    @IsOptional()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    /**\n     * Links to all credential config bindings that are included in this issuance config.\n     */\n    @ManyToMany(\n        () => CredentialConfig,\n        (credential) => credential.issuanceConfigs,\n    )\n    @JoinTable()\n    credentialConfigs: CredentialConfig[];\n\n    /**\n     * Authentication configuration for the issuance process.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(AuthenticationMethodNone) },\n            { $ref: getSchemaPath(AuthenticationMethodAuth) },\n            { $ref: getSchemaPath(AuthenticationMethodPresentation) },\n        ],\n    })\n    @Type(() => AuthenticationMethodNone, {\n        discriminator: {\n            property: \"method\",\n            subTypes: [\n                {\n                    name: AuthenticationMethod.NONE,\n                    value: AuthenticationMethodNone,\n                },\n                {\n                    name: AuthenticationMethod.AUTH,\n                    value: AuthenticationMethodAuth,\n                },\n                {\n                    name: AuthenticationMethod.PRESENTATION_DURING_ISSUANCE,\n                    value: AuthenticationMethodPresentation,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    authenticationConfig:\n        | AuthenticationMethodNone\n        | AuthenticationMethodAuth\n        | AuthenticationMethodPresentation;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Webhook to receive claims for the issuance process.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    @Column(\"json\", { nullable: true })\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Webhook to send the result of the notification response\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    @Column(\"json\", { nullable: true })\n    notifyWebhook?: WebhookConfig;\n\n    /**\n     * Value to determine the amount of credentials that are issued in a batch.\n     * Default is 1.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 1 })\n    batchSize?: number;\n\n    /**\n     * Indicates whether DPoP is required for the issuance process. Default value is true.\n     */\n    @IsBoolean()\n    @IsOptional()\n    @Column(\"boolean\", { default: true })\n    dPopRequired?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuanceController.html":{"url":"controllers/IssuanceController.html","title":"controller - IssuanceController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuanceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management/issuance\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getIssuanceConfigurations\n                            \n                            \n                                    \n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:46\n                        \n                    \n\n\n            \n                \n                        Deletes an issuance configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getIssuanceConfigurations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfigurations(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:20\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(config: IssuanceDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:30\n                        \n                    \n\n\n            \n                \n                        Stores the issuance configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post } from \"@nestjs/common\";\nimport { ApiTags } from \"@nestjs/swagger\";\nimport { Role } from \"../../auth/roles/role.enum\";\nimport { Secured } from \"../../auth/secure.decorator\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { IssuanceDto } from \"./dto/issuance.dto\";\nimport { IssuanceService } from \"./issuance.service\";\n\n@ApiTags(\"Issuer management\")\n@Secured([Role.Issuances])\n@Controller(\"issuer-management/issuance\")\nexport class IssuanceController {\n    constructor(private readonly issuanceService: IssuanceService) {}\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getIssuanceConfigurations(@Token() user: TokenPayload) {\n        return this.issuanceService.getIssuanceConfiguration(user.entity!.id);\n    }\n\n    /**\n     * Stores the issuance configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeIssuanceConfiguration(\n        @Body() config: IssuanceDto,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.storeIssuanceConfiguration(\n            user.entity!.id,\n            config,\n        );\n    }\n\n    /**\n     * Deletes an issuance configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteIssuanceConfiguration(\n        @Param(\"id\") id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.deleteIssuanceConfiguration(\n            user.entity!.id,\n            id,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IssuanceDto.html":{"url":"classes/IssuanceDto.html","title":"class - IssuanceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IssuanceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/issuance.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for mapping issuance configurations.\n\n            \n\n            \n                Extends\n            \n            \n                            OmitType(IssuanceConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"credentialConfigs\",\n] as const)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                credentialConfigIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:30\n                        \n                    \n\n            \n                \n                    Ids of the credential configurations associated with this issuance configuration.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\nimport { IssuanceConfig } from \"../entities/issuance-config.entity\";\n\n/**\n * DTO for mapping credential configurations in issuance.\n */\nexport class CredentialConfigMapping {\n    /**\n     * Unique identifier for the credential configuration.\n     */\n    @IsString()\n    id: string;\n}\n\n/**\n * DTO for mapping issuance configurations.\n */\nexport class IssuanceDto extends OmitType(IssuanceConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"credentialConfigs\",\n] as const) {\n    /**\n     * Ids of the credential configurations associated with this issuance configuration.\n     */\n    @IsArray()\n    credentialConfigIds: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IssuanceService.html":{"url":"injectables/IssuanceService.html","title":"injectable - IssuanceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IssuanceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing issuance configurations.\nIt provides methods to get, store, and delete issuance configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    Public\n                                getIssuanceConfiguration\n                            \n                            \n                                getIssuanceConfigurationById\n                            \n                            \n                                    Private\n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                    Async\n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(issuanceConfigRepo: Repository, credentialsConfigService: CredentialConfigService, configService: ConfigService, logger: PinoLogger, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/issuance/issuance.service.ts:21\n                            \n                        \n\n                \n                    \n                            Constructor for IssuanceService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        issuanceConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsConfigService\n                                                  \n                                                        \n                                                                        CredentialConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \ndeleteIssuanceConfiguration(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:221\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfiguration(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:168\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getIssuanceConfigurationById\n                        \n                    \n                \n            \n            \n                \ngetIssuanceConfigurationById(issuanceConfigId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:181\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configuration by ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuanceConfigId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Import issuance configurations from the configured folder.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Import issuance configurations and the credential configurations from the configured folder.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:159\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(tenantId: string, value: IssuanceDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:197\n                        \n                    \n\n\n            \n                \n                        Store the config. If it already exist, overwrite it.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { CredentialConfigService } from \"../credentials/credential-config/credential-config.service\";\nimport { CredentialConfig } from \"../credentials/entities/credential.entity\";\nimport { IssuanceDto } from \"./dto/issuance.dto\";\nimport { IssuanceConfig } from \"./entities/issuance-config.entity\";\n\n/**\n * Service for managing issuance configurations.\n * It provides methods to get, store, and delete issuance configurations.\n */\n@Injectable()\nexport class IssuanceService implements OnApplicationBootstrap {\n    /**\n     * Constructor for IssuanceService.\n     * @param issuanceConfigRepo\n     * @param credentialsConfigService\n     */\n    constructor(\n        @InjectRepository(IssuanceConfig)\n        private issuanceConfigRepo: Repository,\n        private credentialsConfigService: CredentialConfigService,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Import issuance configurations and the credential configurations from the configured folder.\n     */\n    async onApplicationBootstrap() {\n        await this.cryptoService.import();\n        await this.credentialsConfigService.import();\n        await this.import();\n    }\n\n    /**\n     * Import issuance configurations from the configured folder.\n     */\n    private async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"issuance/issuance\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), \"utf8\"),\n                    );\n\n                    payload.id = file.replace(\".json\", \"\");\n                    const exists = await this.getIssuanceConfigurationById(\n                        payload.id,\n                        tenant.name,\n                    ).catch(() => false);\n                    if (exists && !force) {\n                        continue; // Skip if config already exists and force is not set.\n                    } else if (exists && force) {\n                        //delete old element so removed elements are not present\n                        await this.issuanceConfigRepo.delete({\n                            id: payload.id,\n                            tenantId: tenant.name,\n                        });\n                    }\n\n                    // Validate the payload against IssuanceDto\n                    const issuanceDto = plainToClass(IssuanceDto, payload);\n                    //TOODO: it does not validate the different config options\n                    const validationErrors = await validate(issuanceDto, {\n                        whitelist: true,\n                        forbidUnknownValues: false, // avoid false positives on plain objects\n                        forbidNonWhitelisted: false,\n                        stopAtFirstError: false,\n                    });\n\n                    if (validationErrors.length > 0) {\n                        const extractErrorMessages = (error: any): string[] => {\n                            const messages: string[] = [];\n\n                            // Add constraints from the current level\n                            if (error.constraints) {\n                                messages.push(\n                                    ...Object.values(\n                                        error.constraints as Record,\n                                    ),\n                                );\n                            }\n\n                            // Recursively add constraints from children\n                            if (error.children && error.children.length > 0) {\n                                for (const child of error.children) {\n                                    messages.push(\n                                        ...extractErrorMessages(child),\n                                    );\n                                }\n                            }\n\n                            return messages;\n                        };\n\n                        const errorMessages = validationErrors\n                            .map((error) => {\n                                const messages = extractErrorMessages(error);\n                                return messages.length > 0\n                                    ? `${error.property}: ${messages.join(\", \")}`\n                                    : error.property;\n                            })\n                            .join(\"; \");\n\n                        this.logger.error(\n                            {\n                                event: \"ValidationError\",\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for issuance config ${file} in tenant ${tenant.name}: ${errorMessages}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n                    await this.storeIssuanceConfiguration(\n                        tenant.name,\n                        issuanceDto,\n                    );\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} issuance configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    async onTenantDelete(tenantId: string) {\n        await this.issuanceConfigRepo.delete({ tenantId });\n    }\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @param tenantId\n     * @returns\n     */\n    public getIssuanceConfiguration(tenantId: string) {\n        return this.issuanceConfigRepo.find({\n            where: { tenantId },\n            relations: [\"credentialConfigs\"],\n        });\n    }\n\n    /**\n     * Returns the issuance configuration by ID for a given tenant.\n     * @param issuanceConfigId\n     * @param tenantId\n     * @returns\n     */\n    getIssuanceConfigurationById(\n        issuanceConfigId: string,\n        tenantId: string,\n    ): Promise {\n        return this.issuanceConfigRepo.findOneOrFail({\n            where: { id: issuanceConfigId, tenantId },\n            relations: [\"credentialConfigs\"],\n        });\n    }\n\n    /**\n     * Store the config. If it already exist, overwrite it.\n     * @param tenantId\n     * @param value\n     * @returns\n     */\n    async storeIssuanceConfiguration(tenantId: string, value: IssuanceDto) {\n        const credentials: CredentialConfig[] = [];\n        //check if all credential configs exist\n        for (const credentialConfigId of value.credentialConfigIds) {\n            const credential = await this.credentialsConfigService.getById(\n                tenantId,\n                credentialConfigId,\n            );\n            credentials.push(credential);\n        }\n        const issuanceConfig = await this.issuanceConfigRepo.save({\n            ...value,\n            tenantId,\n            credentialConfigs: credentials,\n        });\n        return issuanceConfig;\n    }\n\n    /**\n     * Deletes a credential configuration.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    deleteIssuanceConfiguration(tenantId: string, id: string) {\n        return this.issuanceConfigRepo.delete({ tenantId, id });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuerManagementController.html":{"url":"controllers/IssuerManagementController.html","title":"controller - IssuerManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuerManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuer-management/issuer-management.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: OfferRequestDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@ApiBody({type: OfferRequestDto, examples: undefined})@Post('offer')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:77\n                        \n                    \n\n\n            \n                \n                        Create an offer for a credential.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            OfferRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Res } from \"@nestjs/common\";\nimport { ApiBody, ApiProduces, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Response } from \"express\";\nimport * as QRCode from \"qrcode\";\nimport { Role } from \"../../auth/roles/role.enum\";\nimport { Secured } from \"../../auth/secure.decorator\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { Oid4vciService } from \"../../issuer/oid4vci/oid4vci.service\";\nimport { ResponseType } from \"../../verifier/oid4vp/dto/presentation-request.dto\";\nimport {\n    OfferRequestDto,\n    OfferResponse,\n} from \"../oid4vci/dto/offer-request.dto\";\n\n@ApiTags(\"Issuer management\")\n@Secured([Role.Issuances])\n@Controller(\"issuer-management\")\nexport class IssuerManagementController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Create an offer for a credential.\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: \"JSON response\",\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            \"application/json\": { schema: { type: \"object\" } },\n            \"image/png\": { schema: { type: \"string\", format: \"binary\" } },\n        },\n    })\n    @ApiProduces(\"application/json\", \"image/png\")\n    @ApiBody({\n        type: OfferRequestDto,\n        examples: {\n            qrcode: {\n                summary: \"QR-Code Example\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: \"pid\",\n                } as OfferRequestDto,\n            },\n            uri: {\n                summary: \"URI\",\n                value: {\n                    response_type: ResponseType.URI,\n                    issuanceId: \"pid\",\n                } as OfferRequestDto,\n            },\n            authfixed: {\n                summary: \"Auth flow with fixed session\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: \"pid\",\n                    session: \"fd3ebf28-8ad6-4909-8a7a-a739c2c412c0\",\n                } as OfferRequestDto,\n            },\n            override: {\n                summary: \"Override\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: \"pid-none\",\n                    claims: {\n                        pid: {\n                            given_name: \"Max\",\n                        },\n                    },\n                } as OfferRequestDto,\n            },\n        },\n    })\n    @Post(\"offer\")\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: OfferRequestDto,\n        @Token() user: TokenPayload,\n    ) {\n        // For now, we'll just pass the body to the service as before\n        // You can modify the service later to accept user information if needed\n        const values = await this.oid4vciService.createOffer(\n            body,\n            user,\n            user.entity!.id,\n        );\n\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader(\"Content-Type\", \"image/png\");\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IssuerMetadata.html":{"url":"interfaces/IssuerMetadata.html","title":"interface - IssuerMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IssuerMetadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/dto/issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the issuer metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            issuer\n                                        \n                                \n                                \n                                        \n                                            jwks\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        issuer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        issuer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The issuer identifier, typically a URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { JWK } from \"jose\";\n\n/**\n * Interface representing the issuer metadata.\n */\nexport interface IssuerMetadata {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    issuer: string;\n    /**\n     * The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n     */\n    jwks: {\n        /**\n         * List of keys in the JWKS.\n         */\n        keys: JWK[];\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IssuerMetadataCredentialConfig.html":{"url":"classes/IssuerMetadataCredentialConfig.html","title":"class - IssuerMetadataCredentialConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IssuerMetadataCredentialConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                display\n                            \n                            \n                                    \n                                format\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        display\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Display[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        format\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:63\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ApiExtraModels,\n    ApiHideProperty,\n    ApiProperty,\n    getSchemaPath,\n} from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToMany, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { VCT } from \"../../credentials-metadata/dto/vct.dto\";\nimport { IssuanceConfig } from \"../../issuance/entities/issuance-config.entity\";\nimport {\n    AllowListPolicy,\n    AttestationBasedPolicy,\n    EmbeddedDisclosurePolicy,\n    NoneTrustPolicy,\n    RootOfTrustPolicy,\n} from \"./policies.dto\";\n\nexport class DisplayImage {\n    @IsString()\n    uri: string;\n}\nexport class Display {\n    @IsString()\n    name: string;\n    @IsString()\n    description: string;\n    @IsString()\n    locale: string;\n    @IsString()\n    background_color?: string;\n    @IsString()\n    text_color?: string;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    background_image?: DisplayImage;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    logo?: DisplayImage;\n}\n\nexport class IssuerMetadataCredentialConfig {\n    @IsString()\n    format: string;\n    @ValidateNested()\n    @Type(() => Display)\n    display: Display[];\n    @IsOptional()\n    @IsString()\n    scope?: string;\n}\n\n@ApiExtraModels(\n    AttestationBasedPolicy,\n    NoneTrustPolicy,\n    AllowListPolicy,\n    RootOfTrustPolicy,\n)\n@Entity()\nexport class CredentialConfig {\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id!: string;\n\n    @IsString()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId!: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => IssuerMetadataCredentialConfig)\n    config!: IssuerMetadataCredentialConfig;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    claims?: Record;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    disclosureFrame?: Record;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => VCT)\n    @Column(\"json\", { nullable: true })\n    vct?: VCT;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    keyBinding?: boolean;\n\n    @IsOptional()\n    @IsString()\n    keyId?: string;\n\n    @ManyToOne(() => CertEntity)\n    key!: CertEntity;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    statusManagement?: boolean;\n\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    @IsNumber()\n    lifeTime?: number;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => SchemaResponse)\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n\n    /**\n     * Embedded disclosure policy (discriminated union by `policy`).\n     * The discriminator makes class-transformer instantiate the right subclass,\n     * and then class-validator runs that subclass’s rules.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(AttestationBasedPolicy) },\n            { $ref: getSchemaPath(NoneTrustPolicy) },\n            { $ref: getSchemaPath(AllowListPolicy) },\n            { $ref: getSchemaPath(RootOfTrustPolicy) },\n        ],\n    })\n    @Type(() => AttestationBasedPolicy, {\n        discriminator: {\n            property: \"policy\",\n            subTypes: [\n                { name: \"none\", value: NoneTrustPolicy },\n                { name: \"allowList\", value: AllowListPolicy },\n                { name: \"rootOfTrust\", value: RootOfTrustPolicy },\n                {\n                    name: \"attestationBased\",\n                    value: AttestationBasedPolicy,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true, // keep `policy` on the instance\n    })\n    @Column(\"json\", { nullable: true })\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n\n    @ManyToMany(\n        () => IssuanceConfig,\n        (issuance) => issuance.credentialConfigs,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    issuanceConfigs!: IssuanceConfig[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IssuerModule.html":{"url":"modules/IssuerModule.html","title":"module - IssuerModule","body":"\n                   \n\n\n\n\n    Modules\n    IssuerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_IssuerModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nCredentialConfigService \n\nCredentialConfigService \n\nCredentialConfigService  -->\n\nIssuerModule->CredentialConfigService \n\n\n\n\n\nIssuanceService \n\nIssuanceService \n\nIssuanceService  -->\n\nIssuerModule->IssuanceService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nDisplayService\n\nDisplayService\n\nIssuerModule -->\n\nDisplayService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nIssuerModule -->\n\nWebhookService->IssuerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/issuer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            CredentialConfigService\n                        \n                        \n                            CredentialsService\n                        \n                        \n                            DisplayService\n                        \n                        \n                            IssuanceService\n                        \n                        \n                            Oid4vciService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                        \n                            WebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vciController\n                        \n                        \n                            AuthorizeController\n                        \n                        \n                            CredentialsController\n                        \n                        \n                            IssuerManagementController\n                        \n                        \n                            IssuanceController\n                        \n                        \n                            CredentialsMetadataController\n                        \n                        \n                            DisplayController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            CredentialConfigService\n                        \n                        \n                            IssuanceService\n                        \n                        \n                            Oid4vciService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { setGlobalConfig } from \"@openid4vc/openid4vci\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { SessionModule } from \"../session/session.module\";\nimport { SessionLoggerInterceptor } from \"../utils/logger/session-logger.interceptor\";\nimport { SessionLoggerService } from \"../utils/logger/session-logger.service\";\nimport { WebhookService } from \"../utils/webhook/webhook.service\";\nimport { Oid4vpModule } from \"../verifier/oid4vp/oid4vp.module\";\nimport { AuthorizeController } from \"./authorize/authorize.controller\";\nimport { AuthorizeService } from \"./authorize/authorize.service\";\nimport { CredentialConfigService } from \"./credentials/credential-config/credential-config.service\";\nimport { CredentialsController } from \"./credentials/credentials.controller\";\nimport { CredentialsService } from \"./credentials/credentials.service\";\nimport { CredentialConfig } from \"./credentials/entities/credential.entity\";\nimport { CredentialsMetadataController } from \"./credentials-metadata/credentials-metadata.controller\";\nimport { DisplayController } from \"./display/display.controller\";\nimport { DisplayService } from \"./display/display.service\";\nimport { DisplayEntity } from \"./display/entities/display.entity\";\nimport { IssuanceConfig } from \"./issuance/entities/issuance-config.entity\";\nimport { IssuanceController } from \"./issuance/issuance.controller\";\nimport { IssuanceService } from \"./issuance/issuance.service\";\nimport { IssuerManagementController } from \"./issuer-management/issuer-management.controller\";\nimport { Oid4vciController } from \"./oid4vci/oid4vci.controller\";\nimport { Oid4vciService } from \"./oid4vci/oid4vci.service\";\nimport { StatusListModule } from \"./status-list/status-list.module\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        StatusListModule,\n        Oid4vpModule,\n        SessionModule,\n        HttpModule,\n        TypeOrmModule.forFeature([\n            IssuanceConfig,\n            CredentialConfig,\n            DisplayEntity,\n        ]),\n    ],\n    controllers: [\n        Oid4vciController,\n        AuthorizeController,\n        CredentialsController,\n        IssuerManagementController,\n        IssuanceController,\n        CredentialsMetadataController,\n        DisplayController,\n    ],\n    providers: [\n        AuthorizeService,\n        CredentialsService,\n        Oid4vciService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n        IssuanceService,\n        CredentialConfigService,\n        WebhookService,\n        DisplayService,\n    ],\n    exports: [\n        AuthorizeService,\n        Oid4vciService,\n        IssuanceService,\n        CredentialConfigService,\n    ],\n})\nexport class IssuerModule {\n    constructor(configService: ConfigService) {\n        const unsecure = configService\n            .getOrThrow(\"PUBLIC_URL\")\n            .startsWith(\"http://\");\n        setGlobalConfig({ allowInsecureUrls: unsecure });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwksResponseDto.html":{"url":"classes/JwksResponseDto.html","title":"class - JwksResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwksResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    An array of EC public keys in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from \"jose\";\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: \"EC\";\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard(\"jwt\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { AuthGuard } from \"@nestjs/passport\";\nimport { IS_PUBLIC_KEY } from \"./public.decorator\";\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard(\"jwt\") {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride(\n            IS_PUBLIC_KEY,\n            [context.getHandler(), context.getClass()],\n        );\n        if (isPublic) {\n            return true;\n        }\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtService.html":{"url":"injectables/JwtService.html","title":"injectable - JwtService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                isUsingExternalOIDC\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(payload: InternalTokenPayload, options: GenerateTokenOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Generate a JWT token for integrated OAuth2 server\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            InternalTokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            GenerateTokenOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUsingExternalOIDC\n                        \n                    \n                \n            \n            \n                \nisUsingExternalOIDC()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:91\n                        \n                    \n\n\n            \n                \n                        Check if the service is using external OIDC provider\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Verify a JWT token (for additional validation if needed)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { jwtVerify, SignJWT } from \"jose\";\nimport { DEFAULT_JWT_SECRET } from \"./auth-validation.schema\";\nimport { InternalTokenPayload, TokenPayload } from \"./token.decorator\";\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {\n        if (\n            this.configService.get(\"JWT_SECRET\") === DEFAULT_JWT_SECRET\n        ) {\n            console.warn(\n                \"Using default JWT secret. This is not secure for production environments.\",\n            );\n        }\n    }\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: InternalTokenPayload,\n        options: GenerateTokenOptions,\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow(\"JWT_EXPIRES_IN\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: \"HS256\" })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token verification is handled by external OIDC provider.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = (await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: [\"HS256\"],\n            })) as { payload: TokenPayload };\n            return payload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get(\"OIDC\") !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, \"jwt\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Private\n                                    Static\n                                getExternalOIDCConfig\n                            \n                            \n                                    Private\n                                    Static\n                                getIntegratedOAuth2Config\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, tenantService: TenantService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantService\n                                                  \n                                                        \n                                                                        TenantService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(req: any, options?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getExternalOIDCConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExternalOIDCConfig(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         { secretOrKeyProvider: any; jwtFromRequest: any; algorithms: {}; issuer: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getIntegratedOAuth2Config\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIntegratedOAuth2Config(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: InternalTokenPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:83\n                        \n                    \n\n\n            \n                \n                        Validate the JWT payload. It will also check if the client is set up.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            InternalTokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The JWT payload\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The validated payload or an error\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { passportJwtSecret } from \"jwks-rsa\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { TenantService } from \"./tenant/tenant.service\";\nimport { InternalTokenPayload } from \"./token.decorator\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, \"jwt\") {\n    constructor(\n        private configService: ConfigService,\n        private tenantService: TenantService,\n    ) {\n        const useExternalOIDC = configService.get(\"OIDC\");\n\n        const config = useExternalOIDC\n            ? JwtStrategy.getExternalOIDCConfig(configService)\n            : JwtStrategy.getIntegratedOAuth2Config(configService);\n        super(config);\n    }\n\n    // Override authenticate to add debugging\n    authenticate(req: any, options?: any) {\n        return super.authenticate(req, {\n            ...options,\n            failWithError: true, // This will throw errors instead of just returning 401\n        });\n    }\n\n    private static getExternalOIDCConfig(configService: ConfigService) {\n        const keycloakIssuerUrl = configService.get(\"OIDC_INTERNAL_ISSUER_URL\");\n        const jwksUri = `${keycloakIssuerUrl}/protocol/openid-connect/certs`;\n\n        return {\n            secretOrKeyProvider: passportJwtSecret({\n                cache: true,\n                rateLimit: true,\n                jwksRequestsPerMinute: 5,\n                jwksUri: jwksUri,\n                handleSigningKeyError: (err, cb) => {\n                    console.error(\"❌ Keycloak JWKS error:\", err);\n                    if (err instanceof Error) {\n                        return cb(err);\n                    }\n                    return cb(\n                        new Error(\n                            \"Could not get the signing key from Keycloak\",\n                        ),\n                    );\n                },\n            }),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: [configService.get(\"OIDC_ALGORITHM\")],\n            issuer: keycloakIssuerUrl,\n        };\n    }\n\n    private static getIntegratedOAuth2Config(\n        configService: ConfigService,\n    ): any {\n        const config = {\n            secretOrKey: configService.get(\"JWT_SECRET\"),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: [\"HS256\"], // Using symmetric key for integrated OAuth2\n            ignoreExpiration: false, // Ensure tokens expire\n        };\n\n        // Add issuer validation only if JWT_ISSUER is configured\n        const issuer = configService.get(\"JWT_ISSUER\");\n        if (issuer) {\n            (config as any).issuer = issuer;\n        }\n\n        return config;\n    }\n\n    /**\n     * Validate the JWT payload. It will also check if the client is set up.\n     * @param payload The JWT payload\n     * @returns The validated payload or an error\n     */\n    async validate(payload: InternalTokenPayload): Promise {\n        const useExternalOIDC =\n            this.configService.get(\"OIDC\") !== undefined;\n        let sub = payload.tenant_id;\n        if (useExternalOIDC) {\n            const key = this.configService.getOrThrow(\"OIDC_SUB\");\n            sub = (payload as any)[key] as string;\n        }\n\n        const tenantEntity = await this.tenantService\n            .getTenant(sub)\n            .catch(() => null);\n\n        return {\n            entity: tenantEntity,\n            roles: payload.roles || (payload as any).realm_access?.roles || [],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Key.html":{"url":"classes/Key.html","title":"class - Key","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Key\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-import.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        JWK\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                alg\n                            \n                            \n                                    \n                                crv\n                            \n                            \n                                    \n                                d\n                            \n                            \n                                    \n                                kid\n                            \n                            \n                                    \n                                kty\n                            \n                            \n                                    \n                                x\n                            \n                            \n                                    \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        alg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        d\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        kid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        kty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['EC'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsEnum, IsOptional, IsString, ValidateNested } from \"class-validator\";\nimport { JWK } from \"jose\";\n\nclass Key implements JWK {\n    @IsString()\n    kid: string; // Key ID\n    @IsEnum([\"EC\"])\n    kty: string; // Key Type\n    @IsString()\n    x: string; // X coordinate for EC keys\n    @IsString()\n    y: string; // Y coordinate for EC keys\n    @IsString()\n    crv: string; // Curve name for EC keys\n    @IsString()\n    d: string; // Private key value for EC keys\n    @IsString()\n    alg: string; // Algorithm used with the key\n}\n\n/**\n * DTO for importing a key.\n */\nexport class KeyImportDto {\n    /**\n     * The private key in JWK format.\n     */\n    @ValidateNested()\n    @Type(() => Key)\n    privateKey: Key;\n\n    /**\n     * Optional certificate in PEM format.\n     */\n    @IsString()\n    @IsOptional()\n    crt?: string;\n\n    /**\n     * Description of the key.\n     */\n    @IsString()\n    @IsOptional()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/KeyController.html":{"url":"controllers/KeyController.html","title":"controller - KeyController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  KeyController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                key\n            \n\n\n            \n                Description\n            \n            \n                KeyController is responsible for managing keys in the system.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addKey\n                            \n                            \n                                    \n                                deleteKey\n                            \n                            \n                                    \n                                getKeys\n                            \n                            \n                                    \n                                    Async\n                                updateKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        addKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    addKey(token: TokenPayload, body: KeyImportDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:48\n                        \n                    \n\n\n            \n                \n                        Add a new key to the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteKey(token: TokenPayload, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:77\n                        \n                    \n\n\n            \n                \n                        Delete a key from the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKeys(token: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:37\n                        \n                    \n\n\n            \n                \n                        Get all keys for the tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateKey(token: TokenPayload, id: string, body: UpdateKeyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:63\n                        \n                    \n\n\n            \n                \n                        Updates an existing key in the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateKeyDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Inject,\n    Param,\n    Post,\n    Put,\n} from \"@nestjs/common\";\nimport { Role } from \"../../auth/roles/role.enum\";\nimport { Secured } from \"../../auth/secure.decorator\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { CryptoService } from \"../crypto.service\";\nimport { KeyImportDto } from \"./dto/key-import.dto\";\nimport { UpdateKeyDto } from \"./dto/key-update.dto\";\nimport { CertEntity } from \"./entities/cert.entity\";\nimport { KeyService } from \"./key.service\";\n\n/**\n * KeyController is responsible for managing keys in the system.\n */\n@Secured([Role.Issuances, Role.Presentations])\n@Controller(\"key\")\nexport class KeyController {\n    constructor(\n        @Inject(\"KeyService\") public readonly keyService: KeyService,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Get all keys for the tenant.\n     * @param token\n     * @returns\n     */\n    @Get()\n    getKeys(@Token() token: TokenPayload): Promise {\n        return this.cryptoService.getCerts(token.entity!.id);\n    }\n\n    /**\n     * Add a new key to the key service.\n     * @param token\n     * @param body\n     * @returns\n     */\n    @Post()\n    async addKey(\n        @Token() token: TokenPayload,\n        @Body() body: KeyImportDto,\n    ): Promise {\n        const id = await this.cryptoService.importKey(token.entity!, body);\n        return { id };\n    }\n\n    /**\n     * Updates an existing key in the key service.\n     * @param token\n     * @param id\n     * @param body\n     */\n    @Put(\":id\")\n    async updateKey(\n        @Token() token: TokenPayload,\n        @Param(\"id\") id: string,\n        @Body() body: UpdateKeyDto,\n    ): Promise {\n        await this.cryptoService.updateCert(token.entity!.id, id, body);\n    }\n\n    /**\n     * Delete a key from the key service.\n     * @param token\n     * @param id\n     */\n    @Delete(\":id\")\n    deleteKey(@Token() token: TokenPayload, @Param(\"id\") id: string) {\n        return this.cryptoService.deleteKey(token.entity!.id, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/KeyEntity.html":{"url":"entities/KeyEntity.html","title":"entity - KeyEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  KeyEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/keys.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                key\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                usage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:16\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JWK\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:34\n                        \n                    \n\n            \n                \n                    The key material.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:28\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:22\n                        \n                    \n\n            \n                \n                    Tenant ID for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        usage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KeyUsage\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {default: 'sign'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:40\n                        \n                    \n\n            \n                \n                    The usage type of the key.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { JWK } from \"jose\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\n\n/**\n * Key usage types.\n */\nexport type KeyUsage = \"sign\" | \"encrypt\";\n\n@Entity()\nexport class KeyEntity {\n    /**\n     * Unique identifier for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    id: string;\n\n    /**\n     * Tenant ID for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The key material.\n     */\n    @Column(\"json\")\n    key: JWK;\n\n    /**\n     * The usage type of the key.\n     */\n    @Column(\"varchar\", { default: \"sign\" })\n    usage: KeyUsage;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyImportDto.html":{"url":"classes/KeyImportDto.html","title":"class - KeyImportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyImportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-import.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for importing a key.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                crt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                privateKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:38\n                        \n                    \n\n            \n                \n                    Optional certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:45\n                        \n                    \n\n            \n                \n                    Description of the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        privateKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Key\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:31\n                        \n                    \n\n            \n                \n                    The private key in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsEnum, IsOptional, IsString, ValidateNested } from \"class-validator\";\nimport { JWK } from \"jose\";\n\nclass Key implements JWK {\n    @IsString()\n    kid: string; // Key ID\n    @IsEnum([\"EC\"])\n    kty: string; // Key Type\n    @IsString()\n    x: string; // X coordinate for EC keys\n    @IsString()\n    y: string; // Y coordinate for EC keys\n    @IsString()\n    crv: string; // Curve name for EC keys\n    @IsString()\n    d: string; // Private key value for EC keys\n    @IsString()\n    alg: string; // Algorithm used with the key\n}\n\n/**\n * DTO for importing a key.\n */\nexport class KeyImportDto {\n    /**\n     * The private key in JWK format.\n     */\n    @ValidateNested()\n    @Type(() => Key)\n    privateKey: Key;\n\n    /**\n     * Optional certificate in PEM format.\n     */\n    @IsString()\n    @IsOptional()\n    crt?: string;\n\n    /**\n     * Description of the key.\n     */\n    @IsString()\n    @IsOptional()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeyModule.html":{"url":"modules/KeyModule.html","title":"module - KeyModule","body":"\n                   \n\n\n\n\n    Modules\n    KeyModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/key.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.module.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { HttpModule, HttpService } from \"@nestjs/axios\";\nimport { DynamicModule, Global, Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { getRepositoryToken, TypeOrmModule } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { DBKeyService } from \"./adapters/db-key.service\";\nimport { VaultKeyService } from \"./adapters/vault-key.service\";\nimport { CryptoImplementatationModule } from \"./crypto-implementation/crypto-implementation.module\";\nimport { CryptoImplementationService } from \"./crypto-implementation/crypto-implementation.service\";\nimport { CertEntity } from \"./entities/cert.entity\";\nimport { KeyEntity } from \"./entities/keys.entity\";\n\n@Global()\n@Module({})\nexport class KeyModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: KeyModule,\n            imports: [\n                HttpModule,\n                ConfigModule,\n                CryptoImplementatationModule,\n                TypeOrmModule.forFeature([CertEntity, KeyEntity]),\n            ],\n            providers: [\n                {\n                    provide: \"KeyService\",\n                    useFactory: (\n                        configService: ConfigService,\n                        httpService: HttpService,\n                        cryptoService: CryptoImplementationService,\n                        certRepository: Repository,\n                        keyRepository: Repository,\n                    ) => {\n                        const kmType = configService.get(\n                            \"KM_TYPE\",\n                        );\n                        if (kmType === \"vault\") {\n                            return new VaultKeyService(\n                                httpService,\n                                configService,\n                                cryptoService,\n                                certRepository,\n                            );\n                        }\n\n                        return new DBKeyService(\n                            configService,\n                            cryptoService,\n                            certRepository,\n                            keyRepository,\n                        );\n                    },\n                    inject: [\n                        ConfigService,\n                        HttpService,\n                        CryptoImplementationService,\n                        getRepositoryToken(CertEntity),\n                        getRepositoryToken(KeyEntity),\n                    ],\n                },\n            ],\n            exports: [\"KeyService\"],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyObj.html":{"url":"classes/KeyObj.html","title":"class - KeyObj","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyObj\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-object.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a key entity with its unique identifier, public key, and certificate.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crt\n                            \n                            \n                                id\n                            \n                            \n                                publicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:19\n                        \n                    \n\n            \n                \n                    Certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:11\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        publicKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EC_Public\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:15\n                        \n                    \n\n            \n                \n                    Public key in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EC_Public } from \"../../../well-known/dto/jwks-response.dto\";\n\n/**\n * Represents a key entity with its unique identifier, public key, and certificate.\n */\n\nexport class KeyObj {\n    /**\n     * Unique identifier for the key.\n     */\n    id: string;\n    /**\n     * Public key in JWK format.\n     */\n    publicKey: EC_Public;\n    /**\n     * Certificate in PEM format.\n     */\n    crt: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyResponseDto.html":{"url":"classes/KeyResponseDto.html","title":"class - KeyResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EC_Public[]\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EC_Public } from \"../../../well-known/dto/jwks-response.dto\";\n\nexport class KeyResponseDto {\n    keys: EC_Public[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyService.html":{"url":"classes/KeyService.html","title":"class - KeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface for a key service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                create\n                            \n                            \n                                    Protected\n                                getCertificate\n                            \n                            \n                                    Abstract\n                                getKid\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                import\n                            \n                            \n                                    Abstract\n                                init\n                            \n                            \n                                    Abstract\n                                signer\n                            \n                            \n                                    Abstract\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, certRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/key.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        certRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:30\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the generated key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCertificate(tenantId: string, keyId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:85\n                        \n                    \n\n\n            \n                \n                        Get the certificate for the given key id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getKid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKid(tenantId: string, type?: CertificateType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Get the key id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                            CertificateType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import(tenantId: string, body: KeyImportDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Import a key into the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Initialize the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the initialized key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Get the callback for the signer function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JoseHeaderParameters, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JoseHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConflictException } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Signer } from \"@sd-jwt/types\";\nimport { JoseHeaderParameters, JWK, JWTPayload } from \"jose\";\nimport { Repository } from \"typeorm\";\nimport { KeyImportDto } from \"./dto/key-import.dto\";\nimport { CertEntity, CertificateType } from \"./entities/cert.entity\";\n\n/**\n * Generic interface for a key service\n */\nexport abstract class KeyService {\n    constructor(\n        protected configService: ConfigService,\n        protected certRepository: Repository,\n    ) {}\n\n    /**\n     * Initialize the key service\n     * @param tenantId\n     * @returns key id of the initialized key.\n     */\n    abstract init(tenantId): Promise;\n\n    /**\n     * Creates a new keypair\n     * @param tenantId\n     * @return key id of the generated key.\n     */\n    abstract create(tenantId): Promise;\n\n    /**\n     * Import a key into the key service.\n     * @param tenantId\n     * @param body\n     */\n    abstract import(tenantId: string, body: KeyImportDto): Promise;\n\n    /**\n     * Get the callback for the signer function\n     * @param tenantId\n     */\n    abstract signer(tenantId: string, keyId?: string): Promise;\n\n    /**\n     * Get the key id\n     * @returns\n     */\n    abstract getKid(tenantId: string, type?: CertificateType): Promise;\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    abstract getPublicKey(\n        type: \"jwk\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    abstract getPublicKey(\n        type: \"pem\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    abstract getPublicKey(\n        type: \"pem\" | \"jwk\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n\n    //TODO: this can be handled via the signer callback\n    abstract signJWT(\n        payload: JWTPayload,\n        header: JoseHeaderParameters,\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n\n    /**\n     * Get the certificate for the given key id.\n     * @param tenantId\n     * @param keyId\n     * @returns\n     */\n    protected getCertificate(tenantId: string, keyId: string): Promise {\n        return this.certRepository\n            .findOneByOrFail({\n                tenantId,\n                id: keyId,\n            })\n            .then(\n                (cert) => cert.crt,\n                () => {\n                    throw new ConflictException(\"Certificate not found\");\n                },\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KeycloakClientsProvider.html":{"url":"injectables/KeycloakClientsProvider.html","title":"injectable - KeycloakClientsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KeycloakClientsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client/adapters/keycloak-clients.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                kc\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addClient\n                            \n                            \n                                    Async\n                                getClient\n                            \n                            \n                                    Async\n                                getClients\n                            \n                            \n                                getClientSecret\n                            \n                            \n                                    Private\n                                init\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                removeClient\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cfg: ConfigService, clientRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/client/adapters/keycloak-clients.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cfg\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clientRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    addClient(tenantId: string, dto: CreateClientDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/keycloak-clients.service.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateClientDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClient(tenantId: string, clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/keycloak-clients.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClients(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/keycloak-clients.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClientSecret\n                        \n                    \n                \n            \n            \n                \ngetClientSecret(sub: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/keycloak-clients.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sub\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/keycloak-clients.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Checks if all the roles are available in the realm. If not they will be created.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/keycloak-clients.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeClient(tenantId: string, clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client/adapters/keycloak-clients.service.ts:138\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KeycloakAdminClient\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/client/adapters/keycloak-clients.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import KeycloakAdminClient from \"@keycloak/keycloak-admin-client\";\nimport { Credentials } from \"@keycloak/keycloak-admin-client/lib/utils/auth\";\nimport { Injectable, OnModuleInit } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { ClientsProvider, ClientView } from \"../client.provider\";\nimport { CreateClientDto } from \"../dto/create-client.dto\";\nimport { ClientEntity } from \"../entities/client.entity\";\nimport { decodeJwt } from \"jose\";\nimport { Role } from \"../../roles/role.enum\";\n\n@Injectable()\nexport class KeycloakClientsProvider implements ClientsProvider, OnModuleInit {\n  private kc: KeycloakAdminClient;\n\n  constructor(\n    private cfg: ConfigService,\n    @InjectRepository(ClientEntity) private clientRepo: Repository\n  ) {}    \n\n  async onModuleInit() {\n    const oidc = this.cfg.getOrThrow('OIDC'); // e.g. https://kc/auth/realms/myrealm\n    const [baseUrl, realmName] = oidc.split('/realms/');\n    this.kc = new KeycloakAdminClient({ baseUrl, realmName });\n\n    const creds: Credentials = {\n      grantType: 'client_credentials',\n      clientId: this.cfg.getOrThrow('OIDC_CLIENT_ID'),\n      clientSecret: this.cfg.getOrThrow('OIDC_CLIENT_SECRET'),\n    };\n\n    await this.kc.auth(creds);\n    const accessToken = await this.kc.getAccessToken();    \n    const payload = decodeJwt(accessToken!);        \n    const refreshMs = Math.max(5, (payload.exp! - Date.now() / 1000) - 10) * 1000;\n    // Refresh a bit before expiry\n    setInterval(async () => {\n      try {\n        await this.kc.auth(creds);\n      } catch (e) {\n        // log & keep trying on next tick.\n      }\n    }, refreshMs);\n    await this.init();\n  }\n\n  /**\n   * Checks if all the roles are available in the realm. If not they will be created.\n   */\n  private init() {\n    const existingRoles: Role[] = [Role.Tenants, Role.Tenants, Role.IssuanceOffer, Role.Issuances, Role.PresentationOffer, Role.Presentations];\n    this.kc.roles.find().then(roles => {\n      // Check if all roles exist\n      const missingRoles = existingRoles.filter(role => !roles.find(r => r.name === role));\n      if (missingRoles.length) {\n        // Create missing roles\n        return Promise.all(missingRoles.map(role => this.kc.roles.create({ name: role })));\n      }\n    }).catch(err => {\n        console.error('Error initializing Keycloak roles:', err);\n    });\n  }\n\n\n  async getClients(tenantId: string): Promise {    \n    // Option 1 (fast): read from your mirror table\n    const rows = await this.clientRepo.find({ where: { tenant: { id: tenantId } } });\n    return rows.map(e => ({ clientId: e.clientId, description: e.description, tenantId, roles: e.roles }));\n  }\n\n  async getClient(tenantId: string, clientId: string) {\n    const e = await this.clientRepo.findOne({ where: { clientId, tenant: { id: tenantId } } });\n    return e ? { clientId: e.clientId, description: e.description, tenantId, roles: e.roles } : null;\n  }\n\n  getClientSecret(sub: string, id: string): Promise {    \n    return this.kc.clients.find({ clientId: id }).then(clients => clients[0].secret!);        \n    }\n\n  async addClient(tenantId: string, dto: CreateClientDto) {\n    dto.clientId = `${tenantId}-${dto.clientId}`; // namespaced  \n    // 1) Create client\n    const created = await this.kc.clients.create({\n      clientId: dto.clientId,\n      description: dto.description,\n      serviceAccountsEnabled: true,\n      enabled: true,\n      publicClient: false,\n      directAccessGrantsEnabled: false,\n      standardFlowEnabled: false,\n      webOrigins: ['*'],\n      attributes: { tenant_id: tenantId }, // useful marker\n      protocolMappers: [\n        // hardcode tenant_id claim into tokens\n        {\n          name: 'tenant_id',\n          protocol: 'openid-connect',\n          protocolMapper: 'oidc-hardcoded-claim-mapper',\n          config: { 'claim.value': tenantId, 'claim.name': 'tenant_id', 'jsonType.label': 'String', 'id.token.claim': 'true', 'access.token.claim': 'true' }\n        },\n        // expose realm roles as \"roles\" claim\n        {\n          name: 'realm-roles',\n          protocol: 'openid-connect',\n          protocolMapper: 'oidc-usermodel-realm-role-mapper',\n          config: { 'claim.name': 'roles', 'jsonType.label': 'String', 'multivalued': 'true', 'access.token.claim': 'true' }\n        }\n      ]\n    });    \n    \n    const id = created.id!;\n\n    // 3) Generate secret once (show only on creation)\n    const secret = await this.kc.clients.generateNewClientSecret({ id });\n\n    // 4) Assign realm roles to the service account user\n    const svcUser = await this.kc.clients.getServiceAccountUser({ id });\n    const allRealmRoles = await this.kc.roles.find();\n    const toAssign = dto.roles\n      .map(r => allRealmRoles.find(ar => ar.name === r))\n      .filter(Boolean) as { id?: string; name?: string }[];\n\n    if (toAssign.length) {\n      await this.kc.users.addRealmRoleMappings({\n        id: svcUser.id!,\n        roles: toAssign.map(r => ({ id: r.id!, name: r.name! }))\n      });\n    }\n\n    // 5) (Optional) Put a mirror row in your DB (no secret)\n    const entity = this.clientRepo.create({ clientId: dto.clientId, description: dto.description, roles: dto.roles, tenant: { id: tenantId } });\n    await this.clientRepo.save(entity);\n\n    return { clientId: dto.clientId, description: dto.description, tenantId, roles: dto.roles, clientSecret: secret.value };\n  }\n\n  async removeClient(tenantId: string, clientId: string) {\n    const kcClient = (await this.kc.clients.find({ clientId }))[0];\n    if (kcClient?.id) await this.kc.clients.del({ id: kcClient.id });\n    await this.clientRepo.delete({ clientId, tenant: { id: tenantId } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalFileStorage.html":{"url":"classes/LocalFileStorage.html","title":"class - LocalFileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalFileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/adapters/local.storage.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            FileStorage\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                exists\n                            \n                            \n                                getStream\n                            \n                            \n                                    Async\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(baseDir: string)\n                    \n                \n                        \n                            \n                                Defined in src/storage/adapters/local.storage.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        baseDir\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        put\n                        \n                    \n                \n            \n            \n                \n                        \n                    put(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    createReadStream,\n    createWriteStream,\n    existsSync,\n    mkdirSync,\n    rmSync,\n    statSync,\n} from \"fs\";\nimport { dirname, join } from \"path\";\nimport { Readable } from \"stream\";\nimport { FileStorage, PutOptions, StoredObject } from \"../storage.types\";\n\nexport class LocalFileStorage implements FileStorage {\n    constructor(private baseDir: string) {}\n\n    async put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise {\n        const fullPath = join(this.baseDir, key);\n        mkdirSync(dirname(fullPath), { recursive: true });\n\n        await new Promise((resolve, reject) => {\n            const write = createWriteStream(fullPath);\n            const src = body instanceof Readable ? body : Readable.from(body);\n            src.pipe(write)\n                .on(\"finish\", () => resolve())\n                .on(\"error\", reject);\n        });\n\n        const st = statSync(fullPath);\n\n        return { key, size: st.size, contentType: opts?.contentType };\n    }\n\n    getStream(key: string) {\n        const fullPath = join(this.baseDir, key);\n        return Promise.resolve({ stream: createReadStream(fullPath) });\n    }\n\n    delete(key: string) {\n        return Promise.resolve(rmSync(join(this.baseDir, key)));\n    }\n\n    exists(key: string) {\n        return Promise.resolve(existsSync(join(this.baseDir, key)));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerConfigService.html":{"url":"injectables/LoggerConfigService.html","title":"injectable - LoggerConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/logger-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing logger configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getConfiguration\n                            \n                            \n                                getLogFormat\n                            \n                            \n                                getLogLevel\n                            \n                            \n                                isDebugModeEnabled\n                            \n                            \n                                isHttpLoggerEnabled\n                            \n                            \n                                isSessionLoggerEnabled\n                            \n                            \n                                    Private\n                                loadConfiguration\n                            \n                            \n                                    Private\n                                parseLogLevel\n                            \n                            \n                                reloadConfiguration\n                            \n                            \n                                shouldEnableAutoLogging\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/logger-config.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConfiguration\n                        \n                    \n                \n            \n            \n                \ngetConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         LoggerConfiguration\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogFormat\n                        \n                    \n                \n            \n            \n                \ngetLogFormat()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     \"json\" | \"pretty\"\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogLevel\n                        \n                    \n                \n            \n            \n                \ngetLogLevel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     LogLevel\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDebugModeEnabled\n                        \n                    \n                \n            \n            \n                \nisDebugModeEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isHttpLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisHttpLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSessionLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisSessionLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseLogLevel\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseLogLevel(level: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                level\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     LogLevel\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reloadConfiguration\n                        \n                    \n                \n            \n            \n                \nreloadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Hot reload configuration from environment\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        shouldEnableAutoLogging\n                        \n                    \n                \n            \n            \n                \nshouldEnableAutoLogging()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Check if automatic HTTP request/response logging should be enabled\nThis is used by the LoggerModule configuration\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoggerConfiguration\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/logger-config.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, LogLevel } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    enableSessionLogger: boolean;\n    enableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: \"json\" | \"pretty\";\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get(\"LOG_LEVEL\", \"info\"),\n            ),\n            enableSessionLogger: this.configService.get(\n                \"LOG_ENABLE_SESSION_LOGGER\",\n                false,\n            ),\n            enableHttpLogger: this.configService.get(\n                \"LOG_ENABLE_HTTP_LOGGER\",\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                \"LOG_DEBUG_MODE\",\n                false,\n            ),\n            logFormat: this.configService.get(\n                \"LOG_FORMAT\",\n                \"pretty\",\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: \"verbose\",\n            debug: \"debug\",\n            log: \"log\",\n            warn: \"warn\",\n            error: \"error\",\n            fatal: \"fatal\",\n        };\n        return levels[level.toLowerCase()] || \"log\";\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return this.config.enableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return this.config.enableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): \"json\" | \"pretty\" {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggerConfiguration.html":{"url":"interfaces/LoggerConfiguration.html","title":"interface - LoggerConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoggerConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/logger-config.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            enableDebugMode\n                                        \n                                \n                                \n                                        \n                                            enableHttpLogger\n                                        \n                                \n                                \n                                        \n                                            enableSessionLogger\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            logFormat\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enableDebugMode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableDebugMode:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableHttpLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableHttpLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableSessionLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableSessionLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:     LogLevel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     LogLevel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logFormat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logFormat:     \"json\" | \"pretty\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"json\" | \"pretty\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, LogLevel } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    enableSessionLogger: boolean;\n    enableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: \"json\" | \"pretty\";\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get(\"LOG_LEVEL\", \"info\"),\n            ),\n            enableSessionLogger: this.configService.get(\n                \"LOG_ENABLE_SESSION_LOGGER\",\n                false,\n            ),\n            enableHttpLogger: this.configService.get(\n                \"LOG_ENABLE_HTTP_LOGGER\",\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                \"LOG_DEBUG_MODE\",\n                false,\n            ),\n            logFormat: this.configService.get(\n                \"LOG_FORMAT\",\n                \"pretty\",\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: \"verbose\",\n            debug: \"debug\",\n            log: \"log\",\n            warn: \"warn\",\n            error: \"error\",\n            fatal: \"fatal\",\n        };\n        return levels[level.toLowerCase()] || \"log\";\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return this.config.enableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return this.config.enableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): \"json\" | \"pretty\" {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetricModule.html":{"url":"modules/MetricModule.html","title":"module - MetricModule","body":"\n                   \n\n\n\n\n    Modules\n    MetricModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/metric/metric.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PrometheusModule } from \"@willsoto/nestjs-prometheus\";\n\n@Module({\n    imports: [\n        //TODO: add a guard to protect the metrics endpoint\n        PrometheusModule.register({\n            defaultMetrics: {\n                enabled: false,\n            },\n        }),\n    ],\n})\nexport class MetricModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoneTrustPolicy.html":{"url":"classes/NoneTrustPolicy.html","title":"class - NoneTrustPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoneTrustPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                none\n\n            \n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                policy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['none'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:54\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotificationRequestDto.html":{"url":"classes/NotificationRequestDto.html","title":"class - NotificationRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotificationRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/notification-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                event\n                            \n                            \n                                    \n                                notification_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationEvent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['credential_accepted', 'credential_revoked'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notification_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotificationEvent } from \"@openid4vc/openid4vci\";\nimport { IsEnum, IsString } from \"class-validator\";\n\nexport class NotificationRequestDto {\n    @IsString()\n    notification_id: string;\n\n    @IsEnum([\"credential_accepted\", \"credential_revoked\"])\n    event: NotificationEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Oauth2AuthorizationServerResponse.html":{"url":"classes/Oauth2AuthorizationServerResponse.html","title":"class - Oauth2AuthorizationServerResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Oauth2AuthorizationServerResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/oauth-authorization-server-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response from an OAuth2 authorization server.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_challenge_endpoint\n                            \n                            \n                                authorization_endpoint\n                            \n                            \n                                code_challenge_methods_supported\n                            \n                            \n                                dpop_signing_alg_values_supported\n                            \n                            \n                                issuer\n                            \n                            \n                                jwks_uri\n                            \n                            \n                                pushed_authorization_request_endpoint\n                            \n                            \n                                require_pushed_authorization_requests\n                            \n                            \n                                token_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_challenge_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:37\n                        \n                    \n\n            \n                \n                    The URL of the authorization challenge endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:13\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's authorization endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        code_challenge_methods_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:21\n                        \n                    \n\n            \n                \n                    List of supported algorithms to sign the challenge\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dpop_signing_alg_values_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:25\n                        \n                    \n\n            \n                \n                    List of supported algorithms for DPoP signing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwks_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:17\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushed_authorization_request_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    The URL of the pushed authorization request endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        require_pushed_authorization_requests\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:29\n                        \n                    \n\n            \n                \n                    Indicates whether the server requires pushed authorization requests.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's token endpoint.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Oauth2AuthorizationServerResponse {\n    issuer: string;\n    /**\n     * The URL of the OAuth2 authorization server's token endpoint.\n     */\n    token_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's authorization endpoint.\n     */\n    authorization_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n     */\n    jwks_uri: string;\n    /**\n     * List of supported algorithms to sign the challenge\n     */\n    code_challenge_methods_supported: string[];\n    /**\n     * List of supported algorithms for DPoP signing.\n     */\n    dpop_signing_alg_values_supported: string[];\n    /**\n     * Indicates whether the server requires pushed authorization requests.\n     */\n    require_pushed_authorization_requests: boolean;\n    /**\n     * The URL of the pushed authorization request endpoint.\n     */\n    pushed_authorization_request_endpoint: string;\n    /**\n     * The URL of the authorization challenge endpoint.\n     */\n    authorization_challenge_endpoint: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferRequestDto.html":{"url":"classes/OfferRequestDto.html","title":"class - OfferRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                claims\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                claimsWebhook\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationIds\n                            \n                            \n                                    \n                                issuanceId\n                            \n                            \n                                    \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                session\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record>\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'object', description: 'Override the default values for the credential claims.', properties: undefined, examples: undefined})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:58\n                        \n                    \n\n            \n                \n                    Override the default values for the credential claims.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        claimsWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:66\n                        \n                    \n\n            \n                \n                    Webhook configuration for claims\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:38\n                        \n                    \n\n            \n                \n                    Overrides the default values for the credential ids.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:31\n                        \n                    \n\n            \n                \n                    Issuance config id to reference the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({examples: undefined, description: 'The type of response expected for the offer request.'})@IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:73\n                        \n                    \n\n            \n                \n                    Pre defined session id\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUUID,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { ResponseType } from \"../../../verifier/oid4vp/dto/presentation-request.dto\";\n\nexport class OfferRequestDto {\n    @ApiProperty({\n        examples: [\n            {\n                value: \"qrcode\",\n            },\n        ],\n        description: \"The type of response expected for the offer request.\",\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Issuance config id to reference the issuance configuration.\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * Overrides the default values for the credential ids.\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    /**\n     * Override the default values for the credential claims.\n     */\n    @ApiProperty({\n        type: \"object\",\n        description: \"Override the default values for the credential claims.\",\n        properties: {},\n        examples: [\n            {\n                pid: {\n                    given_name: \"ERIKA\",\n                    family_name: \"MUSTERMANN\",\n                },\n            },\n        ],\n    })\n    @IsObject()\n    @IsOptional()\n    claims?: Record>;\n\n    /**\n     * Webhook configuration for claims\n     */\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    @IsOptional()\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Pre defined session id\n     */\n    @IsUUID()\n    @IsOptional()\n    session?: string;\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferResponse.html":{"url":"classes/OfferResponse.html","title":"class - OfferResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                session\n                            \n                            \n                                uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:77\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUUID,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { ResponseType } from \"../../../verifier/oid4vp/dto/presentation-request.dto\";\n\nexport class OfferRequestDto {\n    @ApiProperty({\n        examples: [\n            {\n                value: \"qrcode\",\n            },\n        ],\n        description: \"The type of response expected for the offer request.\",\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Issuance config id to reference the issuance configuration.\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * Overrides the default values for the credential ids.\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    /**\n     * Override the default values for the credential claims.\n     */\n    @ApiProperty({\n        type: \"object\",\n        description: \"Override the default values for the credential claims.\",\n        properties: {},\n        examples: [\n            {\n                pid: {\n                    given_name: \"ERIKA\",\n                    family_name: \"MUSTERMANN\",\n                },\n            },\n        ],\n    })\n    @IsObject()\n    @IsOptional()\n    claims?: Record>;\n\n    /**\n     * Webhook configuration for claims\n     */\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    @IsOptional()\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Pre defined session id\n     */\n    @IsUUID()\n    @IsOptional()\n    session?: string;\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vciController.html":{"url":"controllers/Oid4vciController.html","title":"controller - Oid4vciController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vciController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/vci\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VCI (OpenID for Verifiable Credential Issuance) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                credential\n                            \n                            \n                                    \n                                    \n                                nonce\n                            \n                            \n                                    \n                                    \n                                notifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credential\n                        \n                    \n                \n            \n            \n                \n                        \n                    credential(req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('credential')@SessionLogger('session', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:29\n                        \n                    \n\n\n            \n                \n                        Endpoint to issue credentials\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        nonce\n                        \n                    \n                \n            \n            \n                \n                        \n                    nonce(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('nonce')@SessionLogger('nonce', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        notifications\n                        \n                    \n                \n            \n            \n                \n                        \n                    notifications(body: NotificationRequestDto, req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('notification')@SessionLogger('notification_id', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:43\n                        \n                    \n\n\n            \n                \n                        Notification endpoint\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Req, UseInterceptors } from \"@nestjs/common\";\nimport { ApiExcludeController, ApiParam } from \"@nestjs/swagger\";\nimport type { CredentialResponse } from \"@openid4vc/openid4vci\";\nimport type { Request } from \"express\";\nimport { Oid4vciService } from \"../../issuer/oid4vci/oid4vci.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionEntity } from \"../../session/session.decorator\";\nimport { SessionLogger } from \"../../utils/logger//session-logger.decorator\";\nimport { SessionLoggerInterceptor } from \"../../utils/logger/session-logger.interceptor\";\nimport { NotificationRequestDto } from \"./dto/notification-request.dto\";\n\n/**\n * Controller for handling OID4VCI (OpenID for Verifiable Credential Issuance) requests.\n */\n@ApiParam({ name: \"session\", required: true })\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@Controller(\":session/vci\")\n@UseInterceptors(SessionLoggerInterceptor)\nexport class Oid4vciController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Endpoint to issue credentials\n     * @param req\n     * @returns\n     */\n    @Post(\"credential\")\n    @SessionLogger(\"session\", \"OID4VCI\")\n    credential(\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ): Promise {\n        return this.oid4vciService.getCredential(req, session);\n    }\n\n    /**\n     * Notification endpoint\n     * @param body\n     * @returns\n     */\n    @Post(\"notification\")\n    @SessionLogger(\"notification_id\", \"OID4VCI\")\n    notifications(\n        @Body() body: NotificationRequestDto,\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ) {\n        return this.oid4vciService.handleNotification(req, body, session);\n    }\n\n    @Post(\"nonce\")\n    @SessionLogger(\"nonce\", \"OID4VCI\")\n    nonce(@SessionEntity() session: Session) {\n        return this.oid4vciService.nonceRequest(session);\n    }\n\n    //TODO: this endpoint may be relevant for the wallet attestation.\n    /* @Get('session')\n  session() {\n    console.log('Session requested');\n    //TODO store session and created at\n    const session = randomUUID();\n    return {\n      session_id: session,\n    };\n  } */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vpController.html":{"url":"controllers/Oid4vpController.html","title":"controller - Oid4vpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/oid4vp\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getRequestWithSession\n                            \n                            \n                                    \n                                    \n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getRequestWithSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRequestWithSession(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Returns the authorization request for a given requestId and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:43\n                        \n                    \n\n\n            \n                \n                        Endpoint to receive the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, UseInterceptors } from \"@nestjs/common\";\nimport { ApiExcludeController, ApiParam } from \"@nestjs/swagger\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionEntity } from \"../../session/session.decorator\";\nimport { SessionLogger } from \"../../utils/logger/session-logger.decorator\";\nimport { SessionLoggerInterceptor } from \"../../utils/logger/session-logger.interceptor\";\nimport { AuthorizationResponse } from \"./dto/authorization-response.dto\";\nimport { Oid4vpService } from \"./oid4vp.service\";\n\n/**\n * Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n */\n@Controller(\":session/oid4vp\")\n@UseInterceptors(SessionLoggerInterceptor)\n@ApiParam({ name: \"session\", required: true })\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\nexport class Oid4vpController {\n    /**\n     * Constructor for the Oid4vpController.\n     * @param oid4vpService - Instance of Oid4vpService for handling OID4VP operations.\n     */\n    constructor(private readonly oid4vpService: Oid4vpService) {}\n\n    /**\n     * Returns the authorization request for a given requestId and session.\n     * @param requestId\n     * @param session\n     * @returns\n     */\n    @Get()\n    @SessionLogger(\"session\", \"OID4VP\")\n    getRequestWithSession(@SessionEntity() session: Session) {\n        return this.oid4vpService.createAuthorizationRequest(session);\n    }\n\n    /**\n     * Endpoint to receive the response from the wallet.\n     * @param body\n     * @returns\n     */\n    @Post()\n    @SessionLogger(\"session\", \"OID4VP\")\n    getResponse(\n        @Body() body: AuthorizationResponse,\n        @SessionEntity() session: Session,\n    ) {\n        return this.oid4vpService.getResponse(body, session);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/Oid4vpModule.html":{"url":"modules/Oid4vpModule.html","title":"module - Oid4vpModule","body":"\n                   \n\n\n\n\n    Modules\n    Oid4vpModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_imports\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nOid4vpModule -->\n\nWebhookService->Oid4vpModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            Oid4vpService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                        \n                            WebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vpController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Oid4vpService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { forwardRef, Module } from \"@nestjs/common\";\nimport { CryptoModule } from \"../../crypto/crypto.module\";\nimport { RegistrarModule } from \"../../registrar/registrar.module\";\nimport { SessionModule } from \"../../session/session.module\";\nimport { SessionLoggerInterceptor } from \"../../utils/logger/session-logger.interceptor\";\nimport { SessionLoggerService } from \"../../utils/logger/session-logger.service\";\nimport { WebhookService } from \"../../utils/webhook/webhook.service\";\nimport { PresentationsModule } from \"../presentations/presentations.module\";\nimport { Oid4vpController } from \"./oid4vp.controller\";\nimport { Oid4vpService } from \"./oid4vp.service\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        forwardRef(() => RegistrarModule),\n        forwardRef(() => PresentationsModule),\n        SessionModule,\n        HttpModule,\n    ],\n    controllers: [Oid4vpController],\n    providers: [\n        Oid4vpService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n        WebhookService,\n    ],\n    exports: [Oid4vpService],\n})\nexport class Oid4vpModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vpService.html":{"url":"injectables/Oid4vpService.html","title":"injectable - Oid4vpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAuthorizationRequest\n                            \n                            \n                                    Async\n                                createRequest\n                            \n                            \n                                    Async\n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, encryptionService: EncryptionService, configService: ConfigService, registrarService: RegistrarService, presentationsService: PresentationsService, sessionService: SessionService, sessionLogger: SessionLoggerService, webhookService: WebhookService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/oid4vp/oid4vp.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        webhookService\n                                                  \n                                                        \n                                                                        WebhookService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAuthorizationRequest(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:41\n                        \n                    \n\n\n            \n                \n                        Creates an authorization request for the OID4VP flow.\nThis method generates a JWT that includes the necessary parameters for the authorization request.\nIt initializes the session logging context and logs the start of the flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRequest(requestId: string, values: PresentationRequestOptions, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:204\n                        \n                    \n\n\n            \n                \n                        Creates a request for the OID4VP flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            PresentationRequestOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:263\n                        \n                    \n\n\n            \n                \n                        Processes the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { v4 } from \"uuid\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { EncryptionService } from \"../../crypto/encryption/encryption.service\";\nimport { OfferResponse } from \"../../issuer/oid4vci/dto/offer-request.dto\";\nimport { RegistrarService } from \"../../registrar/registrar.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { SessionLoggerService } from \"../../utils/logger/session-logger.service\";\nimport { SessionLogContext } from \"../../utils/logger/session-logger-context\";\nimport { WebhookService } from \"../../utils/webhook/webhook.service\";\nimport { AuthResponse } from \"../presentations/dto/auth-response.dto\";\nimport { PresentationsService } from \"../presentations/presentations.service\";\nimport { AuthorizationResponse } from \"./dto/authorization-response.dto\";\nimport { PresentationRequestOptions } from \"./dto/presentation-request-options.dto\";\n\n@Injectable()\nexport class Oid4vpService {\n    constructor(\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private configService: ConfigService,\n        private registrarService: RegistrarService,\n        private presentationsService: PresentationsService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n        private webhookService: WebhookService,\n    ) {}\n\n    /**\n     * Creates an authorization request for the OID4VP flow.\n     * This method generates a JWT that includes the necessary parameters for the authorization request.\n     * It initializes the session logging context and logs the start of the flow.\n     * @param requestId\n     * @param tenantId\n     * @param auth_session\n     * @returns\n     */\n    async createAuthorizationRequest(session: Session): Promise {\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId: session.tenantId,\n            flowType: \"OID4VP\",\n            stage: \"authorization_request\",\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            requestId: session.requestId,\n            action: \"create_authorization_request\",\n        });\n\n        try {\n            const host = this.configService.getOrThrow(\"PUBLIC_URL\");\n            const tenantHost = `${host}/${session.tenantId}`;\n\n            const presentationConfig =\n                await this.presentationsService.getPresentationConfig(\n                    session.requestId!,\n                    session.tenantId,\n                );\n            let regCert: string | undefined = undefined;\n\n            const dcql_query = JSON.parse(\n                JSON.stringify(presentationConfig.dcql_query).replace(\n                    //g,\n                    tenantHost,\n                ),\n            );\n\n            if (this.registrarService.isEnabled()) {\n                const registrationCert = JSON.parse(\n                    JSON.stringify(presentationConfig.registrationCert).replace(\n                        //g,\n                        tenantHost,\n                    ),\n                );\n                regCert =\n                    await this.registrarService.addRegistrationCertificate(\n                        registrationCert,\n                        dcql_query,\n                        session.requestId!,\n                        session.tenantId,\n                    );\n            }\n            const nonce = randomUUID();\n            await this.sessionService.add(session.id, {\n                vp_nonce: nonce,\n            });\n\n            this.sessionLogger.logAuthorizationRequest(logContext, {\n                requestId: session.requestId,\n                nonce,\n                regCert,\n                dcqlQueryCount: Array.isArray(dcql_query)\n                    ? dcql_query.length\n                    : 1,\n            });\n\n            const hostname = new URL(\n                this.configService.getOrThrow(\"PUBLIC_URL\"),\n            ).hostname;\n\n            const lifeTime = 60 * 60;\n\n            const request = {\n                payload: {\n                    response_type: \"vp_token\",\n                    client_id: \"x509_san_dns:\" + hostname,\n                    response_uri: `${host}/${session.id}/oid4vp`,\n                    response_mode: \"direct_post.jwt\",\n                    nonce,\n                    dcql_query,\n                    client_metadata: {\n                        jwks: {\n                            keys: [\n                                await this.encryptionService.getEncryptionPublicKey(\n                                    session.tenantId,\n                                ),\n                            ],\n                        },\n                        vp_formats: {\n                            mso_mdoc: {\n                                alg: [\"ES256\"],\n                            },\n                            \"dc+sd-jwt\": {\n                                \"kb-jwt_alg_values\": [\"ES256\"],\n                                \"sd-jwt_alg_values\": [\"ES256\"],\n                            },\n                        },\n                        authorization_encrypted_response_alg: \"ECDH-ES\",\n                        authorization_encrypted_response_enc: \"A128GCM\",\n                        client_name: session.tenant.name,\n                        response_types_supported: [\"vp_token\"],\n                    },\n                    state: session.id,\n                    aud: host,\n                    exp: Math.floor(Date.now() / 1000) + lifeTime,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    verifier_attestations: regCert\n                        ? [\n                              {\n                                  format: \"jwt\",\n                                  data: regCert,\n                              },\n                          ]\n                        : undefined,\n                },\n                header: {\n                    typ: \"oauth-authz-req+jwt\",\n                },\n            };\n\n            const accessCert = await this.cryptoService.getCertChain(\n                \"access\",\n                session.tenantId,\n            );\n\n            const header = {\n                ...request.header,\n                alg: \"ES256\",\n                x5c: accessCert,\n            };\n\n            const keyId = await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                \"access\",\n            );\n            const signedJwt = await this.cryptoService.signJwt(\n                header,\n                request.payload,\n                session.tenantId,\n                keyId,\n            );\n\n            this.sessionLogger.logSession(\n                logContext,\n                \"Authorization request created successfully\",\n                {\n                    signedJwtLength: signedJwt.length,\n                    certificateChainLength: accessCert?.length || 0,\n                },\n            );\n\n            return signedJwt;\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                requestId: session.requestId,\n                action: \"create_authorization_request\",\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Creates a request for the OID4VP flow.\n     * @param requestId\n     * @param values\n     * @param tenantId\n     * @returns\n     */\n    async createRequest(\n        requestId: string,\n        values: PresentationRequestOptions,\n        tenantId: string,\n    ): Promise {\n        const presentationConfig =\n            await this.presentationsService.getPresentationConfig(\n                requestId,\n                tenantId,\n            );\n        const fresh = values.session === undefined;\n        values.session = values.session || v4();\n\n        const hostname = new URL(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n        ).hostname;\n        const params = {\n            client_id: `x509_san_dns:${hostname}`,\n            request_uri: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${values.session}/oid4vp`,\n        };\n        const queryString = Object.entries(params)\n            .map(\n                ([key, value]) =>\n                    `${encodeURIComponent(key)}=${encodeURIComponent(value)}`,\n            )\n            .join(\"&\");\n\n        const expiresAt = new Date(\n            Date.now() + (presentationConfig.lifeTime ?? 300) * 1000,\n        );\n\n        if (fresh) {\n            await this.sessionService.create({\n                id: values.session,\n                claimsWebhook: values.webhook ?? presentationConfig.webhook,\n                tenantId,\n                requestId,\n                requestUrl: `openid4vp://?${queryString}`,\n                expiresAt,\n            });\n        } else {\n            await this.sessionService.add(values.session, {\n                claimsWebhook: values.webhook ?? presentationConfig.webhook,\n                requestUrl: `openid4vp://?${queryString}`,\n                expiresAt,\n            });\n        }\n\n        return {\n            uri: queryString,\n            session: values.session,\n        };\n    }\n\n    /**\n     * Processes the response from the wallet.\n     * @param body\n     * @param tenantId\n     */\n    async getResponse(body: AuthorizationResponse, session: Session) {\n        const res = await this.encryptionService.decryptJwe(\n            body.response,\n            session.tenantId,\n        );\n        if (!res.state) {\n            throw new ConflictException(\"No state found in the response\");\n        }\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: res.state,\n            tenantId: session.tenantId,\n            flowType: \"OID4VP\",\n            stage: \"response_processing\",\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            action: \"process_presentation_response\",\n            hasWebhook: !!session.claimsWebhook,\n        });\n\n        try {\n            //TODO: load required fields from the config\n            const credentials = await this.presentationsService.parseResponse(\n                res,\n                [],\n                session.vp_nonce as string,\n            );\n\n            this.sessionLogger.logCredentialVerification(\n                logContext,\n                !!credentials && credentials.length > 0,\n                {\n                    credentialCount: credentials?.length || 0,\n                    nonce: session.vp_nonce,\n                },\n            );\n\n            //tell the auth server the result of the session.\n            await this.sessionService.add(res.state, {\n                //TODO: not clear why it has to be any\n                credentials: credentials as any,\n            });\n            // if there a a webook URL, send the response there\n            //TODO: move to dedicated service to reuse it also in the oid4vci flow.\n            if (session.claimsWebhook) {\n                await this.webhookService.sendWebhook(\n                    session,\n                    logContext,\n                    credentials,\n                    false,\n                );\n            }\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialCount: credentials?.length || 0,\n                webhookSent: !!session.claimsWebhook,\n            });\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                action: \"process_presentation_response\",\n            });\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParResponseDto.html":{"url":"classes/ParResponseDto.html","title":"class - ParResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/par-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expires_in\n                            \n                            \n                                request_uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The expiration time for the request URI in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:5\n                        \n                    \n\n            \n                \n                    The request URI for the Pushed Authorization Request.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ParResponseDto {\n    /**\n     * The request URI for the Pushed Authorization Request.\n     */\n    request_uri: string;\n    /**\n     * The expiration time for the request URI in seconds.\n     */\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html","title":"interface - ParsedAccessTokenAuthorizationCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenAuthorizationCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                        \n                                            grantType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:     AuthorizationCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AuthorizationCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from \"@openid4vc/oauth2\";\nimport type { Request, Response } from \"express\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\nimport { Oid4vpService } from \"../../verifier/oid4vp/oid4vp.service\";\nimport { IssuanceService } from \"../issuance/issuance.service\";\nimport { getHeadersFromRequest } from \"../oid4vci/util\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow(\"PUBLIC_URL\") +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: [\"ES256\"],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        \"request_uri not found or not provided in the request\",\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                \"request_uri not found or not provided in the request\",\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow(\"PUBLIC_URL\")}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.id}`,\n            signer: {\n                method: \"jwk\",\n                alg: \"ES256\",\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    \"jwk\",\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: \"wallet\", // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest(\"pid\", { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: \"insufficient_authorization\",\n            auth_session,\n            presentation,\n            error_description:\n                \"Presentation of credential required before issuance\",\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    \"Session does not have valid credentials for issuance\",\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                issuanceId,\n                session.tenantId,\n            );\n\n        // Use the new authentication configuration structure\n        const authConfig = issuanceConfig.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                \"No authentication configuration found for issuance config\",\n            );\n        }\n\n        switch (authConfig.method) {\n            case \"presentationDuringIssuance\": {\n                // OID4VP flow - credential presentation required\n                const webhook = issuanceConfig.claimsWebhook;\n                const response = await this.parseChallengeRequest(\n                    body,\n                    session.tenantId,\n                    webhook,\n                );\n                res.status(400).send(response);\n                break;\n            }\n            case \"auth\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            case \"none\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            default:\n                throw new Error(\n                    `Unsupported authentication method: ${(authConfig as any).method}`,\n                );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html","title":"interface - ParsedAccessTokenPreAuthorizedCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenPreAuthorizedCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            grantType\n                                        \n                                \n                                \n                                        \n                                            preAuthorizedCode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            txCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:     PreAuthorizedCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PreAuthorizedCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        preAuthorizedCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        preAuthorizedCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        txCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        txCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from \"@openid4vc/oauth2\";\nimport type { Request, Response } from \"express\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\nimport { Oid4vpService } from \"../../verifier/oid4vp/oid4vp.service\";\nimport { IssuanceService } from \"../issuance/issuance.service\";\nimport { getHeadersFromRequest } from \"../oid4vci/util\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow(\"PUBLIC_URL\") +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: [\"ES256\"],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        \"request_uri not found or not provided in the request\",\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                \"request_uri not found or not provided in the request\",\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow(\"PUBLIC_URL\")}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.id}`,\n            signer: {\n                method: \"jwk\",\n                alg: \"ES256\",\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    \"jwk\",\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: \"wallet\", // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest(\"pid\", { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: \"insufficient_authorization\",\n            auth_session,\n            presentation,\n            error_description:\n                \"Presentation of credential required before issuance\",\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    \"Session does not have valid credentials for issuance\",\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                issuanceId,\n                session.tenantId,\n            );\n\n        // Use the new authentication configuration structure\n        const authConfig = issuanceConfig.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                \"No authentication configuration found for issuance config\",\n            );\n        }\n\n        switch (authConfig.method) {\n            case \"presentationDuringIssuance\": {\n                // OID4VP flow - credential presentation required\n                const webhook = issuanceConfig.claimsWebhook;\n                const response = await this.parseChallengeRequest(\n                    body,\n                    session.tenantId,\n                    webhook,\n                );\n                res.status(400).send(response);\n                break;\n            }\n            case \"auth\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            case \"none\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            default:\n                throw new Error(\n                    `Unsupported authentication method: ${(authConfig as any).method}`,\n                );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PolicyCredential.html":{"url":"classes/PolicyCredential.html","title":"class - PolicyCredential","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PolicyCredential\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                attestationBased\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                claims\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                credential_sets\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                credentials\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClaimsQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        credential_sets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialSetQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:68\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationAttachment.html":{"url":"classes/PresentationAttachment.html","title":"class - PresentationAttachment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationAttachment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Attached attestations\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credential_ids\n                            \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credential_ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        format\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PresentationConfig.html":{"url":"entities/PresentationConfig.html","title":"entity - PresentationConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PresentationConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a configuration for a Verifiable Presentation (VP) request.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                attached\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                    \n                                dcql_query\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lifeTime\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                registrationCert\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        attached\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PresentationAttachment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:199\n                        \n                    \n\n            \n                \n                    Attestation that should be attached\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:183\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        dcql_query\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DCQL\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:161\n                        \n                    \n\n            \n                \n                    The DCQL query to be used for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:145\n                        \n                    \n\n            \n                \n                    Description of the presentation configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:124\n                        \n                    \n\n            \n                \n                    Unique identifier for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lifeTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@Column('int', {default: 300})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:153\n                        \n                    \n\n            \n                \n                    Lifetime how long the presentation request is valid after creation, in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        registrationCert\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistrationCertificateRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:169\n                        \n                    \n\n            \n                \n                    The registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:137\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:131\n                        \n                    \n\n            \n                \n                    The tenant ID for which the VP request is made.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:189\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsOptional()@Validate(WebhookConfig)@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:177\n                        \n                    \n\n            \n                \n                    Optional webhook URL to receive the response.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationConfigCreateDto.html":{"url":"classes/PresentationConfigCreateDto.html","title":"class - PresentationConfigCreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationConfigCreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/presentation-config-create.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(PresentationConfig, [\n    \"tenantId\",\n    \"createdAt\",\n    \"updatedAt\",\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { PresentationConfig } from \"../entities/presentation-config.entity\";\n\nexport class PresentationConfigCreateDto extends OmitType(PresentationConfig, [\n    \"tenantId\",\n    \"createdAt\",\n    \"updatedAt\",\n] as const) {\n    // Define the properties for the presentation config create DTO\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationDuringIssuanceConfig.html":{"url":"classes/PresentationDuringIssuanceConfig.html","title":"class - PresentationDuringIssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationDuringIssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for authentication method 'presentationDuringIssuance'\nUsed for OID4VP flow where a credential presentation request is sent\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:41\n                        \n                    \n\n            \n                \n                    Link to the presentation configuration that is relevant for the issuance process\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PresentationManagementController.html":{"url":"controllers/PresentationManagementController.html","title":"controller - PresentationManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PresentationManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                presentation-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                configuration\n                            \n                            \n                                    \n                                deleteConfiguration\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                            \n                                    \n                                storePresentationConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        configuration\n                        \n                    \n                \n            \n            \n                \n                        \n                    configuration(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:102\n                        \n                    \n\n\n            \n                \n                        Returns the presentation request configurations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:130\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation request configuration by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: PresentationRequest, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@ApiBody({type: PresentationRequest, examples: undefined})@Post('request')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:70\n                        \n                    \n\n\n            \n                \n                        Create an presentation request that can be sent to the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            PresentationRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    storePresentationConfig(config: PresentationConfigCreateDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:114\n                        \n                    \n\n\n            \n                \n                        Store a presentation request configuration. If it already exists, it will be updated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            PresentationConfigCreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Res,\n} from \"@nestjs/common\";\nimport { ApiBody, ApiProduces, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Response } from \"express\";\nimport * as QRCode from \"qrcode\";\nimport { Role } from \"../../auth/roles/role.enum\";\nimport { Secured } from \"../../auth/secure.decorator\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { OfferResponse } from \"../../issuer/oid4vci/dto/offer-request.dto\";\nimport {\n    PresentationRequest,\n    ResponseType,\n} from \"../oid4vp/dto/presentation-request.dto\";\nimport { Oid4vpService } from \"../oid4vp/oid4vp.service\";\nimport { PresentationConfigCreateDto } from \"./dto/presentation-config-create.dto\";\nimport { PresentationsService } from \"./presentations.service\";\n\n@ApiTags(\"Presentation management\")\n@Secured([Role.Presentations])\n@Controller(\"presentation-management\")\nexport class PresentationManagementController {\n    constructor(\n        private readonly presentationsService: PresentationsService,\n        private readonly oid4vpService: Oid4vpService,\n    ) {}\n\n    /**\n     * Create an presentation request that can be sent to the user\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: \"JSON response\",\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            \"application/json\": { schema: { type: \"object\" } },\n            \"image/png\": { schema: { type: \"string\", format: \"binary\" } },\n        },\n    })\n    @ApiProduces(\"application/json\", \"image/png\")\n    @ApiBody({\n        type: PresentationRequest,\n        examples: {\n            qrcode: {\n                summary: \"QR-Code Example\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    requestId: \"pid\",\n                },\n            },\n            uri: {\n                summary: \"URI\",\n                value: {\n                    response_type: ResponseType.URI,\n                    requestId: \"pid\",\n                },\n            },\n        },\n    })\n    @Post(\"request\")\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: PresentationRequest,\n        @Token() user: TokenPayload,\n    ) {\n        const values = await this.oid4vpService.createRequest(\n            body.requestId,\n            {\n                webhook: body.webhook,\n            },\n            user.entity!.id,\n        );\n        values.uri = `openid4vp://?${values.uri}`;\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader(\"Content-Type\", \"image/png\");\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n\n    /**\n     * Returns the presentation request configurations.\n     * @returns\n     */\n    @Get()\n    configuration(@Token() user: TokenPayload) {\n        return this.presentationsService.getPresentationConfigs(\n            user.entity!.id,\n        );\n    }\n\n    /**\n     * Store a presentation request configuration. If it already exists, it will be updated.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storePresentationConfig(\n        @Body() config: PresentationConfigCreateDto,\n        @Token() user: TokenPayload,\n    ) {\n        return this.presentationsService.storePresentationConfig(\n            user.entity!.id,\n            config,\n        );\n    }\n\n    /**\n     * Deletes a presentation request configuration by its ID.\n     * @param id\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteConfiguration(@Param(\"id\") id: string, @Token() user: TokenPayload) {\n        return this.presentationsService.deletePresentationConfig(\n            id,\n            user.entity!.id,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationRequest.html":{"url":"classes/PresentationRequest.html","title":"class - PresentationRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the presentation request containing the response type and request ID.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                requestId\n                            \n                            \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:32\n                        \n                    \n\n            \n                \n                    Identifier of the presentation configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:26\n                        \n                    \n\n            \n                \n                    The type of response expected from the presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:40\n                        \n                    \n\n            \n                \n                    Webhook configuration to receive the response.\nIf not provided, the configured webhook from the configuration will be used.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsObject, IsOptional, IsString } from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Enum for the type of response expected from the presentation request.\n */\nexport enum ResponseType {\n    /**\n     * Response type indicating a QR code will be returned.\n     */\n    QRCode = \"qrcode\",\n    /**\n     * Response type indicating a URI will be returned.\n     */\n    URI = \"uri\",\n}\n\n/**\n * DTO for the presentation request containing the response type and request ID.\n */\nexport class PresentationRequest {\n    /**\n     * The type of response expected from the presentation request.\n     */\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Identifier of the presentation configuration\n     */\n    @IsString()\n    requestId: string;\n\n    /**\n     * Webhook configuration to receive the response.\n     * If not provided, the configured webhook from the configuration will be used.\n     */\n    @IsObject()\n    @IsOptional()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PresentationRequestOptions.html":{"url":"interfaces/PresentationRequestOptions.html","title":"interface - PresentationRequestOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PresentationRequestOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PresentationRequestOptions DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            session\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            webhook\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        session\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        session:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional session identifier for tracking the request.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        webhook\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        webhook:         WebhookConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WebhookConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional webhook configuration to receive the response.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * PresentationRequestOptions DTO\n */\nexport interface PresentationRequestOptions {\n    /**\n     * Optional session identifier for tracking the request.\n     */\n    session?: string;\n    /**\n     * Optional webhook configuration to receive the response.\n     */\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PresentationsModule.html":{"url":"modules/PresentationsModule.html","title":"module - PresentationsModule","body":"\n                   \n\n\n\n\n    Modules\n    PresentationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_PresentationsModule_exports\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/presentations/presentations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PresentationManagementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ResolverModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { forwardRef, Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { Oid4vpModule } from \"../oid4vp/oid4vp.module\";\nimport { ResolverModule } from \"../resolver/resolver.module\";\nimport { PresentationConfig } from \"./entities/presentation-config.entity\";\nimport { PresentationManagementController } from \"./presentations.controller\";\nimport { PresentationsService } from \"./presentations.service\";\n\n@Module({\n    imports: [\n        ResolverModule,\n        HttpModule,\n        forwardRef(() => Oid4vpModule),\n        TypeOrmModule.forFeature([PresentationConfig]),\n    ],\n    controllers: [PresentationManagementController],\n    providers: [PresentationsService],\n    exports: [PresentationsService],\n})\nexport class PresentationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PresentationsService.html":{"url":"injectables/PresentationsService.html","title":"injectable - PresentationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PresentationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                kbVerifier\n                            \n                            \n                                sdjwtInstance\n                            \n                            \n                                    Private\n                                statusListFetcher\n                            \n                            \n                                verifier\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deletePresentationConfig\n                            \n                            \n                                getPresentationConfig\n                            \n                            \n                                getPresentationConfigs\n                            \n                            \n                                    Private\n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                parseResponse\n                            \n                            \n                                storePresentationConfig\n                            \n                            \n                                    Public\n                                storeRCID\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, resolverService: ResolverService, vpRequestRepository: Repository, configService: ConfigService, logger: PinoLogger)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/presentations/presentations.service.ts:33\n                            \n                        \n\n                \n                    \n                            Constructor for the PresentationsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of HttpService for making HTTP requests.\n\n\n                                                        \n                                                \n                                                \n                                                        resolverService\n                                                  \n                                                        \n                                                                        ResolverService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ResolverService for resolving DID documents.\n\n\n                                                        \n                                                \n                                                \n                                                        vpRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for managing VP request configurations.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deletePresentationConfig\n                        \n                    \n                \n            \n            \n                \ndeletePresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:176\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to delete.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to delete the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the deletion is complete.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfig\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:186\n                        \n                    \n\n\n            \n                \n                        Retrieves a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the requested PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfigs\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfigs(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:147\n                        \n                    \n\n\n            \n                \n                        Retrieves all presentation configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve configurations.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of PresentationConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Imports presentation configurations from a predefined directory structure.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Imports presentation configurations from a predefined directory structure.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseResponse\n                        \n                    \n                \n            \n            \n                \nparseResponse(res: AuthResponse, requiredFields: string[], keyBindingNonce: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:275\n                        \n                    \n\n\n            \n                \n                        Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            AuthResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requiredFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyBindingNonce\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \nstorePresentationConfig(tenantId: string, vprequest: PresentationConfigCreateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:160\n                        \n                    \n\n\n            \n                \n                        Stores a new presentation configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the configuration.\n\n\n                                            \n                                        \n                                        \n                                                vprequest\n                                            \n                                                            PresentationConfigCreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe PresentationConfig entity to store.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        storeRCID\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeRCID(registrationCertId: string, id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:207\n                        \n                    \n\n\n            \n                \n                        Stores the new registration certificate.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registrationCertId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the registration certificate to store.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to update.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the registration certificate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kbVerifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KbVerifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:258\n                        \n                    \n\n            \n                \n                    Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                            \n                                            \n                                                    signature\n                                            \n                                            \n                                                    payload\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sdjwtInstance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SDJwtVcInstance\n\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:33\n                        \n                    \n\n            \n                \n                    Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        statusListFetcher\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:243\n                        \n                    \n\n            \n                \n                    Fetch the status list from the uri.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    uri\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Verifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:220\n                        \n                    \n\n            \n                \n                    Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                                    \n                                                            \nThe data part of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                            \n                                                    signature\n                                                    \n                                                            \nThe signature of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport {\n    ConflictException,\n    Injectable,\n    OnApplicationBootstrap,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { digest, ES256 } from \"@sd-jwt/crypto-nodejs\";\nimport { SDJwtVcInstance } from \"@sd-jwt/sd-jwt-vc\";\nimport { KbVerifier, Verifier } from \"@sd-jwt/types\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { importJWK, JWK, JWTPayload, jwtVerify } from \"jose\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { ResolverService } from \"../resolver/resolver.service\";\nimport { AuthResponse } from \"./dto/auth-response.dto\";\nimport { PresentationConfigCreateDto } from \"./dto/presentation-config-create.dto\";\nimport { PresentationConfig } from \"./entities/presentation-config.entity\";\n\n/**\n * Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n */\n@Injectable()\nexport class PresentationsService implements OnApplicationBootstrap {\n    /**\n     * Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n     */\n    sdjwtInstance: SDJwtVcInstance;\n\n    /**\n     * Constructor for the PresentationsService.\n     * @param httpService - Instance of HttpService for making HTTP requests.\n     * @param resolverService - Instance of ResolverService for resolving DID documents.\n     * @param vpRequestRepository - Repository for managing VP request configurations.\n     */\n    constructor(\n        private httpService: HttpService,\n        private resolverService: ResolverService,\n        @InjectRepository(PresentationConfig)\n        private vpRequestRepository: Repository,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n    ) {}\n\n    /**\n     * Imports presentation configurations from a predefined directory structure.\n     */\n    async onApplicationBootstrap() {\n        this.sdjwtInstance = new SDJwtVcInstance({\n            hasher: digest,\n            verifier: this.verifier.bind(this),\n            kbVerifier: this.kbVerifier.bind(this),\n            statusListFetcher: this.statusListFetcher.bind(this),\n        });\n        await this.import();\n    }\n\n    /**\n     * Imports presentation configurations from a predefined directory structure.\n     */\n    private async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"presentation\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), \"utf8\"),\n                    );\n\n                    const id = file.replace(\".json\", \"\");\n                    payload.id = id;\n                    const presentationExists = await this.getPresentationConfig(\n                        id,\n                        tenant.name,\n                    ).catch(() => false);\n                    if (presentationExists && !force) {\n                        continue; // Skip if config already exists and force is not set\n                    } else if (presentationExists && force) {\n                        //delete old element so removed elements are not present\n                        await this.vpRequestRepository.delete({\n                            id,\n                            tenantId: tenant.name,\n                        });\n                    }\n\n                    // Validate the payload against PresentationConfig\n                    const config = plainToClass(\n                        PresentationConfigCreateDto,\n                        payload,\n                    );\n                    const validationErrors = await validate(config, {\n                        whitelist: true,\n                        forbidUnknownValues: false, // avoid false positives on plain objects\n                        forbidNonWhitelisted: false,\n                        stopAtFirstError: false,\n                    });\n\n                    if (validationErrors.length > 0) {\n                        this.logger.error(\n                            {\n                                event: \"ValidationError\",\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for presentation config ${file} in tenant ${tenant.name}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n\n                    await this.storePresentationConfig(tenant.name, config);\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} presentation configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    /**\n     * Retrieves all presentation configurations for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve configurations.\n     * @returns A promise that resolves to an array of PresentationConfig entities.\n     */\n    getPresentationConfigs(tenantId: string): Promise {\n        return this.vpRequestRepository.find({\n            where: { tenantId },\n            order: { createdAt: \"DESC\" },\n        });\n    }\n\n    /**\n     * Stores a new presentation configuration.\n     * @param tenantId - The ID of the tenant for which to store the configuration.\n     * @param vprequest - The PresentationConfig entity to store.\n     * @returns A promise that resolves to the stored PresentationConfig entity.\n     */\n    storePresentationConfig(\n        tenantId: string,\n        vprequest: PresentationConfigCreateDto,\n    ) {\n        return this.vpRequestRepository.save({\n            ...vprequest,\n            tenantId,\n        });\n    }\n\n    /**\n     * Deletes a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to delete.\n     * @param tenantId - The ID of the tenant for which to delete the configuration.\n     * @returns A promise that resolves when the deletion is complete.\n     */\n    deletePresentationConfig(id: string, tenantId: string) {\n        return this.vpRequestRepository.delete({ id, tenantId });\n    }\n\n    /**\n     * Retrieves a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to retrieve.\n     * @param tenantId - The ID of the tenant for which to retrieve the configuration.\n     * @returns A promise that resolves to the requested PresentationConfig entity.\n     */\n    getPresentationConfig(\n        id: string,\n        tenantId: string,\n    ): Promise {\n        return this.vpRequestRepository\n            .findOneByOrFail({\n                id,\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(`Request ID ${id} not found`);\n            });\n    }\n\n    /**\n     * Stores the new registration certificate.\n     * @param registrationCertId - The ID of the registration certificate to store.\n     * @param id - The ID of the presentation configuration to update.\n     * @param tenantId - The ID of the tenant for which to store the registration certificate.\n     * @returns\n     */\n    public storeRCID(registrationCertId: string, id: string, tenantId: string) {\n        return this.vpRequestRepository.update(\n            { id, tenantId },\n            { registrationCert: { id: registrationCertId } },\n        );\n    }\n\n    /**\n     * Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n     * @param data - The data part of the SD-JWT-VC.\n     * @param signature - The signature of the SD-JWT-VC.\n     * @returns\n     */\n    verifier: Verifier = async (data, signature) => {\n        const instance = new SDJwtVcInstance({\n            hasher: digest,\n        });\n        const decodedVC = await instance.decode(`${data}.${signature}`);\n        const payload = decodedVC.jwt?.payload as JWTPayload;\n        const header = decodedVC.jwt?.header as JWK;\n        const publicKey = await this.resolverService.resolvePublicKey(\n            payload,\n            header,\n        );\n        const verify = await ES256.getVerifier(publicKey);\n        return verify(data, signature).catch((err) => {\n            console.log(err);\n            return false;\n        });\n    };\n\n    /**\n     * Fetch the status list from the uri.\n     * @param uri\n     * @returns\n     */\n    private statusListFetcher: (uri: string) => Promise = (\n        uri: string,\n    ) => {\n        return firstValueFrom(this.httpService.get(uri)).then(\n            (res) => res.data,\n        );\n    };\n\n    /**\n     * Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n     * @param data\n     * @param signature\n     * @param payload\n     * @returns\n     */\n    private kbVerifier: KbVerifier = async (data, signature, payload) => {\n        if (!payload.cnf) {\n            throw new Error(\"No cnf found in the payload\");\n        }\n        const key = await importJWK(payload.cnf.jwk as JWK, \"ES256\");\n        return jwtVerify(`${data}.${signature}`, key).then(\n            () => true,\n            () => false,\n        );\n    };\n\n    /**\n     * Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n     * @param res\n     * @param requiredFields\n     * @returns\n     */\n    parseResponse(\n        res: AuthResponse,\n        requiredFields: string[],\n        keyBindingNonce: string,\n    ) {\n        const attestations = Object.keys(res.vp_token);\n        const att = attestations.map((att) =>\n            this.sdjwtInstance\n                .verify(res.vp_token[att], {\n                    requiredClaimKeys: requiredFields,\n                    keyBindingNonce,\n                })\n                .then(\n                    (result) => {\n                        return {\n                            id: att,\n                            values: {\n                                ...result.payload,\n                                cnf: undefined, // remove cnf for simplicity\n                                status: undefined, // remove status for simplicity\n                            },\n                        };\n                    },\n                    /* (err) => {\n                        throw new Error\n                        //(console.log(err);\n                        return {\n                            id: att,\n                            error: err.message,\n                        };\n                    }, */\n                ),\n        );\n        return Promise.all(att);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RegistrarEntity.html":{"url":"entities/RegistrarEntity.html","title":"entity - RegistrarEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RegistrarEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/entities/registrar.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accessCertificateId\n                            \n                            \n                                    \n                                relyingPartyId\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accessCertificateId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        relyingPartyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:13\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../auth/tenant/entitites/tenant.entity\";\n\n@Entity()\nexport class RegistrarEntity {\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column(\"varchar\")\n    relyingPartyId: string;\n\n    @Column(\"varchar\")\n    accessCertificateId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RegistrarModule.html":{"url":"modules/RegistrarModule.html","title":"module - RegistrarModule","body":"\n                   \n\n\n\n\n    Modules\n    RegistrarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_imports\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_RegistrarModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/registrar/registrar.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            RegistrarModule is responsible for managing the registrar service.\nIt provides the RegistrarService and imports necessary modules.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            PresentationsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { PresentationsModule } from \"../verifier/presentations/presentations.module\";\nimport { RegistrarEntity } from \"./entities/registrar.entity\";\nimport { RegistrarService } from \"./registrar.service\";\n\n/**\n * RegistrarModule is responsible for managing the registrar service.\n * It provides the RegistrarService and imports necessary modules.\n */\n@Module({\n    imports: [\n        CryptoModule,\n        PresentationsModule,\n        TypeOrmModule.forFeature([RegistrarEntity]),\n    ],\n    providers: [RegistrarService],\n    exports: [RegistrarService],\n})\nexport class RegistrarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RegistrarService.html":{"url":"injectables/RegistrarService.html","title":"injectable - RegistrarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RegistrarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrarService is responsible for managing the interaction with the registrar,\nincluding adding relying parties, access certificates, and registration certificates.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                accessToken\n                            \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                oauth2Client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                addAccessCertificate\n                            \n                            \n                                    Async\n                                addRegistrationCertificate\n                            \n                            \n                                addRp\n                            \n                            \n                                    Private\n                                getExistingRp\n                            \n                            \n                                isEnabled\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Async\n                                refreshAccessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, presentationsService: PresentationsService, registrarRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/registrar/registrar.service.ts:37\n                            \n                        \n\n                \n                    \n                            Constructor for the RegistrarService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ConfigService for accessing configuration values.\n\n\n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of CryptoService for cryptographic operations.\n\n\n                                                        \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of PresentationsService for handling presentations.\n\n\n                                                        \n                                                \n                                                \n                                                        registrarRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        addAccessCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addAccessCertificate(tenantId: string, relyingPartyId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:189\n                        \n                    \n\n\n            \n                \n                        Add a new access certificate to the registrar.\nThis is only needed once, when the access certificate is created.\nIf the access certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                relyingPartyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addRegistrationCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addRegistrationCertificate(req: RegistrationCertificateRequest, dcql_query: any, requestId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:232\n                        \n                    \n\n\n            \n                \n                        Add a new registration certificate to the registrar.\nThis is only needed once, when the registration certificate is created.\nIf the registration certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RegistrationCertificateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dcql_query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addRp\n                        \n                    \n                \n            \n            \n                \naddRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:149\n                        \n                    \n\n\n            \n                \n                        Adds a new relying party to the registrar.\nThis is only needed once, when the relying party is created.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getExistingRp\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExistingRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:172\n                        \n                    \n\n\n            \n                \n                        Stores the existing relying party ID based on the name.\nThis is used when the relying party already exists in the registrar.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the relying party.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The ID of the existing relying party.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnabled\n                        \n                    \n                \n            \n            \n                \nisEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Checks if the registrar service is enabled based on the configuration.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the registrar service is enabled, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Initializes the OAuth2 client and registrar client with the necessary configurations.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Deletes all registrar entries for a specific tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenant: TenantEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:102\n                        \n                    \n\n\n            \n                \n                        This function is called when a tenant is initialized.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenant\n                                            \n                                                            TenantEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshAccessToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:132\n                        \n                    \n\n\n            \n                \n                        Refreshes the access token for the registrar using client credentials.\nThis method is called periodically to ensure the access token is valid.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:37\n                        \n                    \n\n            \n                \n                    Access token for authenticating requests to the registrar.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:33\n                        \n                    \n\n            \n                \n                    Client for interacting with the registrar API.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauth2Client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:29\n                        \n                    \n\n            \n                \n                    OAuth2 client for interacting with the OIDC provider.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { OAuth2Client } from \"@badgateway/oauth2-client\";\nimport { Injectable, OnModuleInit } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { TenantEntity } from \"../auth/tenant/entitites/tenant.entity\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { RegistrationCertificateRequest } from \"../verifier/presentations/dto/vp-request.dto\";\nimport { PresentationsService } from \"../verifier/presentations/presentations.service\";\nimport { RegistrarEntity } from \"./entities/registrar.entity\";\nimport {\n    accessCertificateControllerRegister,\n    registrationCertificateControllerAll,\n    registrationCertificateControllerRegister,\n    relyingPartyControllerFindAll,\n    relyingPartyControllerRegister,\n} from \"./generated\";\nimport { client } from \"./generated/client.gen\";\n\n/**\n * RegistrarService is responsible for managing the interaction with the registrar,\n * including adding relying parties, access certificates, and registration certificates.\n */\n@Injectable()\nexport class RegistrarService implements OnModuleInit {\n    /**\n     * OAuth2 client for interacting with the OIDC provider.\n     */\n    private oauth2Client: OAuth2Client;\n    /**\n     * Client for interacting with the registrar API.\n     */\n    private client: typeof client;\n    /**\n     * Access token for authenticating requests to the registrar.\n     */\n    private accessToken: string;\n\n    /**\n     * Constructor for the RegistrarService.\n     * @param configService - Instance of ConfigService for accessing configuration values.\n     * @param cryptoService - Instance of CryptoService for cryptographic operations.\n     * @param presentationsService - Instance of PresentationsService for handling presentations.\n     */\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private presentationsService: PresentationsService,\n        @InjectRepository(RegistrarEntity)\n        private registrarRepository: Repository,\n    ) {}\n\n    /**\n     * Initializes the OAuth2 client and registrar client with the necessary configurations.\n     */\n    async onModuleInit() {\n        //when not set, we will not use the registrar\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const oidcIssuerUrl =\n            this.configService.getOrThrow(\"REGISTRAR_OIDC_URL\");\n        const clientId = this.configService.getOrThrow(\n            \"REGISTRAR_OIDC_CLIENT_ID\",\n        );\n        const clientSecret = this.configService.getOrThrow(\n            \"REGISTRAR_OIDC_CLIENT_SECRET\",\n        );\n\n        this.oauth2Client = new OAuth2Client({\n            server: `${oidcIssuerUrl}/protocol/openid-connect/token`,\n            clientId,\n            clientSecret,\n            discoveryEndpoint: `${oidcIssuerUrl}/.well-known/openid-configuration`,\n        });\n\n        this.client = client;\n        this.client.setConfig({\n            baseUrl: this.configService.getOrThrow(\"REGISTRAR_URL\"),\n            auth: () => this.accessToken,\n        });\n\n        if (!this.configService.get(\"REGISTRAR_URL\")) {\n            return;\n        }\n        await this.refreshAccessToken();\n    }\n\n    /**\n     * Checks if the registrar service is enabled based on the configuration.\n     * @returns True if the registrar service is enabled, false otherwise.\n     */\n    isEnabled() {\n        return !!this.configService.get(\"REGISTRAR_URL\");\n    }\n\n    /**\n     * This function is called when a tenant is initialized.\n     * @param tenant\n     */\n    async onTenantInit(tenant: TenantEntity) {\n        if (!this.isEnabled()) {\n            return;\n        }\n        //TODO: pass name by call\n        const name = tenant.name;\n        const relyingPartyId = await this.addRp(name);\n        const accessCertificateId = await this.addAccessCertificate(\n            tenant.id,\n            relyingPartyId,\n        );\n        await this.registrarRepository.save({\n            tenantId: tenant.id,\n            relyingPartyId,\n            accessCertificateId,\n        });\n    }\n\n    /**\n     * Deletes all registrar entries for a specific tenant.\n     * @param tenantId\n     */\n    async onTenantDelete(tenantId: string) {\n        await this.registrarRepository.delete({ tenantId });\n    }\n\n    /**\n     * Refreshes the access token for the registrar using client credentials.\n     * This method is called periodically to ensure the access token is valid.\n     */\n    async refreshAccessToken() {\n        await this.oauth2Client.clientCredentials().then((token) => {\n            this.accessToken = token.accessToken;\n            const date = new Date();\n            const expirationDate = new Date(token.expiresAt as number);\n            setTimeout(\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                () => this.refreshAccessToken(),\n                expirationDate.getTime() - date.getTime() - 1000,\n            );\n        });\n    }\n\n    /**\n     * Adds a new relying party to the registrar.\n     * This is only needed once, when the relying party is created.\n     */\n    addRp(name: string): Promise {\n        return relyingPartyControllerRegister({\n            client: this.client,\n            body: {\n                name,\n            },\n        }).then(async (response) => {\n            let rpId: string;\n            if (response.error) {\n                rpId = await this.getExistingRp(name);\n            } else {\n                rpId = response.data![\"id\"];\n            }\n            return rpId;\n        });\n    }\n\n    /**\n     * Stores the existing relying party ID based on the name.\n     * This is used when the relying party already exists in the registrar.\n     * @param name - The name of the relying party.\n     * @returns The ID of the existing relying party.\n     */\n    private getExistingRp(name: string) {\n        return relyingPartyControllerFindAll({\n            client: this.client,\n            query: {\n                name,\n            },\n        }).then((response) => {\n            return response.data!.find((item) => item.name === name)?.id!;\n        });\n    }\n\n    /**\n     * Add a new access certificate to the registrar.\n     * This is only needed once, when the access certificate is created.\n     * If the access certificate already exists, it will be returned.\n     * @returns\n     */\n    private async addAccessCertificate(\n        tenantId: string,\n        relyingPartyId: string,\n    ): Promise {\n        const keyId = await this.cryptoService.keyService.getKid(tenantId);\n        const host = this.configService\n            .getOrThrow(\"PUBLIC_URL\")\n            .replace(\"https://\", \"\");\n        console.log(tenantId);\n        return accessCertificateControllerRegister({\n            client: this.client,\n            body: {\n                publicKey: await this.cryptoService.keyService.getPublicKey(\n                    \"pem\",\n                    tenantId,\n                    keyId,\n                ),\n                dns: [host],\n            },\n            path: {\n                rp: relyingPartyId,\n            },\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\"Error adding access certificate:\", res.error);\n                throw new Error(\"Error adding access certificate\");\n            }\n            //store the cert\n            await this.cryptoService.storeAccessCertificate(\n                res.data![\"crt\"],\n                tenantId,\n                keyId,\n            );\n            return res.data![\"id\"];\n        });\n    }\n\n    /**\n     * Add a new registration certificate to the registrar.\n     * This is only needed once, when the registration certificate is created.\n     * If the registration certificate already exists, it will be returned.\n     * @returns\n     */\n    async addRegistrationCertificate(\n        req: RegistrationCertificateRequest,\n        //TODO: check if the dcql_query is covered by the registration certificate. If not, we need to throw an error since we do not know the new purpose for it.\n        dcql_query: any,\n        requestId: string,\n        tenantId: string,\n    ) {\n        const entry = await this.registrarRepository.findOneByOrFail({\n            tenantId,\n        });\n\n        //TODO: need to check if the access certificate is bound to the access certificate with the subject. Also that the requested fields are matching.\n\n        const certs =\n            (await registrationCertificateControllerAll({\n                client: this.client,\n                path: {\n                    rp: entry.relyingPartyId,\n                },\n            }).then((res) =>\n                res.data?.filter(\n                    (cert) =>\n                        cert.revoked == null && cert.id === (req.id as string),\n                ),\n            )) || [];\n\n        if (certs?.length > 0) {\n            return certs[0].jwt;\n        }\n\n        return registrationCertificateControllerRegister({\n            client: this.client,\n            path: {\n                rp: entry.relyingPartyId,\n            },\n            body: req.body,\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\n                    \"Error adding registration certificate:\",\n                    res.error,\n                );\n                throw new Error(\"Error adding registration certificate\");\n            }\n\n            //TODO: write the ID to the config so its easier to use it. Easier than writing the comparison algorithm (any maybe someone wants to use a different one)\n            await this.presentationsService.storeRCID(\n                res.data![\"id\"],\n                requestId,\n                tenantId,\n            );\n            return res.data![\"jwt\"];\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrationCertificateRequest.html":{"url":"classes/RegistrationCertificateRequest.html","title":"class - RegistrationCertificateRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrationCertificateRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/vp-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrationCertificateRequest DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                body\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RegistrationCertificateCreation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:18\n                        \n                    \n\n            \n                \n                    The body of the registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:13\n                        \n                    \n\n            \n                \n                    Identifier of the registration certificate that got issued.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsOptional, IsString } from \"class-validator\";\nimport { RegistrationCertificateCreation } from \"../../../registrar/generated\";\n\n/**\n * RegistrationCertificateRequest DTO\n */\nexport class RegistrationCertificateRequest {\n    /**\n     * Identifier of the registration certificate that got issued.\n     */\n    @IsOptional()\n    @IsString()\n    id?: string;\n    /**\n     * The body of the registration certificate request containing the necessary details.\n     */\n    @IsObject()\n    body: RegistrationCertificateCreation;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResolverModule.html":{"url":"modules/ResolverModule.html","title":"module - ResolverModule","body":"\n                   \n\n\n\n\n    Modules\n    ResolverModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\n\nResolverService \n\nResolverService \n\n\n\nResolverModule\n\nResolverModule\n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/resolver/resolver.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { ResolverService } from \"./resolver.service\";\n\n@Module({\n    imports: [HttpModule],\n    providers: [ResolverService],\n    exports: [ResolverService],\n})\nexport class ResolverModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResolverService.html":{"url":"injectables/ResolverService.html","title":"injectable - ResolverService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResolverService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/resolver.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for resolving public keys from JWT payloads and headers.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                resolvePublicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/resolver/resolver.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resolvePublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolvePublicKey(payload: JWTPayload, header: JWK)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/resolver/resolver.service.ts:21\n                        \n                    \n\n\n            \n                \n                        Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWK\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { X509Certificate } from \"node:crypto\";\nimport { HttpService } from \"@nestjs/axios\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { JWK, JWTPayload } from \"jose\";\nimport { firstValueFrom } from \"rxjs\";\nimport { IssuerMetadata } from \"./dto/issuer-metadata.dto\";\n\n/**\n * Service for resolving public keys from JWT payloads and headers.\n */\n@Injectable()\nexport class ResolverService {\n    constructor(private httpService: HttpService) {}\n\n    /**\n     * Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n     * @param payload\n     * @param header\n     * @returns\n     */\n    async resolvePublicKey(payload: JWTPayload, header: JWK): Promise {\n        if (!payload.iss) {\n            throw new Error(\"Issuer not found\");\n        }\n\n        if (header.x5c) {\n            //TODO: validate the certificate and the chain of trust!\n            const certs = header.x5c.map(\n                (cert) => new X509Certificate(Buffer.from(cert, \"base64\")),\n            );\n            const cert = certs[0];\n            if (!cert.subjectAltName?.includes(new URL(payload.iss).hostname)) {\n                throw new Error(\"Subject and issuer do not match\");\n            }\n            return cert.publicKey.export({ format: \"jwk\" }) as JWK;\n        }\n        //checl if the key is in the header as jwk\n        if (header[\"jwk\"]) {\n            return header[\"jwk\"] as JWK;\n        }\n\n        const response = await firstValueFrom(\n            this.httpService.get(\n                `${payload.iss}/.well-known/jwt-vc-issuer`,\n            ),\n        ).then(\n            (r) => r.data,\n            () => {\n                throw new ConflictException(\"Issuer not reachable\");\n            },\n        );\n        const key = response.jwks.keys.find((key) => key.kid === header.kid);\n        if (!key) {\n            throw new Error(\"Key not found\");\n        }\n        return key;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoleDto.html":{"url":"classes/RoleDto.html","title":"class - RoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/role.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'OAuth2 roles', enum: Role, example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/role.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Role } from \"../roles/role.enum\";\n\nexport class RoleDto {\n    @ApiProperty({\n        description: \"OAuth2 roles\",\n        enum: Role,\n        example: Role.Issuances,\n    })\n    role: Role;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/roles/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/roles/roles.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/roles/roles.guard.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { Role } from \"./role.enum\";\nimport { ROLES_KEY } from \"./roles.decorator\";\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n    constructor(private reflector: Reflector) {}\n\n    canActivate(context: ExecutionContext): boolean {\n        const requiredRoles = this.reflector.getAllAndOverride(\n            ROLES_KEY,\n            [context.getHandler(), context.getClass()],\n        );\n        if (!requiredRoles) {\n            return true;\n        }\n        const { user } = context.switchToHttp().getRequest();\n        return requiredRoles.some((role) => user.roles?.includes(role));\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RootOfTrustPolicy.html":{"url":"classes/RootOfTrustPolicy.html","title":"class - RootOfTrustPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RootOfTrustPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                rootOfTrust\n\n            \n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                policy\n                            \n                            \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['rootOfTrust'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:42\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/S3FileStorage.html":{"url":"classes/S3FileStorage.html","title":"class - S3FileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  S3FileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/adapters/s3.storage.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            FileStorage\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                exists\n                            \n                            \n                                getSignedUrl\n                            \n                            \n                                    Async\n                                getStream\n                            \n                            \n                                    Async\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(s3: S3Client, bucket: string, publicBaseUrl?: string)\n                    \n                \n                        \n                            \n                                Defined in src/storage/adapters/s3.storage.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        s3\n                                                  \n                                                        \n                                                                    S3Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        bucket\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        publicBaseUrl\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        exists\n                        \n                    \n                \n            \n            \n                \n                        \n                    exists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSignedUrl\n                        \n                    \n                \n            \n            \n                \ngetSignedUrl(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStream\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        put\n                        \n                    \n                \n            \n            \n                \n                        \n                    put(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    DeleteObjectCommand,\n    GetObjectCommand,\n    HeadObjectCommand,\n    PutObjectCommand,\n    S3Client,\n} from \"@aws-sdk/client-s3\";\nimport { getSignedUrl as sign } from \"@aws-sdk/s3-request-presigner\";\nimport { Readable } from \"stream\";\nimport { FileStorage, PutOptions, StoredObject } from \"../storage.types\";\n\nexport class S3FileStorage implements FileStorage {\n    constructor(\n        private s3: S3Client,\n        private bucket: string,\n        private publicBaseUrl?: string, // e.g. CloudFront URL (optional)\n    ) {}\n\n    async put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise {\n        await this.s3.send(\n            new PutObjectCommand({\n                Bucket: this.bucket,\n                Key: key,\n                Body: body,\n                ContentType: opts?.contentType,\n                Metadata: opts?.metadata,\n                ACL: opts?.acl === \"public\" ? \"public-read\" : undefined,\n                ChecksumSHA256: opts?.checksum, // optional if you computed it\n            }),\n        );\n\n        const head = await this.s3.send(\n            new HeadObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n        const url =\n            opts?.acl === \"public\"\n                ? this.publicBaseUrl\n                    ? `${this.publicBaseUrl.replace(/\\/+$/, \"\")}/${encodeURI(key)}`\n                    : `https://${this.bucket}.s3.amazonaws.com/${encodeURI(key)}`\n                : undefined;\n\n        return {\n            key,\n            etag: head.ETag,\n            size: head.ContentLength,\n            url,\n            contentType: head.ContentType || opts?.contentType,\n        };\n    }\n\n    async getStream(key: string) {\n        const obj = await this.s3.send(\n            new GetObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n        const stream = obj.Body as Readable;\n        return {\n            stream,\n            contentType: obj.ContentType,\n            size: obj.ContentLength,\n        };\n    }\n\n    async delete(key: string) {\n        await this.s3.send(\n            new DeleteObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n    }\n\n    async exists(key: string) {\n        try {\n            await this.s3.send(\n                new HeadObjectCommand({ Bucket: this.bucket, Key: key }),\n            );\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    getSignedUrl(key: string) {\n        return Promise.resolve(\n            sign(\n                this.s3,\n                new GetObjectCommand({ Bucket: this.bucket, Key: key }),\n            ),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SchemaResponse.html":{"url":"classes/SchemaResponse.html","title":"class - SchemaResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SchemaResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/schema-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Schema to validate other json objects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                $schema\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                properties\n                            \n                            \n                                    \n                                    Optional\n                                required\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                title\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        $schema\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Equals('https://json-schema.org/draft/2020-12/schema')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Equals('object')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    Equals,\n    IsArray,\n    IsObject,\n    IsOptional,\n    IsString,\n} from \"class-validator\";\n\n/**\n * Schema to validate other json objects.\n */\nexport class SchemaResponse {\n    @Equals(\"https://json-schema.org/draft/2020-12/schema\")\n    $schema: \"https://json-schema.org/draft/2020-12/schema\";\n    @Equals(\"object\")\n    type: \"object\";\n    @IsObject()\n    properties: Record;\n    @IsArray()\n    required?: string[];\n    @IsOptional()\n    @IsString()\n    title?: string;\n    @IsOptional()\n    @IsString()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Session.html":{"url":"entities/Session.html","title":"entity - Session","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/entities/session.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a user session in the application.\nIt includes various properties such as credentials, authorization code,\nrequest URI, authorization queries, and more.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                auth_queries\n                            \n                            \n                                    \n                                    Optional\n                                authorization_code\n                            \n                            \n                                    \n                                    Optional\n                                claimsWebhook\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                credentialPayload\n                            \n                            \n                                    \n                                    Optional\n                                credentials\n                            \n                            \n                                    \n                                    Optional\n                                expiresAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                issuanceId\n                            \n                            \n                                    \n                                    Optional\n                                nonce\n                            \n                            \n                                    \n                                notifications\n                            \n                            \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                            \n                                    \n                                    Optional\n                                offer\n                            \n                            \n                                    \n                                    Optional\n                                offerUrl\n                            \n                            \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    Optional\n                                requestId\n                            \n                            \n                                    \n                                    Optional\n                                requestUrl\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    Optional\n                                vp_nonce\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        auth_queries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthorizeQueries\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:94\n                        \n                    \n\n            \n                \n                    Authorization queries associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        authorization_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:84\n                        \n                    \n\n            \n                \n                    Authorization code for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        claimsWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:143\n                        \n                    \n\n            \n                \n                    Webhook configuration to send result and may receive further information.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:111\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentialPayload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OfferRequestDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:138\n                        \n                    \n\n            \n                \n                    Credential payload containing the offer request details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :     VerificationResult[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:79\n                        \n                    \n\n            \n                \n                    Verified credentials from the verification process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        expiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('date', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:120\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:58\n                        \n                    \n\n            \n                \n                    Unique identifier for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:105\n                        \n                    \n\n            \n                \n                    Nonce used for the OID4VCI flow.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Notification[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:153\n                        \n                    \n\n            \n                \n                    Notifications associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:148\n                        \n                    \n\n            \n                \n                    Webhook configuration to send the result of the notification response.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CredentialOfferObject\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:126\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offerUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:132\n                        \n                    \n\n            \n                \n                    Offer URL for the credential offer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:89\n                        \n                    \n\n            \n                \n                    Request URI from the authorization request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:67\n                        \n                    \n\n            \n                \n                    The ID of the presentation configuration associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        requestUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:73\n                        \n                    \n\n            \n                \n                    The URL of the presentation auth request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SessionStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: SessionStatus})@Column('varchar', {nullable: true, default: 'active'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:175\n                        \n                    \n\n            \n                \n                    Status of the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE', eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:168\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:158\n                        \n                    \n\n            \n                \n                    Tenant ID for multi-tenancy support.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:117\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        vp_nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:99\n                        \n                    \n\n            \n                \n                    Noncce from the Verifiable Presentation request.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n    CredentialOfferObject,\n    NotificationEvent,\n} from \"@openid4vc/openid4vci\";\nimport { VerificationResult } from \"@sd-jwt/sd-jwt-vc\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    PrimaryColumn,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../auth/tenant/entitites/tenant.entity\";\nimport { AuthorizeQueries } from \"../../issuer/authorize/dto/authorize-request.dto\";\nimport { OfferRequestDto } from \"../../issuer/oid4vci/dto/offer-request.dto\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\n\nexport enum SessionStatus {\n    Active = \"active\",\n    Fetched = \"fetched\",\n    Completed = \"completed\",\n    Expired = \"expired\",\n    Failed = \"failed\",\n}\n\n/**\n * Represents a session entity for managing user sessions in the application.\n */\nexport type Notification = {\n    /**\n     * Unique identifier for the notification.\n     */\n    id: string;\n    /**\n     * The type of notification.\n     */\n    event?: NotificationEvent;\n\n    /**\n     * The credential ID associated with the notification.\n     */\n    credentialConfigurationId: string;\n};\n\n/**\n * Entity representing a user session in the application.\n * It includes various properties such as credentials, authorization code,\n * request URI, authorization queries, and more.\n */\n@Entity()\nexport class Session {\n    /**\n     * Unique identifier for the session.\n     */\n    @PrimaryColumn(\"uuid\")\n    id: string;\n\n    @Column(\"varchar\", { nullable: true })\n    issuanceId?: string;\n\n    /**\n     * The ID of the presentation configuration associated with the session.\n     */\n    @Column(\"varchar\", { nullable: true })\n    requestId?: string;\n\n    /**\n     * The URL of the presentation auth request.\n     */\n    @Column(\"varchar\", { nullable: true })\n    requestUrl?: string;\n\n    /**\n     * Verified credentials from the verification process.\n     */\n    @Column(\"json\", { nullable: true })\n    credentials?: VerificationResult[];\n    /**\n     * Authorization code for the session.\n     */\n    @Column(\"varchar\", { nullable: true })\n    authorization_code?: string;\n    /**\n     * Request URI from the authorization request.\n     */\n    @Column(\"varchar\", { nullable: true })\n    request_uri?: string;\n    /**\n     * Authorization queries associated with the session.\n     */\n    @Column(\"json\", { nullable: true })\n    auth_queries?: AuthorizeQueries;\n    /**\n     * Noncce from the Verifiable Presentation request.\n     */\n    @Column(\"varchar\", { nullable: true })\n    vp_nonce?: string;\n\n    /**\n     * Nonce used for the OID4VCI flow.\n     */\n    @Column(\"varchar\", { nullable: true })\n    nonce?: string;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    @Column(\"date\", { nullable: true })\n    expiresAt?: Date;\n\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column(\"json\", { nullable: true })\n    offer?: CredentialOfferObject;\n\n    /**\n     * Offer URL for the credential offer.\n     */\n    @Column(\"varchar\", { nullable: true })\n    offerUrl?: string;\n\n    /**\n     * Credential payload containing the offer request details.\n     */\n    @Column(\"json\", { nullable: true })\n    credentialPayload?: OfferRequestDto;\n    /**\n     * Webhook configuration to send result and may receive further information.\n     */\n    @Column(\"json\", { nullable: true })\n    claimsWebhook?: WebhookConfig;\n    /**\n     * Webhook configuration to send the result of the notification response.\n     */\n    @Column(\"json\", { nullable: true })\n    notifyWebhook?: WebhookConfig;\n    /**\n     * Notifications associated with the session.\n     */\n    @Column(\"json\", { default: JSON.stringify([]) })\n    notifications: Notification[];\n    /**\n     * Tenant ID for multi-tenancy support.\n     */\n    @Column(\"varchar\")\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, {\n        cascade: true,\n        onDelete: \"CASCADE\",\n        eager: true,\n    })\n    tenant: TenantEntity;\n\n    /**\n     * Status of the session.\n     */\n    @ApiProperty({ enum: SessionStatus })\n    @Column(\"varchar\", { nullable: true, default: \"active\" })\n    status: SessionStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionController.html":{"url":"controllers/SessionController.html","title":"controller - SessionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                session\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteSession\n                            \n                            \n                                    \n                                getAllSessions\n                            \n                            \n                                    \n                                    \n                                getSession\n                            \n                            \n                                    \n                                revokeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteSession(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:46\n                        \n                    \n\n\n            \n                \n                        Deletes a session by its ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getAllSessions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllSessions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Retrieves all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiParam({name: 'id', description: 'The session ID', type: String})@Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:35\n                        \n                    \n\n\n            \n                \n                        Retrieves the session information for a given session ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Session\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        revokeAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    revokeAll(value: StatusUpdateDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('revoke')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:59\n                        \n                    \n\n\n            \n                \n                        Update the status of the credentials of a specific session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post } from \"@nestjs/common\";\nimport { ApiParam, ApiTags } from \"@nestjs/swagger\";\nimport { Role } from \"../auth/roles/role.enum\";\nimport { Secured } from \"../auth/secure.decorator\";\nimport { Token, TokenPayload } from \"../auth/token.decorator\";\nimport { StatusUpdateDto } from \"../issuer/status-list/dto/status-update.dto\";\nimport { StatusListService } from \"../issuer/status-list/status-list.service\";\nimport { Session } from \"./entities/session.entity\";\nimport { SessionPipe } from \"./session.pipe\";\nimport { SessionService } from \"./session.service\";\n\n@ApiTags(\"Session management\")\n@Secured([Role.IssuanceOffer, Role.PresentationOffer])\n@Controller(\"session\")\nexport class SessionController {\n    constructor(\n        private readonly sessionService: SessionService,\n        private readonly statusListService: StatusListService,\n    ) {}\n\n    /**\n     * Retrieves all sessions.\n     */\n    @Get()\n    getAllSessions(): Promise {\n        return this.sessionService.getAll();\n    }\n\n    /**\n     * Retrieves the session information for a given session ID.\n     * @param id - The identifier of the session.\n     */\n    @ApiParam({ name: \"id\", description: \"The session ID\", type: String })\n    @Get(\":id\")\n    getSession(@Param(\"id\", SessionPipe) session: Session): Session {\n        return session;\n    }\n\n    /**\n     * Deletes a session by its ID\n     * @param id\n     * @param user\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteSession(\n        @Param(\"id\") id: string,\n        @Token() user: TokenPayload,\n    ): Promise {\n        return this.sessionService.delete(id, user.entity!.id);\n    }\n\n    /**\n     * Update the status of the credentials of a specific session.\n     * @param value\n     * @returns\n     */\n    @Post(\"revoke\")\n    revokeAll(@Body() value: StatusUpdateDto, @Token() user: TokenPayload) {\n        return this.statusListService.updateStatus(value, user.entity!.id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SessionLogContext.html":{"url":"interfaces/SessionLogContext.html","title":"interface - SessionLogContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SessionLogContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger-context.ts\n        \n\n\n            \n                Description\n            \n            \n                Context for session logging, including session ID, tenant ID, flow type, and optional stage.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            flowType\n                                        \n                                \n                                \n                                        \n                                            sessionId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stage\n                                        \n                                \n                                \n                                        \n                                            tenantId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger-context.ts:21\n                            \n                        \n                \n                    \n                        Additional context information for the session.\n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        flowType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flowType:     \"OID4VCI\" | \"OID4VP\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"OID4VCI\" | \"OID4VP\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of flow being logged (e.g., OID4VCI, OID4VP).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sessionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier for the session.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional stage of the flow, useful for tracking progress.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenantId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tenantId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier for the tenant associated with the session.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SessionLogContext {\n    /**\n     * Unique identifier for the session.\n     */\n    sessionId: string;\n    /**\n     * Identifier for the tenant associated with the session.\n     */\n    tenantId: string;\n    /**\n     * Type of flow being logged (e.g., OID4VCI, OID4VP).\n     */\n    flowType: \"OID4VCI\" | \"OID4VP\";\n    /**\n     * Optional stage of the flow, useful for tracking progress.\n     */\n    stage?: string;\n    /**\n     * Additional context information for the session.\n     */\n    [key: string]: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerInterceptor.html":{"url":"injectables/SessionLoggerInterceptor.html","title":"injectable - SessionLoggerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for logging session-related requests and responses.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                sanitizeBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger.interceptor.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerInterceptor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nReflector instance for accessing metadata.\n\n\n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.interceptor.ts:44\n                        \n                    \n\n\n            \n                \n                        Intercepts the request and logs session-related information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExecution context of the request.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCall handler to proceed with the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits the response data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.interceptor.ts:136\n                        \n                    \n\n\n            \n                \n                        Sanitizes the request body to remove sensitive information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request body to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Sanitized body.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/session-logger.interceptor.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Reflector } from \"@nestjs/core\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { Observable } from \"rxjs\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport { SESSION_LOGGER_KEY } from \"./session-logger.decorator\";\n\n/**\n * Interceptor for logging session-related requests and responses.\n */\n@Injectable()\nexport class SessionLoggerInterceptor implements NestInterceptor {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerInterceptor.\n     * @param reflector - Reflector instance for accessing metadata.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing configuration.\n     */\n    constructor(\n        private readonly reflector: Reflector,\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.isEnabled = this.configService.get(\n            \"LOG_ENABLE_SESSION_LOGGER\",\n            false,\n        );\n    }\n\n    /**\n     * Intercepts the request and logs session-related information.\n     * @param context - Execution context of the request.\n     * @param next - Call handler to proceed with the request.\n     * @returns An observable that emits the response data.\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        const metadata = this.reflector.get(\n            SESSION_LOGGER_KEY,\n            context.getHandler(),\n        );\n\n        if (!metadata || !this.isEnabled) {\n            return next.handle();\n        }\n\n        const { sessionIdParam, flowType } = metadata;\n        const request = context.switchToHttp().getRequest();\n        const response = context.switchToHttp().getResponse();\n\n        const sessionId = request.params[sessionIdParam];\n\n        const tenantId = request.params?.tenantId;\n        const method = request.method;\n        const url = request.url;\n\n        // Set context for this logger instance\n        this.logger.setContext(\"SessionLogger\");\n\n        // Create log context\n        const logContext = {\n            sessionId,\n            tenantId,\n            flowType,\n            endpoint: `${method} ${url}`,\n        };\n\n        // Log the start of the request\n        this.logger.info(\n            {\n                ...logContext,\n                event: \"request_start\",\n                method,\n                url,\n                headers: {\n                    \"user-agent\": request.headers[\"user-agent\"],\n                    \"content-type\": request.headers[\"content-type\"],\n                },\n                body: this.sanitizeBody(request.body),\n            },\n            `[${flowType}] Starting ${method} ${url} for session ${sessionId}`,\n        );\n\n        const startTime = Date.now();\n\n        return next.handle().pipe(\n            tap((data) => {\n                const duration = Date.now() - startTime;\n                this.logger.info(\n                    {\n                        ...logContext,\n                        event: \"request_success\",\n                        method,\n                        url,\n                        statusCode: response.statusCode,\n                        duration,\n                        responseSize: JSON.stringify(data || {}).length,\n                    },\n                    `[${flowType}] Completed ${method} ${url} for session ${sessionId} in ${duration}ms`,\n                );\n            }),\n            catchError((error) => {\n                const duration = Date.now() - startTime;\n                this.logger.error(\n                    {\n                        ...logContext,\n                        event: \"request_error\",\n                        method,\n                        url,\n                        error: {\n                            name: error.name,\n                            message: error.message,\n                            stack: error.stack,\n                        },\n                        duration,\n                    },\n                    `[${flowType}] Error in ${method} ${url} for session ${sessionId}: ${error.message}`,\n                );\n                throw error;\n            }),\n        );\n    }\n\n    /**\n     * Sanitizes the request body to remove sensitive information.\n     * @param body - The request body to sanitize.\n     * @returns Sanitized body.\n     */\n    private sanitizeBody(body: any): any {\n        if (!body) return body;\n\n        // Create a copy to avoid modifying the original\n        const sanitized = { ...body };\n\n        // Remove sensitive fields\n        const sensitiveFields = [\n            \"password\",\n            \"token\",\n            \"secret\",\n            \"key\",\n            \"private_key\",\n            \"access_token\",\n            \"refresh_token\",\n        ];\n\n        sensitiveFields.forEach((field) => {\n            if (sanitized[field]) {\n                sanitized[field] = \"[REDACTED]\";\n            }\n        });\n\n        return sanitized;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerService.html":{"url":"injectables/SessionLoggerService.html","title":"injectable - SessionLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for logging session-related events and errors.\nUses PinoLogger for structured logging.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logAuthorizationRequest\n                            \n                            \n                                logCredentialIssuance\n                            \n                            \n                                logCredentialVerification\n                            \n                            \n                                logFlowComplete\n                            \n                            \n                                logFlowError\n                            \n                            \n                                logFlowStart\n                            \n                            \n                                logNotification\n                            \n                            \n                                logSession\n                            \n                            \n                                logSessionError\n                            \n                            \n                                logTokenExchange\n                            \n                            \n                                    Private\n                                shouldLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing environment configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \nlogAuthorizationRequest(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:146\n                        \n                    \n\n\n            \n                \n                        Log authorization request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialIssuance\n                        \n                    \n                \n            \n            \n                \nlogCredentialIssuance(context: SessionLogContext, credentialType: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Log credential issuance step\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialVerification\n                        \n                    \n                \n            \n            \n                \nlogCredentialVerification(context: SessionLogContext, verificationResult: boolean, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Log credential presentation verification\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                verificationResult\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowComplete\n                        \n                    \n                \n            \n            \n                \nlogFlowComplete(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Log session flow completion\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowError\n                        \n                    \n                \n            \n            \n                \nlogFlowError(context: SessionLogContext, error: Error, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Log session flow error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowStart\n                        \n                    \n                \n            \n            \n                \nlogFlowStart(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Log session flow start\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logNotification\n                        \n                    \n                \n            \n            \n                \nlogNotification(context: SessionLogContext, notificationEvent: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Log notification events\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notificationEvent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSession\n                        \n                    \n                \n            \n            \n                \nlogSession(context: SessionLogContext, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:202\n                        \n                    \n\n\n            \n                \n                        Generic session log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSessionError\n                        \n                    \n                \n            \n            \n                \nlogSessionError(context: SessionLogContext, error: Error, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:221\n                        \n                    \n\n\n            \n                \n                        Generic session error log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logTokenExchange\n                        \n                    \n                \n            \n            \n                \nlogTokenExchange(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Log token exchange\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldLog\n                        \n                    \n                \n            \n            \n                \n                        \n                    shouldLog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/session-logger.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { SessionLogContext } from \"./session-logger-context\";\n\n/**\n * Service for logging session-related events and errors.\n * Uses PinoLogger for structured logging.\n */\n@Injectable()\nexport class SessionLoggerService {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerService.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing environment configuration.\n     */\n    constructor(\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.logger.setContext(\"SessionLoggerService\");\n        this.isEnabled = this.configService.get(\n            \"LOG_ENABLE_SESSION_LOGGER\",\n            false,\n        );\n    }\n\n    private shouldLog(): boolean {\n        return this.isEnabled;\n    }\n\n    /**\n     * Log session flow start\n     */\n    logFlowStart(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow started for session ${context.sessionId} in tenant ${context.tenantId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"flow_start\",\n                stage: \"initialization\",\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow completion\n     */\n    logFlowComplete(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow completed for session ${context.sessionId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"flow_complete\",\n                stage: \"completion\",\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow error\n     */\n    logFlowError(\n        context: SessionLogContext,\n        error: Error,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow error for session ${context.sessionId}: ${error.message}`;\n\n        this.logger.error(\n            {\n                ...context,\n                event: \"flow_error\",\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log credential issuance step\n     */\n    logCredentialIssuance(\n        context: SessionLogContext,\n        credentialType: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"credential_issuance\",\n                stage: \"credential_creation\",\n                credentialType,\n                ...additionalData,\n            },\n            `[${context.flowType}] Issuing credential of type ${credentialType} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log credential presentation verification\n     */\n    logCredentialVerification(\n        context: SessionLogContext,\n        verificationResult: boolean,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"credential_verification\",\n                stage: \"verification\",\n                verificationResult,\n                ...additionalData,\n            },\n            `[${context.flowType}] Credential verification ${verificationResult ? \"succeeded\" : \"failed\"} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log authorization request\n     */\n    logAuthorizationRequest(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"authorization_request\",\n                stage: \"authorization\",\n                ...additionalData,\n            },\n            `[${context.flowType}] Authorization request created for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log token exchange\n     */\n    logTokenExchange(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"token_exchange\",\n                stage: \"token_exchange\",\n                ...additionalData,\n            },\n            `[${context.flowType}] Token exchange for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log notification events\n     */\n    logNotification(\n        context: SessionLogContext,\n        notificationEvent: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"notification\",\n                stage: \"notification\",\n                notificationEvent,\n                ...additionalData,\n            },\n            `[${context.flowType}] Notification ${notificationEvent} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Generic session log method\n     */\n    logSession(\n        context: SessionLogContext,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}`,\n        );\n    }\n\n    /**\n     * Generic session error log method\n     */\n    logSessionError(\n        context: SessionLogContext,\n        error: Error,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.error(\n            {\n                ...context,\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}: ${error.message}`,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_imports\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_providers\n\n\n\n\nStatusListModule\n\nStatusListModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/session/session.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            SessionModule is responsible for managing user sessions.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SessionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { makeGaugeProvider } from \"@willsoto/nestjs-prometheus\";\nimport { StatusListModule } from \"../issuer/status-list/status-list.module\";\nimport { Session } from \"./entities/session.entity\";\nimport { SessionController } from \"./session.controller\";\nimport { SessionService } from \"./session.service\";\n\n/**\n * SessionModule is responsible for managing user sessions.\n */\n@Module({\n    imports: [TypeOrmModule.forFeature([Session]), StatusListModule],\n    providers: [\n        SessionService,\n        makeGaugeProvider({\n            name: \"sessions\",\n            help: \"Total number of sessions by status\",\n            labelNames: [\"tenant_id\", \"session_type\", \"status\"],\n        }),\n    ],\n    exports: [SessionService],\n    controllers: [SessionController],\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionPipe.html":{"url":"injectables/SessionPipe.html","title":"injectable - SessionPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.pipe.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(sessionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.pipe.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, PipeTransform } from \"@nestjs/common\";\nimport { Session } from \"./entities/session.entity\";\nimport { SessionService } from \"./session.service\";\n\n@Injectable()\nexport class SessionPipe implements PipeTransform> {\n    constructor(private readonly sessionService: SessionService) {}\n\n    async transform(sessionId: string): Promise {\n        if (!sessionId) {\n            throw new NotFoundException(\n                \"Session ID not found in request parameters\",\n            );\n        }\n\n        const session = await this.sessionService.get(sessionId);\n        if (!session) {\n            throw new NotFoundException(\n                `Session with ID ${sessionId} not found`,\n            );\n        }\n\n        // Return the entity so the controller parameter receives it\n        return session;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getAll\n                            \n                            \n                                getBy\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                    Async\n                                setState\n                            \n                            \n                                tidyUpSessions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionRepository: Repository, configService: ConfigService, schedulerRegistry: SchedulerRegistry, sessionsCounter: Gauge)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionsCounter\n                                                  \n                                                        \n                                                                    Gauge\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(issuer_state: string, values: QueryDeepPartialEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:144\n                        \n                    \n\n\n            \n                \n                        Update an existing session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            QueryDeepPartialEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(session: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:98\n                        \n                    \n\n\n            \n                \n                        Create a new session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, sub: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:192\n                        \n                    \n\n\n            \n                \n                        Deletes a session by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                sub\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Get a session by its state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:152\n                        \n                    \n\n\n            \n                \n                        Get all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBy\n                        \n                    \n                \n            \n            \n                \ngetBy(where: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:172\n                        \n                    \n\n\n            \n                \n                        Get a session by a specific condition.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                            FindOptionsWhere\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Register the tidy up cron job on application bootstrap.\nThis will run every hour by default, but can be configured via the SESSION_TIDY_UP_INTERVAL config variable.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Deletes all sessions for a specific tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setState\n                        \n                    \n                \n            \n            \n                \n                        \n                    setState(session: Session, status: SessionStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Marks the session as successful or failed.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            SessionStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tidyUpSessions\n                        \n                    \n                \n            \n            \n                \ntidyUpSessions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:179\n                        \n                    \n\n\n            \n                \n                        Tidy up sessions that are older than 1 day.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { SchedulerRegistry } from \"@nestjs/schedule\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus/dist/injector\";\nimport { Gauge } from \"prom-client\";\nimport {\n    DeepPartial,\n    FindOptionsWhere,\n    IsNull,\n    LessThan,\n    Not,\n    Repository,\n} from \"typeorm\";\nimport { QueryDeepPartialEntity } from \"typeorm/query-builder/QueryPartialEntity\";\nimport { Session, SessionStatus } from \"./entities/session.entity\";\n\n@Injectable()\nexport class SessionService implements OnApplicationBootstrap {\n    constructor(\n        @InjectRepository(Session)\n        private sessionRepository: Repository,\n        private readonly configService: ConfigService,\n        private readonly schedulerRegistry: SchedulerRegistry,\n        @InjectMetric(\"sessions\")\n        private sessionsCounter: Gauge,\n    ) {}\n\n    /**\n     * Register the tidy up cron job on application bootstrap.\n     * This will run every hour by default, but can be configured via the `SESSION_TIDY_UP_INTERVAL` config variable.\n     * @returns\n     */\n    async onApplicationBootstrap() {\n        const callback = () => {\n            void this.tidyUpSessions();\n        };\n        const intervalTime =\n            this.configService.getOrThrow(\"SESSION_TIDY_UP_INTERVAL\") *\n            1000;\n        const interval = setInterval(callback, intervalTime);\n        this.schedulerRegistry.addInterval(\"tidyUpSessions\", interval);\n\n        //set default values for session metrics\n        const tenantId = \"root\";\n        const states: SessionStatus[] = [\n            SessionStatus.Active,\n            SessionStatus.Fetched,\n            SessionStatus.Completed,\n            SessionStatus.Expired,\n            SessionStatus.Failed,\n        ];\n        for (const state of states) {\n            const issuanceCounter = await this.sessionRepository.countBy({\n                tenantId,\n                issuanceId: Not(IsNull()),\n                status: state,\n            });\n            this.sessionsCounter.set(\n                {\n                    tenant_id: tenantId,\n                    session_type: \"issuance\",\n                    status: state,\n                },\n                issuanceCounter,\n            );\n            const verificationCounter = await this.sessionRepository.countBy({\n                tenantId,\n                issuanceId: IsNull(),\n                status: state,\n            });\n            this.sessionsCounter.set(\n                {\n                    tenant_id: tenantId,\n                    session_type: \"verification\",\n                    status: state,\n                },\n                verificationCounter,\n            );\n        }\n\n        return this.tidyUpSessions();\n    }\n\n    /**\n     * Deletes all sessions for a specific tenant.\n     * @param tenantId\n     */\n    async onTenantDelete(tenantId: string) {\n        await this.sessionRepository.delete({ tenantId });\n    }\n\n    /**\n     * Create a new session.\n     * @param session\n     * @returns\n     */\n    async create(session: DeepPartial) {\n        const createdSession = await this.sessionRepository.save(session);\n\n        // Count total sessions created\n        this.sessionsCounter.inc({\n            tenant_id: createdSession.tenantId,\n            session_type: createdSession.issuanceId\n                ? \"issuance\"\n                : \"verification\",\n            status: \"active\",\n        });\n\n        return createdSession;\n    }\n\n    /**\n     * Marks the session as successful or failed.\n     * @param session\n     * @param status\n     */\n    async setState(session: Session, status: SessionStatus) {\n        const sessionType = session.issuanceId ? \"issuance\" : \"verification\";\n\n        await this.sessionRepository.update({ id: session.id }, { status });\n\n        // Count completed sessions (success or failure)\n        this.sessionsCounter.inc({\n            tenant_id: session.tenantId,\n            session_type: sessionType,\n            status,\n        });\n\n        // Decrease active sessions count\n        this.sessionsCounter.dec({\n            tenant_id: session.tenantId,\n            session_type: sessionType,\n            status: \"active\",\n        });\n    }\n\n    /**\n     * Update an existing session.\n     * @param issuer_state\n     * @param values\n     * @returns\n     */\n    add(issuer_state: string, values: QueryDeepPartialEntity) {\n        return this.sessionRepository.update({ id: issuer_state }, values);\n    }\n\n    /**\n     * Get all sessions.\n     * @returns\n     */\n    getAll(): Promise {\n        return this.sessionRepository.find({\n            order: { updatedAt: \"DESC\" },\n        });\n    }\n\n    /**\n     * Get a session by its state.\n     * @param state\n     * @returns\n     */\n    get(state: string) {\n        return this.sessionRepository.findOneByOrFail({ id: state });\n    }\n\n    /**\n     * Get a session by a specific condition.\n     * @param where\n     * @returns\n     */\n    getBy(where: FindOptionsWhere) {\n        return this.sessionRepository.findOneByOrFail(where);\n    }\n\n    /**\n     * Tidy up sessions that are older than 1 day.\n     */\n    tidyUpSessions() {\n        const ttl = this.configService.getOrThrow(\"SESSION_TTL\") * 1000;\n        return this.sessionRepository.delete({\n            createdAt: LessThan(new Date(Date.now() - ttl)),\n        });\n    }\n\n    /**\n     * Deletes a session by its ID and tenant ID.\n     * @param id\n     * @param sub\n     * @returns\n     */\n    delete(id: string, sub: string): Promise {\n        return this.sessionRepository.delete({ id, tenantId: sub });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatusListController.html":{"url":"controllers/StatusListController.html","title":"controller - StatusListController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StatusListController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/status-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getList(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status-list')@Header('Content-Type', 'application/statuslist+jwt')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.controller.ts:17\n                        \n                    \n\n\n            \n                \n                        Get the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from \"@nestjs/common\";\nimport { ApiExcludeController, ApiTags } from \"@nestjs/swagger\";\nimport { StatusListService } from \"./status-list.service\";\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@ApiTags(\"Status management\")\n@Controller(\":tenantId/status-management\")\nexport class StatusListController {\n    constructor(private statusListService: StatusListService) {}\n\n    /**\n     * Get the status list\n     * @returns\n     */\n    @Get(\"status-list\")\n    @Header(\"Content-Type\", \"application/statuslist+jwt\")\n    getList(@Param(\"tenantId\") tenantId: string) {\n        return this.statusListService.getList(tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusListEntity.html":{"url":"entities/StatusListEntity.html","title":"entity - StatusListEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StatusListEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-list.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing the status list for a tenant.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                bits\n                            \n                            \n                                    \n                                elements\n                            \n                            \n                                    \n                                    Optional\n                                jwt\n                            \n                            \n                                    \n                                stack\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bits\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BitsPerStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:38\n                        \n                    \n\n            \n                \n                    The number of bits used for each status in the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        elements\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:26\n                        \n                    \n\n            \n                \n                    The elements of the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        jwt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:44\n                        \n                    \n\n            \n                \n                    The JSON Web Token (JWT) for the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        stack\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:32\n                        \n                    \n\n            \n                \n                    The stack of available indexes for the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:20\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:14\n                        \n                    \n\n            \n                \n                    The ID of the tenant to which the status list belongs.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { BitsPerStatus } from \"@sd-jwt/jwt-status-list\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\n\n/**\n * Entity representing the status list for a tenant.\n */\n@Entity()\nexport class StatusListEntity {\n    /**\n     * The ID of the tenant to which the status list belongs.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The elements of the status list.\n     */\n    @Column(\"json\")\n    elements: number[];\n\n    /**\n     * The stack of available indexes for the status list.\n     */\n    @Column(\"json\")\n    stack: number[];\n\n    /**\n     * The number of bits used for each status in the status list.\n     */\n    @Column(\"int\")\n    bits: BitsPerStatus;\n\n    /**\n     * The JSON Web Token (JWT) for the status list.\n     */\n    @Column(\"varchar\", { nullable: true })\n    jwt?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatusListModule.html":{"url":"modules/StatusListModule.html","title":"module - StatusListModule","body":"\n                   \n\n\n\n\n    Modules\n    StatusListModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_providers\n\n\n\ncluster_StatusListModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/status-list/status-list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatusListController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { CryptoModule } from \"../../crypto/crypto.module\";\nimport { StatusListEntity } from \"./entities/status-list.entity\";\nimport { StatusMapping } from \"./entities/status-mapping.entity\";\nimport { StatusListController } from \"./status-list.controller\";\nimport { StatusListService } from \"./status-list.service\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        TypeOrmModule.forFeature([StatusMapping, StatusListEntity]),\n    ],\n    controllers: [StatusListController],\n    providers: [StatusListService],\n    exports: [StatusListService],\n})\nexport class StatusListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatusListService.html":{"url":"injectables/StatusListService.html","title":"injectable - StatusListService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StatusListService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEntry\n                            \n                            \n                                    Async\n                                createList\n                            \n                            \n                                getList\n                            \n                            \n                                onTenantDelete\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Private\n                                    Async\n                                setEntry\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, statusMappingRepository: Repository, statusListRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/status-list/status-list.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusMappingRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEntry(session: Session, credentialConfigurationId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Get the next free entry in the status list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createList\n                        \n                    \n                \n            \n            \n                \n                        \n                    createList(entry: StatusListEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Create a new status list and stored it in the file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            StatusListEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getList\n                        \n                    \n                \n            \n            \n                \ngetList(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:114\n                        \n                    \n\n\n            \n                \n                        Get the JWT for the status list of a tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The JWT for the status list.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \nonTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Delete the status list for a specific tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:36\n                        \n                    \n\n\n            \n                \n                        Initialize the status list service by checking if the status list file exists.\nIf it does not exist, create a new status list with 10,000 entries and a stack\nof 10,000 indexes. The stack is shuffled to ensure randomness in the order of\nentries. The status list is stored in the file system as a JSON file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        setEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    setEntry(id: number, value: number, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:176\n                        \n                    \n\n\n            \n                \n                        Update the value of an entry in the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(value: StatusUpdateDto, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:192\n                        \n                    \n\n\n            \n                \n                        Update the status of a session and its credential configuration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport {\n    createHeaderAndPayload,\n    JWTwithStatusListPayload,\n    StatusList,\n    StatusListJWTHeaderParameters,\n} from \"@sd-jwt/jwt-status-list\";\nimport { JwtPayload } from \"@sd-jwt/types\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { StatusUpdateDto } from \"./dto/status-update.dto\";\nimport { StatusListEntity } from \"./entities/status-list.entity\";\nimport { StatusMapping } from \"./entities/status-mapping.entity\";\n\n@Injectable()\nexport class StatusListService {\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        @InjectRepository(StatusMapping)\n        private statusMappingRepository: Repository,\n        @InjectRepository(StatusListEntity)\n        private statusListRepository: Repository,\n    ) {}\n\n    /**\n     * Initialize the status list service by checking if the status list file exists.\n     * If it does not exist, create a new status list with 10,000 entries and a stack\n     * of 10,000 indexes. The stack is shuffled to ensure randomness in the order of\n     * entries. The status list is stored in the file system as a JSON file.\n     */\n    async onTenantInit(tenantId: string) {\n        const size = 10000;\n        // create an empty array with the size of 1000\n        const elements = new Array(size).fill(0).map(() => 0);\n        // create a list of 1000 indexes and shuffel them\n        const stack = new Array(size)\n            .fill(0)\n            .map((_, i) => i)\n            .sort(() => 0.5 - Math.random());\n\n        const entry = await this.statusListRepository.save({\n            tenantId,\n            elements,\n            stack,\n            bits: 1,\n        });\n\n        await this.createList(entry);\n    }\n\n    /**\n     * Delete the status list for a specific tenant.\n     * @param tenantId The ID of the tenant.\n     */\n    onTenantDelete(tenantId: string) {\n        this.statusListRepository.delete({ tenantId });\n        this.statusMappingRepository.delete({ tenantId });\n    }\n\n    /**\n     * Create a new status list and stored it in the file\n     */\n    async createList(entry: StatusListEntity) {\n        const list = new StatusList(entry.elements, entry.bits);\n        const iss = `${this.configService.getOrThrow(\"PUBLIC_URL\")}`;\n\n        const sub = join(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n            entry.tenantId,\n            \"status-management\",\n            \"status-list\",\n        );\n\n        const prePayload: JwtPayload = {\n            iss,\n            sub,\n            iat: Math.floor(Date.now() / 1000),\n        };\n        const preHeader: StatusListJWTHeaderParameters = {\n            alg: \"ES256\",\n            typ: \"statuslist+jwt\",\n            x5c: await this.cryptoService.getCertChain(\n                \"signing\",\n                entry.tenantId,\n            ),\n        };\n        const { header, payload } = createHeaderAndPayload(\n            list,\n            prePayload,\n            preHeader,\n        );\n\n        const jwt = await this.cryptoService.signJwt(\n            header,\n            payload,\n            entry.tenantId,\n        );\n        await this.statusListRepository.update(\n            { tenantId: entry.tenantId },\n            { jwt },\n        );\n    }\n\n    /**\n     * Get the JWT for the status list of a tenant.\n     * @param tenantId The ID of the tenant.\n     * @returns The JWT for the status list.\n     */\n    getList(tenantId: string) {\n        return this.statusListRepository\n            .findOneByOrFail({ tenantId })\n            .then((file) => file.jwt);\n    }\n\n    /**\n     * Get the next free entry in the status list.\n     * @returns\n     */\n    async createEntry(\n        session: Session,\n        credentialConfigurationId: string,\n    ): Promise {\n        const file = await this.statusListRepository\n            .findOneByOrFail({\n                tenantId: session.tenantId,\n            })\n            //if none if found, create one\n            .then(() =>\n                this.onTenantInit(session.tenantId).then(() =>\n                    this.statusListRepository.findOneByOrFail({\n                        tenantId: session.tenantId,\n                    }),\n                ),\n            );\n        // get the last element from the stack\n        const idx = file.stack.pop();\n        //TODO: what to do if the stack is empty\n        if (idx === undefined) {\n            throw new Error(\"Stack for status list is empty!!!\");\n        }\n        const sub = join(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n            session.tenantId,\n            \"status-management\",\n            \"status-list\",\n        );\n        // store the index in the status mapping\n        await this.statusMappingRepository.save({\n            tenantId: session.tenantId,\n            sessionId: session.id,\n            index: idx,\n            list: sub,\n            credentialConfigurationId,\n        });\n\n        return {\n            status: {\n                status_list: {\n                    idx: idx,\n                    uri: sub,\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the value of an entry in the status list\n     * @param id\n     * @param value\n     */\n    private async setEntry(id: number, value: number, tenantId: string) {\n        const entry = await this.statusListRepository.findOneByOrFail({\n            tenantId,\n        });\n        entry.elements[id] = value;\n        await this.statusListRepository.update(\n            { tenantId },\n            { elements: entry.elements },\n        );\n        return this.createList(entry);\n    }\n\n    /**\n     * Update the status of a session and its credential configuration\n     * @param value\n     */\n    async updateStatus(value: StatusUpdateDto, tenantId: string) {\n        const entries = await this.statusMappingRepository.findBy({\n            sessionId: value.sessionId,\n            credentialConfigurationId: value.credentialConfigurationId,\n        });\n        if (entries.length === 0) {\n            throw new ConflictException(\n                `No status mapping found for session ${value.sessionId} and credential configuration ${value.credentialConfigurationId}`,\n            );\n        }\n        for (const entry of entries) {\n            await this.setEntry(entry.index, value.status, tenantId);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusMapping.html":{"url":"entities/StatusMapping.html","title":"entity - StatusMapping","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StatusMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-mapping.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                credentialConfigurationId\n                            \n                            \n                                    \n                                index\n                            \n                            \n                                    \n                                list\n                            \n                            \n                                    \n                                sessionId\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:13\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\n\n@Entity()\nexport class StatusMapping {\n    @Column({ type: \"varchar\", primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column({ type: \"varchar\", primary: true })\n    sessionId: string;\n\n    @Column({ type: \"varchar\", primary: true })\n    list: string;\n\n    @Column({ type: \"int\", primary: true })\n    index: number;\n\n    @Column({ type: \"varchar\", primary: true })\n    credentialConfigurationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StatusUpdateDto.html":{"url":"classes/StatusUpdateDto.html","title":"class - StatusUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StatusUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/dto/status-update.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationId\n                            \n                            \n                                    \n                                sessionId\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:16\n                        \n                    \n\n            \n                \n                    The ID of the credential configuration\nThis is optional, if not provided, all credentials will be revoked of the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:8\n                        \n                    \n\n            \n                \n                    The session ID of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsIn(['0', '1'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:24\n                        \n                    \n\n            \n                \n                    The status of the credential\n0 = valid, 1 = revoked\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNumber, IsOptional, IsString } from \"class-validator\";\n\nexport class StatusUpdateDto {\n    /**\n     * The session ID of the user\n     */\n    @IsString()\n    sessionId: string;\n\n    /**\n     * The ID of the credential configuration\n     * This is optional, if not provided, all credentials will be revoked of the session.\n     */\n    @IsString()\n    @IsOptional()\n    credentialConfigurationId?: string;\n\n    /**\n     * The status of the credential\n     * 0 = valid, 1 = revoked\n     */\n    @IsNumber()\n    @IsIn([0, 1])\n    status: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StorageController.html":{"url":"controllers/StorageController.html","title":"controller - StorageController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StorageController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/storage.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                storage\n            \n\n\n            \n                Description\n            \n            \n                Storage Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                download\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        download\n                        \n                    \n                \n            \n            \n                \n                        \n                    download(key: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':key')\n                \n            \n\n                    \n                        \n                            Defined in src/storage/storage.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(user: TokenPayload, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(undefined)@Secured(['undefined'])@ApiConsumes('multipart/form-data')@ApiBody({description: 'List of cats', type: FileUploadDto})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/storage/storage.controller.ts:43\n                        \n                    \n\n\n            \n                \n                        Upload files that belong to a tenant like images\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Param,\n    Post,\n    StreamableFile,\n    UploadedFile,\n    UseInterceptors,\n} from \"@nestjs/common\";\nimport { FileInterceptor } from \"@nestjs/platform-express\";\nimport { ApiBody, ApiConsumes } from \"@nestjs/swagger\";\nimport { Role } from \"../auth/roles/role.enum\";\nimport { Secured } from \"../auth/secure.decorator\";\nimport { Token, TokenPayload } from \"../auth/token.decorator\";\nimport { FileUploadDto } from \"./dto/file-upload.dto\";\nimport { FilesService } from \"./files.service\";\n\n/**\n * Storage Controller\n */\n@Controller(\"storage\")\nexport class StorageController {\n    /**\n     * Constructor\n     * @param filesService The files service\n     */\n    constructor(private filesService: FilesService) {}\n\n    /**\n     * Upload files that belong to a tenant like images\n     * @param user\n     * @param file\n     * @returns\n     */\n    @UseInterceptors(FileInterceptor(\"file\"))\n    @Secured([Role.Issuances])\n    @ApiConsumes(\"multipart/form-data\")\n    @ApiBody({\n        description: \"List of cats\",\n        type: FileUploadDto,\n    })\n    @Post()\n    upload(\n        @Token() user: TokenPayload,\n        @UploadedFile() file: Express.Multer.File,\n    ) {\n        return this.filesService.saveUserUpload(user.entity!.id, file, true);\n    }\n\n    @Get(\":key\")\n    download(@Param(\"key\") key: string) {\n        return this.filesService.getStream(key).then(\n            (stream) =>\n                new StreamableFile(stream.stream, {\n                    disposition: \"attachment\",\n                    type: stream.contentType,\n                    length: stream.size,\n                }),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StorageModule.html":{"url":"modules/StorageModule.html","title":"module - StorageModule","body":"\n                   \n\n\n\n\n    Modules\n    StorageModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/storage/storage.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.module.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { S3Client } from \"@aws-sdk/client-s3\";\nimport { DynamicModule, Global, Module } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { LocalFileStorage } from \"./adapters/local.storage\";\nimport { S3FileStorage } from \"./adapters/s3.storage\";\nimport { FileEntity } from \"./entities/files.entity\";\nimport { FilesService } from \"./files.service\";\nimport { StorageController } from \"./storage.controller\";\nimport { FILE_STORAGE, FileStorage } from \"./storage.types\";\n\ntype Driver = \"local\" | \"s3\";\n\n@Global()\n@Module({})\nexport class StorageModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: StorageModule,\n            imports: [TypeOrmModule.forFeature([FileEntity])],\n            controllers: [StorageController],\n            providers: [\n                FilesService,\n                {\n                    provide: FILE_STORAGE,\n                    inject: [ConfigService],\n                    useFactory: (cfg: ConfigService): FileStorage => {\n                        const driver = cfg.get(\"STORAGE_DRIVER\");\n                        if (driver === \"s3\") {\n                            return new S3FileStorage(\n                                new S3Client({\n                                    region: cfg.get(\"S3_REGION\"),\n                                    endpoint: cfg.get(\"S3_ENDPOINT\"),\n                                    forcePathStyle: cfg.get(\n                                        \"S3_FORCE_PATH_STYLE\",\n                                    ),\n                                    credentials: {\n                                        accessKeyId:\n                                            cfg.get(\n                                                \"S3_ACCESS_KEY_ID\",\n                                            )!,\n                                        secretAccessKey: cfg.get(\n                                            \"S3_SECRET_ACCESS_KEY\",\n                                        )!,\n                                    },\n                                }),\n                                cfg.get(\"S3_BUCKET\")!,\n                                cfg.get(\"S3_PUBLIC_BASE_URL\"),\n                            );\n                        }\n                        // local\n                        return new LocalFileStorage(\n                            cfg.getOrThrow(\"LOCAL_STORAGE_DIR\"),\n                        );\n                    },\n                },\n            ],\n            exports: [FilesService],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TenantController.html":{"url":"controllers/TenantController.html","title":"controller - TenantController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TenantController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tenant/tenant.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tenant\n            \n\n\n            \n                Description\n            \n            \n                Tenant management controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteTenant\n                            \n                            \n                                    \n                                getTenant\n                            \n                            \n                                    \n                                getTenants\n                            \n                            \n                                    \n                                initTenant\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTenant(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Deletes a tenant by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTenant(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.controller.ts:40\n                        \n                    \n\n\n            \n                \n                        Get a tenant by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The tenant\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getTenants\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTenants()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.controller.ts:20\n                        \n                    \n\n\n            \n                \n                        Get all tenants\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        initTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    initTenant(data: CreateTenantDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.controller.ts:30\n                        \n                    \n\n\n            \n                \n                        Initialize a tenant\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateTenantDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post } from \"@nestjs/common\";\nimport { Role } from \"../roles/role.enum\";\nimport { Secured } from \"../secure.decorator\";\nimport { CreateTenantDto } from \"./dto/create-tenant.dto\";\nimport { TenantService } from \"./tenant.service\";\n\n/**\n * Tenant management controller\n */\n@Secured([Role.Tenants])\n@Controller(\"tenant\")\nexport class TenantController {\n    constructor(private readonly tenantService: TenantService) {}\n\n    /**\n     * Get all tenants\n     * @returns\n     */\n    @Get()\n    getTenants() {\n        return this.tenantService.getAll();\n    }\n\n    /**\n     * Initialize a tenant\n     * @param data\n     * @returns\n     */\n    @Post()\n    initTenant(@Body() data: CreateTenantDto) {\n        return this.tenantService.createTenant(data);\n    }\n\n    /**\n     * Get a tenant by ID\n     * @param id The ID of the tenant\n     * @returns The tenant\n     */\n    @Get(\":id\")\n    getTenant(@Param(\"id\") id: string) {\n        return this.tenantService.getTenant(id);\n    }\n\n    /**\n     * Deletes a tenant by ID\n     * @param id The ID of the tenant to delete\n     */\n    @Delete(\":id\")\n    deleteTenant(@Param(\"id\") id: string) {\n        return this.tenantService.deleteTenant(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TenantEntity.html":{"url":"entities/TenantEntity.html","title":"entity - TenantEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  TenantEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tenant/entitites/tenant.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a tenant in the system.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                clients\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        clients\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClientEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, client => client.tenant)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/tenant/entitites/tenant.entity.ts:47\n                        \n                    \n\n            \n                \n                    The clients associated with the tenant.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/tenant/entitites/tenant.entity.ts:32\n                        \n                    \n\n            \n                \n                    The description of the tenant.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/tenant/entitites/tenant.entity.ts:17\n                        \n                    \n\n            \n                \n                    The unique identifier for the tenant.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column({default: 'EUDIPLO'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/tenant/entitites/tenant.entity.ts:24\n                        \n                    \n\n            \n                \n                    The name of the tenant.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/tenant/entitites/tenant.entity.ts:38\n                        \n                    \n\n            \n                \n                    The current status of the tenant.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\nimport { Column, Entity, OneToMany, PrimaryColumn } from \"typeorm\";\nimport { ClientEntity } from \"../../client/entities/client.entity\";\n\nexport type TenantStatus = \"active\";\n\n/**\n * Represents a tenant in the system.\n */\n@Entity()\nexport class TenantEntity {\n    /**\n     * The unique identifier for the tenant.\n     */\n    @IsString()\n    @PrimaryColumn()\n    id: string;\n\n    /**\n     * The name of the tenant.\n     */\n    @IsString()\n    @Column({ default: \"EUDIPLO\" })\n    name: string;\n\n    /**\n     * The description of the tenant.\n     */\n    @IsString()\n    @IsOptional()\n    @Column({ nullable: true })\n    description?: string;\n\n    /**\n     * The current status of the tenant.\n     */\n    @Column(\"varchar\", { nullable: true })\n    status: TenantStatus;\n\n    /**\n     * The clients associated with the tenant.\n     */\n    @OneToMany(\n        () => ClientEntity,\n        (client) => client.tenant,\n    )\n    clients: ClientEntity[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TenantService.html":{"url":"injectables/TenantService.html","title":"injectable - TenantService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TenantService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tenant/tenant.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTenant\n                            \n                            \n                                    Async\n                                deleteTenant\n                            \n                            \n                                getAll\n                            \n                            \n                                getTenant\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                setUpTenant\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clients: ClientsProvider, configService: ConfigService, cryptoService: CryptoService, encryptionService: EncryptionService, statusListService: StatusListService, registrarService: RegistrarService, oid4vciService: Oid4vciService, tenantRepository: Repository, tenantTotal: Gauge, filesService: FilesService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/tenant/tenant.service.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clients\n                                                  \n                                                        \n                                                                        ClientsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vciService\n                                                  \n                                                        \n                                                                        Oid4vciService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantTotal\n                                                  \n                                                        \n                                                                    Gauge\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTenant(data: CreateTenantDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Create a new tenant\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateTenantDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTenant(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:131\n                        \n                    \n\n\n            \n                \n                        Deletes a tenant by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Get all tenants\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                A list of all tenants\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTenant\n                        \n                    \n                \n            \n            \n                \ngetTenant(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:104\n                        \n                    \n\n\n            \n                \n                        Get a tenant by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant to retrieve\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The tenant entity\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:70\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setUpTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    setUpTenant(tenant: TenantEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:115\n                        \n                    \n\n\n            \n                \n                        Sends an event to set up a tenant, allowing all other services to listen and react accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenant\n                                            \n                                                            TenantEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Inject,\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus\";\nimport { readdirSync } from \"fs\";\nimport { Gauge } from \"prom-client\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { EncryptionService } from \"../../crypto/encryption/encryption.service\";\nimport { Oid4vciService } from \"../../issuer/oid4vci/oid4vci.service\";\nimport { StatusListService } from \"../../issuer/status-list/status-list.service\";\nimport { RegistrarService } from \"../../registrar/registrar.service\";\nimport { FilesService } from \"../../storage/files.service\";\nimport { CLIENTS_PROVIDER, ClientsProvider } from \"../client/client.provider\";\nimport { Role } from \"../roles/role.enum\";\nimport { CreateTenantDto } from \"./dto/create-tenant.dto\";\nimport { TenantEntity } from \"./entitites/tenant.entity\";\n\n// Tenant interface for service integration\nexport interface Tenants {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class TenantService implements OnApplicationBootstrap, OnModuleInit {\n    constructor(\n        @Inject(CLIENTS_PROVIDER) private clients: ClientsProvider,\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private statusListService: StatusListService,\n        private registrarService: RegistrarService,\n        private oid4vciService: Oid4vciService,\n        @InjectRepository(TenantEntity)\n        private tenantRepository: Repository,\n        @InjectMetric(\"tenant_total\")\n        private tenantTotal: Gauge,\n        private filesService: FilesService,\n    ) {}\n\n    async onModuleInit() {\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n            if (this.configService.get(\"CONFIG_IMPORT\")) {\n                const tenantFolders = readdirSync(configPath, {\n                    withFileTypes: true,\n                }).filter((tenant) => tenant.isDirectory());\n                for (const tenant of tenantFolders) {\n                    const setUp = await this.tenantRepository.findOneBy({\n                        id: tenant.name,\n                        status: \"active\",\n                    });\n                    if (!setUp) {\n                        await this.createTenant({\n                            id: tenant.name,\n                            name: \"EUDIPLO\",\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    async onApplicationBootstrap() {\n        // Initialize the tenant metrics\n        const count = await this.tenantRepository.count();\n        this.tenantTotal.set({}, count);\n    }\n\n    /**\n     * Get all tenants\n     * @returns A list of all tenants\n     */\n    getAll() {\n        return this.tenantRepository.find();\n    }\n\n    /**\n     * Create a new tenant\n     * @param data\n     * @returns\n     */\n    async createTenant(data: CreateTenantDto) {\n        const tenant = await this.tenantRepository.save(data);\n        await this.setUpTenant(tenant);\n        await this.clients.addClient(tenant.id, {\n            clientId: \"admin\",\n            description: tenant.name,\n            roles: [Role.Clients, ...(data.roles || [])],\n        });\n    }\n\n    /**\n     * Get a tenant by ID\n     * @param id The ID of the tenant to retrieve\n     * @returns The tenant entity\n     */\n    getTenant(id: string): Promise {\n        return this.tenantRepository.findOneOrFail({\n            where: { id },\n            relations: [\"clients\"],\n        });\n    }\n\n    /**\n     * Sends an event to set up a tenant, allowing all other services to listen and react accordingly.\n     * @param tenant\n     */\n    async setUpTenant(tenant: TenantEntity) {\n        await this.cryptoService.onTenantInit(tenant);\n        await this.encryptionService.onTenantInit(tenant.id);\n        await this.statusListService.onTenantInit(tenant.id);\n        await this.registrarService.onTenantInit(tenant);\n        await this.oid4vciService.onTenantInit(tenant.id);\n        await this.tenantRepository.update(\n            { id: tenant.id },\n            { status: \"active\" },\n        );\n    }\n\n    /**\n     * Deletes a tenant by ID\n     * @param tenantId The ID of the tenant to delete\n     */\n    async deleteTenant(tenantId: string) {\n        //delete all files associated with the tenant\n        await this.filesService.deleteByTenant(tenantId);\n        //because of cascading, all related entities will be deleted.\n        await this.tenantRepository.delete({ id: tenantId });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Tenants.html":{"url":"interfaces/Tenants.html","title":"interface - Tenants","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Tenants\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tenant/tenant.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    Inject,\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus\";\nimport { readdirSync } from \"fs\";\nimport { Gauge } from \"prom-client\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { EncryptionService } from \"../../crypto/encryption/encryption.service\";\nimport { Oid4vciService } from \"../../issuer/oid4vci/oid4vci.service\";\nimport { StatusListService } from \"../../issuer/status-list/status-list.service\";\nimport { RegistrarService } from \"../../registrar/registrar.service\";\nimport { FilesService } from \"../../storage/files.service\";\nimport { CLIENTS_PROVIDER, ClientsProvider } from \"../client/client.provider\";\nimport { Role } from \"../roles/role.enum\";\nimport { CreateTenantDto } from \"./dto/create-tenant.dto\";\nimport { TenantEntity } from \"./entitites/tenant.entity\";\n\n// Tenant interface for service integration\nexport interface Tenants {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class TenantService implements OnApplicationBootstrap, OnModuleInit {\n    constructor(\n        @Inject(CLIENTS_PROVIDER) private clients: ClientsProvider,\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private statusListService: StatusListService,\n        private registrarService: RegistrarService,\n        private oid4vciService: Oid4vciService,\n        @InjectRepository(TenantEntity)\n        private tenantRepository: Repository,\n        @InjectMetric(\"tenant_total\")\n        private tenantTotal: Gauge,\n        private filesService: FilesService,\n    ) {}\n\n    async onModuleInit() {\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n            if (this.configService.get(\"CONFIG_IMPORT\")) {\n                const tenantFolders = readdirSync(configPath, {\n                    withFileTypes: true,\n                }).filter((tenant) => tenant.isDirectory());\n                for (const tenant of tenantFolders) {\n                    const setUp = await this.tenantRepository.findOneBy({\n                        id: tenant.name,\n                        status: \"active\",\n                    });\n                    if (!setUp) {\n                        await this.createTenant({\n                            id: tenant.name,\n                            name: \"EUDIPLO\",\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    async onApplicationBootstrap() {\n        // Initialize the tenant metrics\n        const count = await this.tenantRepository.count();\n        this.tenantTotal.set({}, count);\n    }\n\n    /**\n     * Get all tenants\n     * @returns A list of all tenants\n     */\n    getAll() {\n        return this.tenantRepository.find();\n    }\n\n    /**\n     * Create a new tenant\n     * @param data\n     * @returns\n     */\n    async createTenant(data: CreateTenantDto) {\n        const tenant = await this.tenantRepository.save(data);\n        await this.setUpTenant(tenant);\n        await this.clients.addClient(tenant.id, {\n            clientId: \"admin\",\n            description: tenant.name,\n            roles: [Role.Clients, ...(data.roles || [])],\n        });\n    }\n\n    /**\n     * Get a tenant by ID\n     * @param id The ID of the tenant to retrieve\n     * @returns The tenant entity\n     */\n    getTenant(id: string): Promise {\n        return this.tenantRepository.findOneOrFail({\n            where: { id },\n            relations: [\"clients\"],\n        });\n    }\n\n    /**\n     * Sends an event to set up a tenant, allowing all other services to listen and react accordingly.\n     * @param tenant\n     */\n    async setUpTenant(tenant: TenantEntity) {\n        await this.cryptoService.onTenantInit(tenant);\n        await this.encryptionService.onTenantInit(tenant.id);\n        await this.statusListService.onTenantInit(tenant.id);\n        await this.registrarService.onTenantInit(tenant);\n        await this.oid4vciService.onTenantInit(tenant.id);\n        await this.tenantRepository.update(\n            { id: tenant.id },\n            { status: \"active\" },\n        );\n    }\n\n    /**\n     * Deletes a tenant by ID\n     * @param tenantId The ID of the tenant to delete\n     */\n    async deleteTenant(tenantId: string) {\n        //delete all files associated with the tenant\n        await this.filesService.deleteByTenant(tenantId);\n        //because of cascading, all related entities will be deleted.\n        await this.tenantRepository.delete({ id: tenantId });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.decorator.ts\n        \n\n\n            \n                Description\n            \n            \n                Values of the user token\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            entity\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        entity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        entity:         TenantEntity\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TenantEntity\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Tenant entity\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:         Role[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Role[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Role for the user\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from \"@nestjs/common\";\nimport { Role } from \"./roles/role.enum\";\nimport { TenantEntity } from \"./tenant/entitites/tenant.entity\";\n\n/**\n * Token decorator\n */\nexport const Token = createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n);\n\n/**\n * Values of the user token\n */\nexport interface TokenPayload {\n    /**\n     * Tenant entity\n     */\n    entity?: TenantEntity;\n\n    /**\n     * Role for the user\n     */\n    roles: Role[];\n}\n\nexport interface InternalTokenPayload extends TokenPayload {\n    /**\n     * Tenant ID\n     */\n    tenant_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenResponse.html":{"url":"classes/TokenResponse.html","title":"class - TokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/token-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access_token\n                            \n                            \n                                expires_in\n                            \n                            \n                                    Optional\n                                refresh_token\n                            \n                            \n                                token_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TokenResponse {\n    access_token: string;\n    refresh_token?: string;\n    token_type: \"Bearer\";\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrustedAuthorityQuery.html":{"url":"classes/TrustedAuthorityQuery.html","title":"class - TrustedAuthorityQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrustedAuthorityQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                type\n                            \n                            \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['aki', 'etsi_tl', 'openid_federation'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/tenant/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateKeyDto.html":{"url":"classes/UpdateKeyDto.html","title":"class - UpdateKeyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateKeyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-update.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        OmitType(KeyImportDto, [\n    \"privateKey\",\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { KeyImportDto } from \"./key-import.dto\";\n\nexport class UpdateKeyDto extends OmitType(KeyImportDto, [\n    \"privateKey\",\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VCT.html":{"url":"classes/VCT.html","title":"class - VCT","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VCT\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/vct.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                extends\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                extends#integrity\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                schema_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                schema_uri#integrity\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        extends\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        extends#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        schema_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        schema_uri#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmpty, IsOptional, IsString } from \"class-validator\";\n\nexport class VCT {\n    @ApiProperty({\n        required: false,\n    })\n    @IsEmpty()\n    vct?: string;\n    @IsOptional()\n    @IsString()\n    name?: string;\n    @IsOptional()\n    @IsString()\n    description?: string;\n    @IsOptional()\n    @IsString()\n    extends?: string;\n    @IsOptional()\n    @IsString()\n    \"extends#integrity\"?: string;\n    @IsOptional()\n    @IsString()\n    schema_uri?: string;\n    @IsOptional()\n    @IsString()\n    \"schema_uri#integrity\"?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VerifierModule.html":{"url":"modules/VerifierModule.html","title":"module - VerifierModule","body":"\n                   \n\n\n\n\n    Modules\n    VerifierModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VerifierModule\n\n\n\ncluster_VerifierModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/verifier.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            PresentationsModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { RegistrarModule } from \"../registrar/registrar.module\";\nimport { SessionModule } from \"../session/session.module\";\nimport { Oid4vpModule } from \"./oid4vp/oid4vp.module\";\nimport { PresentationsModule } from \"./presentations/presentations.module\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        RegistrarModule,\n        SessionModule,\n        HttpModule,\n        PresentationsModule,\n        Oid4vpModule,\n    ],\n})\nexport class VerifierModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfig.html":{"url":"classes/WebHookAuthConfig.html","title":"class - WebHookAuthConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(AuthConfig)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:65\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    auth?: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfigHeader.html":{"url":"classes/WebHookAuthConfigHeader.html","title":"class - WebHookAuthConfigHeader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfigHeader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhook authentication.\n\n            \n\n\n            \n                Implements\n            \n            \n                            WebHookAuthConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApiKeyConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:51\n                        \n                    \n\n            \n                \n                    Configuration for API key authentication.\nThis is required if the type is 'apiKey'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig.API_KEY\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['undefined'])@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:44\n                        \n                    \n\n            \n                \n                    The type of authentication used for the webhook.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    auth?: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfigNone.html":{"url":"classes/WebHookAuthConfigNone.html","title":"class - WebHookAuthConfigNone","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfigNone\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            WebHookAuthConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig.NONE\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['undefined'])@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:60\n                        \n                    \n\n            \n                \n                    The type of authentication used for the webhook.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    auth?: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebhookConfig.html":{"url":"classes/WebhookConfig.html","title":"class - WebhookConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebhookConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhooks used in various services.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                auth\n                            \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebHookAuthConfigNone | WebHookAuthConfigHeader\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@ApiProperty({oneOf: undefined})@Type(undefined, {discriminator: undefined, keepDiscriminatorProperty: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:105\n                        \n                    \n\n            \n                \n                    Optional authentication configuration for the webhook.\nIf not provided, no authentication will be used.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:77\n                        \n                    \n\n            \n                \n                    The URL to which the webhook will send notifications.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    auth?: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebhookResponse.html":{"url":"classes/WebhookResponse.html","title":"class - WebhookResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebhookResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Response from a webhook to receive credentials.\n\n            \n\n\n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    Record\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/webhook/webhook.service.ts:12\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport { Injectable } from \"@nestjs/common\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Notification, Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { SessionLoggerService } from \"../logger/session-logger.service\";\nimport { SessionLogContext } from \"../logger/session-logger-context\";\n\n/**\n * Response from a webhook to receive credentials.\n */\nexport class WebhookResponse {\n    [key: string]: Record;\n}\n\n/**\n * Service for handling webhooks in the application.\n */\n@Injectable()\nexport class WebhookService {\n    /**\n     * Constructor for WebhookService.\n     * @param httpService\n     * @param sessionService\n     * @param sessionLogger\n     */\n    constructor(\n        private httpService: HttpService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n    ) {}\n\n    /**\n     * Sends a webhook with the optional provided credentials, return the response data.\n     * @param session\n     * @param logContext\n     * @param credentials\n     * @param expectResponse Whether to expect a response from the webhook\n     */\n    sendWebhook(\n        session: Session,\n        logContext: SessionLogContext,\n        credentials?: any[],\n        expectResponse = true,\n    ) {\n        const headers: Record = {};\n        if (\n            session.claimsWebhook!.auth &&\n            session.claimsWebhook!.auth.type === \"apiKey\"\n        ) {\n            headers[session.claimsWebhook!.auth.config.headerName] =\n                session.claimsWebhook!.auth.config.value;\n        }\n        this.sessionLogger.logSession(logContext, \"Sending webhook\", {\n            webhookUrl: session.claimsWebhook!.url,\n            authType: session.claimsWebhook!.auth?.type || \"none\",\n        });\n\n        return firstValueFrom(\n            this.httpService.post(\n                session.claimsWebhook!.url,\n                {\n                    credentials,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data && expectResponse) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n                return webhookResponse.data;\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n\n    /**\n     * Sends a webhook notification for a session.\n     * @param session\n     * @param logContext\n     * @param notification\n     */\n    async sendWebhookNotification(\n        session: Session,\n        logContext: SessionLogContext,\n        notification: Notification,\n    ) {\n        const headers: Record = {};\n        const webhook = session.notifyWebhook!;\n\n        if (webhook.auth && webhook.auth.type === \"apiKey\") {\n            headers[webhook.auth.config.headerName] = webhook.auth.config.value;\n        }\n        this.sessionLogger.logSession(\n            logContext,\n            \"Sending webhook notification\",\n            {\n                webhookUrl: webhook.url,\n                authType: webhook.auth?.type || \"none\",\n            },\n        );\n\n        await firstValueFrom(\n            this.httpService.post(\n                webhook.url,\n                {\n                    notification,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook notification sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WebhookService.html":{"url":"injectables/WebhookService.html","title":"injectable - WebhookService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WebhookService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling webhooks in the application.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendWebhook\n                            \n                            \n                                    Async\n                                sendWebhookNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, sessionService: SessionService, sessionLogger: SessionLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/webhook/webhook.service.ts:20\n                            \n                        \n\n                \n                    \n                            Constructor for WebhookService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendWebhook\n                        \n                    \n                \n            \n            \n                \nsendWebhook(session: Session, logContext: SessionLogContext, credentials?: any[], expectResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/webhook/webhook.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Sends a webhook with the optional provided credentials, return the response data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                logContext\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                credentials\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                expectResponse\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    Whether to expect a response from the webhook\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendWebhookNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendWebhookNotification(session: Session, logContext: SessionLogContext, notification: Notification)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/webhook/webhook.service.ts:111\n                        \n                    \n\n\n            \n                \n                        Sends a webhook notification for a session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                logContext\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notification\n                                            \n                                                            Notification\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport { Injectable } from \"@nestjs/common\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Notification, Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { SessionLoggerService } from \"../logger/session-logger.service\";\nimport { SessionLogContext } from \"../logger/session-logger-context\";\n\n/**\n * Response from a webhook to receive credentials.\n */\nexport class WebhookResponse {\n    [key: string]: Record;\n}\n\n/**\n * Service for handling webhooks in the application.\n */\n@Injectable()\nexport class WebhookService {\n    /**\n     * Constructor for WebhookService.\n     * @param httpService\n     * @param sessionService\n     * @param sessionLogger\n     */\n    constructor(\n        private httpService: HttpService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n    ) {}\n\n    /**\n     * Sends a webhook with the optional provided credentials, return the response data.\n     * @param session\n     * @param logContext\n     * @param credentials\n     * @param expectResponse Whether to expect a response from the webhook\n     */\n    sendWebhook(\n        session: Session,\n        logContext: SessionLogContext,\n        credentials?: any[],\n        expectResponse = true,\n    ) {\n        const headers: Record = {};\n        if (\n            session.claimsWebhook!.auth &&\n            session.claimsWebhook!.auth.type === \"apiKey\"\n        ) {\n            headers[session.claimsWebhook!.auth.config.headerName] =\n                session.claimsWebhook!.auth.config.value;\n        }\n        this.sessionLogger.logSession(logContext, \"Sending webhook\", {\n            webhookUrl: session.claimsWebhook!.url,\n            authType: session.claimsWebhook!.auth?.type || \"none\",\n        });\n\n        return firstValueFrom(\n            this.httpService.post(\n                session.claimsWebhook!.url,\n                {\n                    credentials,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data && expectResponse) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n                return webhookResponse.data;\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n\n    /**\n     * Sends a webhook notification for a session.\n     * @param session\n     * @param logContext\n     * @param notification\n     */\n    async sendWebhookNotification(\n        session: Session,\n        logContext: SessionLogContext,\n        notification: Notification,\n    ) {\n        const headers: Record = {};\n        const webhook = session.notifyWebhook!;\n\n        if (webhook.auth && webhook.auth.type === \"apiKey\") {\n            headers[webhook.auth.config.headerName] = webhook.auth.config.value;\n        }\n        this.sessionLogger.logSession(\n            logContext,\n            \"Sending webhook notification\",\n            {\n                webhookUrl: webhook.url,\n                authType: webhook.auth?.type || \"none\",\n            },\n        );\n\n        await firstValueFrom(\n            this.httpService.post(\n                webhook.url,\n                {\n                    notification,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook notification sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WellKnownController.html":{"url":"controllers/WellKnownController.html","title":"controller - WellKnownController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WellKnownController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/.well-known\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI well-known endpoints.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authzMetadata\n                            \n                            \n                                    \n                                    \n                                getJwks\n                            \n                            \n                                    \n                                    \n                                    \n                                issuerMetadata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    authzMetadata(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('oauth-authorization-server')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:57\n                        \n                    \n\n\n            \n                \n                        Authorization Server Metadata\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServerResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJwks(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Header('Content-Type', 'application/jwk-set+json')@Get('jwks.json')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:69\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for the authorization server.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(session: Session, contentType: MediaType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get OpenID4VCI issuer metadata', description: 'Returns the OpenID4VCI issuer metadata.'})@ApiProduces(MediaType.APPLICATION_JSON, MediaType.APPLICATION_JWT)@Get('openid-credential-issuer')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Retrieves the OpenID4VCI issuer metadata for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contentType\n                                            \n                                                            MediaType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header } from \"@nestjs/common\";\nimport {\n    ApiExcludeController,\n    ApiOperation,\n    ApiParam,\n    ApiProduces,\n} from \"@nestjs/swagger\";\nimport { Session } from \"../session/entities/session.entity\";\nimport { SessionEntity } from \"../session/session.decorator\";\nimport { ContentType } from \"../utils/mediaType/media-type.decorator\";\nimport { MediaType } from \"../utils/mediaType/media-type.enum\";\nimport { JwksResponseDto } from \"./dto/jwks-response.dto\";\nimport { Oauth2AuthorizationServerResponse } from \"./dto/oauth-authorization-server-response.dto\";\nimport { WellKnownService } from \"./well-known.service\";\n\n/**\n * Controller for the OpenID4VCI well-known endpoints.\n */\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@ApiParam({\n    name: \"session\",\n    required: true,\n})\n@Controller(\":session/.well-known\")\nexport class WellKnownController {\n    /**\n     * Constructor for WellKnownController.\n     * @param wellKnownService\n     */\n    constructor(private readonly wellKnownService: WellKnownService) {}\n\n    /**\n     * Retrieves the OpenID4VCI issuer metadata for a given tenant.\n     * @param tenantId\n     * @param contentType\n     * @returns\n     */\n    @ApiOperation({\n        summary: \"Get OpenID4VCI issuer metadata\",\n        description: \"Returns the OpenID4VCI issuer metadata.\",\n    })\n    //we can not set the accept in the apiheader via swagger.\n    @ApiProduces(MediaType.APPLICATION_JSON, MediaType.APPLICATION_JWT)\n    @Get(\"openid-credential-issuer\")\n    issuerMetadata(\n        @SessionEntity() session: Session,\n        @ContentType() contentType: MediaType,\n    ) {\n        return this.wellKnownService.getIssuerMetadata(session, contentType);\n    }\n\n    /**\n     * Authorization Server Metadata\n     * @returns\n     */\n    @Get(\"oauth-authorization-server\")\n    authzMetadata(\n        @SessionEntity() session: Session,\n    ): Oauth2AuthorizationServerResponse {\n        return this.wellKnownService.getAuthzMetadata(session);\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for the authorization server.\n     * @returns\n     */\n    @Header(\"Content-Type\", \"application/jwk-set+json\")\n    @Get(\"jwks.json\")\n    getJwks(@SessionEntity() session: Session): Promise {\n        return this.wellKnownService.getJwks(session.tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WellKnownService.html":{"url":"injectables/WellKnownService.html","title":"injectable - WellKnownService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WellKnownService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to handle well-known endpoints and metadata retrieval.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAuthzMetadata\n                            \n                            \n                                    Async\n                                getIssuerMetadata\n                            \n                            \n                                getJwks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(oid4vciService: Oid4vciService, cryptoService: CryptoService, authorizeService: AuthorizeService, cryptoImplementationService: CryptoImplementationService)\n                    \n                \n                        \n                            \n                                Defined in src/well-known/well-known.service.ts:16\n                            \n                        \n\n                \n                    \n                            Constructor for WellKnownService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        oid4vciService\n                                                  \n                                                        \n                                                                        Oid4vciService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authorizeService\n                                                  \n                                                        \n                                                                        AuthorizeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoImplementationService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthzMetadata\n                        \n                    \n                \n            \n            \n                \ngetAuthzMetadata(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:77\n                        \n                    \n\n\n            \n                \n                        Returns the OAuth 2.0 Authorization Server metadata for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServerResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getIssuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuerMetadata(session: Session, contentType: MediaType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Retrieves the issuer metadata for a given tenant for the specified content type.\nThe metadata can be returned in two formats:\n\nan unsigned JSON document using the media type application/json, or\na signed JSON Web Token (JWT) containing the Credential Issuer Metadata in its payload using the media type application/jwt.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contentType\n                                            \n                                                            MediaType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getJwks\n                        \n                    \n                \n            \n            \n                \ngetJwks(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:87\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { CryptoImplementationService } from \"../crypto/key/crypto-implementation/crypto-implementation.service\";\nimport { AuthorizeService } from \"../issuer/authorize/authorize.service\";\nimport { Oid4vciService } from \"../issuer/oid4vci/oid4vci.service\";\nimport { Session } from \"../session/entities/session.entity\";\nimport { MediaType } from \"../utils/mediaType/media-type.enum\";\nimport { CredentialIssuerMetadataDto } from \"./dto/credential-issuer-metadata.dto\";\nimport { JwksResponseDto } from \"./dto/jwks-response.dto\";\nimport { Oauth2AuthorizationServerResponse } from \"./dto/oauth-authorization-server-response.dto\";\n\n/**\n * Service to handle well-known endpoints and metadata retrieval.\n */\n@Injectable()\nexport class WellKnownService {\n    /**\n     * Constructor for WellKnownService.\n     * @param oid4vciService\n     * @param cryptoService\n     * @param authorizeService\n     */\n    constructor(\n        private readonly oid4vciService: Oid4vciService,\n        private readonly cryptoService: CryptoService,\n        private readonly authorizeService: AuthorizeService,\n        private readonly cryptoImplementationService: CryptoImplementationService,\n    ) {}\n\n    /**\n     * Retrieves the issuer metadata for a given tenant for the specified content type.\n     * The metadata can be returned in two formats:\n     * - an unsigned JSON document using the media type application/json, or\n     * - a signed JSON Web Token (JWT) containing the Credential Issuer Metadata in its payload using the media type application/jwt.\n     * @param tenantId\n     * @param contentType\n     * @returns\n     */\n    async getIssuerMetadata(session: Session, contentType: MediaType) {\n        const metadata = (await this.oid4vciService.issuerMetadata(session))\n            .credentialIssuer as unknown as CredentialIssuerMetadataDto;\n\n        if (contentType === MediaType.APPLICATION_JWT) {\n            const keyId = await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                \"access\",\n            );\n            return this.cryptoService.signJwt(\n                {\n                    typ: \"openidvci-issuer-metadata+jwt\",\n                    alg: this.cryptoImplementationService.getAlg(),\n                    x5c: await this.cryptoService.getCertChain(\n                        \"access\",\n                        session.tenantId,\n                    ),\n                },\n                {\n                    ...metadata,\n                    iss: metadata.credential_issuer,\n                    sub: metadata.credential_issuer,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    // [Review]: should we add `exp` value here?\n                    //MM: the value makes sense when we cache the issuer metadata so it must not be signed on every request. Like when it is issued every hour, its lifetime is 1 hour and the jwt is in the cache.\n                },\n                session.tenantId,\n                keyId,\n            );\n        }\n\n        return metadata;\n    }\n\n    /**\n     * Returns the OAuth 2.0 Authorization Server metadata for a given tenant.\n     * @returns\n     */\n    getAuthzMetadata(session: Session): Oauth2AuthorizationServerResponse {\n        return this.authorizeService.authzMetadata(\n            session,\n        ) as Oauth2AuthorizationServerResponse;\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for a given tenant.\n     * @returns\n     */\n    getJwks(tenantId: string): Promise {\n        return this.cryptoService.getJwks(tenantId).then((key) => ({\n            keys: [key],\n        }));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/dto/oidc-discovery.dto.ts\n            \n            interface\n            OidcDiscoveryDto\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                        src/auth/auth-validation.schema.ts\n            \n            variable\n            AUTH_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth-validation.schema.ts\n            \n            variable\n            DEFAULT_AUTH_CLIENT_ID\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth-validation.schema.ts\n            \n            variable\n            DEFAULT_AUTH_CLIENT_SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth-validation.schema.ts\n            \n            variable\n            DEFAULT_JWT_SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/client/adapters/internal-clients.service.ts\n            \n            injectable\n            InternalClientsProvider\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auth/client/adapters/keycloak-clients.service.ts\n            \n            injectable\n            KeycloakClientsProvider\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/auth/client/client.controller.ts\n            \n            controller\n            ClientController\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/auth/client/client.provider.ts\n            \n            class\n            ClientView\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/client/client.provider.ts\n            \n            interface\n            ClientsProvider\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/auth/client/client.provider.ts\n            \n            variable\n            CLIENTS_PROVIDER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/client/dto/client-secret-response.dto.ts\n            \n            class\n            ClientSecretResponseDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/client/dto/create-client.dto.ts\n            \n            class\n            CreateClientDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/client/entities/client.entity.ts\n            \n            entity\n            ClientEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dto/client-credentials.dto.ts\n            \n            class\n            ClientCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/oidc-discovery.dto.ts\n            \n            interface\n            OidcDiscoveryDto\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                src/auth/dto/role.dto.ts\n            \n            class\n            RoleDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/token-response.dto.ts\n            \n            class\n            TokenResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/jwt.service.ts\n            \n            injectable\n            JwtService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/auth/jwt.service.ts\n            \n            interface\n            GenerateTokenOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                        src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/roles/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/roles/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/secure.decorator.ts\n            \n            function\n            Secured\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/tenant/dto/create-tenant.dto.ts\n            \n            class\n            CreateTenantDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/tenant/entitites/tenant.entity.ts\n            \n            entity\n            TenantEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/tenant/entitites/tenant.entity.ts\n            \n            type alias\n            TenantStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/tenant/tenant.controller.ts\n            \n            controller\n            TenantController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/tenant/tenant.service.ts\n            \n            injectable\n            TenantService\n            \n                55 %\n                (5/9)\n            \n        \n        \n            \n                \n                src/auth/tenant/tenant.service.ts\n            \n            interface\n            Tenants\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/token.decorator.ts\n            \n            interface\n            InternalTokenPayload\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/auth/token.decorator.ts\n            \n            interface\n            TokenPayload\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/auth/token.decorator.ts\n            \n            variable\n            Token\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/crypto/crypto.service.ts\n            \n            injectable\n            CryptoService\n            \n                90 %\n                (20/22)\n            \n        \n        \n            \n                \n                        src/crypto/crypto.service.ts\n            \n            variable\n            ECDSA_P256\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/encryption/encryption.service.ts\n            \n            injectable\n            EncryptionService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/crypto/key/adapters/db-key.service.ts\n            \n            class\n            DBKeyService\n            \n                66 %\n                (10/15)\n            \n        \n        \n            \n                \n                src/crypto/key/adapters/vault-key.service.ts\n            \n            class\n            VaultKeyService\n            \n                47 %\n                (9/19)\n            \n        \n        \n            \n                \n                src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n            \n            injectable\n            CryptoImplementationService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n            \n            type alias\n            CryptoType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            interface\n            CryptoImplementation\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            KeyPair\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            Signer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            Verifier\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-validation.schema.ts\n            \n            variable\n            CRYPTO_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/ed25519.ts\n            \n            variable\n            ED25519\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-import.dto.ts\n            \n            class\n            Key\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-import.dto.ts\n            \n            class\n            KeyImportDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-object.dto.ts\n            \n            class\n            KeyObj\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-response.dto.ts\n            \n            class\n            KeyResponseDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-update.dto.ts\n            \n            class\n            UpdateKeyDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/entities/cert.entity.ts\n            \n            entity\n            CertEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/entities/cert.entity.ts\n            \n            type alias\n            CertificateType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/entities/keys.entity.ts\n            \n            entity\n            KeyEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/entities/keys.entity.ts\n            \n            type alias\n            KeyUsage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/key-validation.schema.ts\n            \n            variable\n            KEY_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/key.controller.ts\n            \n            controller\n            KeyController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/crypto/key/key.service.ts\n            \n            class\n            KeyService\n            \n                66 %\n                (8/12)\n            \n        \n        \n            \n                \n                        src/database/database-validation.schema.ts\n            \n            variable\n            DB_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.controller.ts\n            \n            controller\n            AuthorizeController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            injectable\n            AuthorizeService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            interface\n            ParsedAccessTokenAuthorizationCodeRequestGrant\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            interface\n            ParsedAccessTokenPreAuthorizedCodeRequestGrant\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/issuer/authorize/dto/authorize-request.dto.ts\n            \n            class\n            AuthorizeQueries\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/issuer/authorize/dto/par-response.dto.ts\n            \n            class\n            ParResponseDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/credentials-metadata.controller.ts\n            \n            controller\n            CredentialsMetadataController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/dto/schema-response.dto.ts\n            \n            class\n            SchemaResponse\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/dto/vct.dto.ts\n            \n            class\n            VCT\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credential-config/credential-config.service.ts\n            \n            injectable\n            CredentialConfigService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credentials.controller.ts\n            \n            controller\n            CredentialsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credentials.service.ts\n            \n            injectable\n            CredentialsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/issuer/credentials/dto/credential-config-create.dto.ts\n            \n            class\n            CredentialConfigCreate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            entity\n            CredentialConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            CredentialConfig\n            \n                11 %\n                (2/17)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            Display\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            DisplayImage\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            IssuerMetadataCredentialConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            AllowListPolicy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            AttestationBasedPolicy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            EmbeddedDisclosurePolicy\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            NoneTrustPolicy\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            PolicyCredential\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            RootOfTrustPolicy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                        src/issuer/credentials/entities/policies.dto.ts\n            \n            type alias\n            PolicyType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/display/display.controller.ts\n            \n            controller\n            DisplayController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/issuer/display/display.service.ts\n            \n            injectable\n            DisplayService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/issuer/display/dto/display-create.dto.ts\n            \n            class\n            DisplayCreateDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/display/entities/display.entity.ts\n            \n            entity\n            DisplayEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/display/entities/display.entity.ts\n            \n            class\n            DisplayInfo\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/issuer/display/entities/display.entity.ts\n            \n            class\n            DisplayLogo\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationMethodAuth\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationMethodNone\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationMethodPresentation\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationUrlConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            PresentationDuringIssuanceConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            interface\n            AuthenticationMethodInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/issuance.dto.ts\n            \n            class\n            CredentialConfigMapping\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/issuance.dto.ts\n            \n            class\n            IssuanceDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/entities/issuance-config.entity.ts\n            \n            entity\n            IssuanceConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/issuance/entities/issuance-config.entity.ts\n            \n            class\n            IssuanceConfig\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/issuer/issuance/issuance.controller.ts\n            \n            controller\n            IssuanceController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/issuance/issuance.service.ts\n            \n            injectable\n            IssuanceService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/issuer/issuer-management/issuer-management.controller.ts\n            \n            controller\n            IssuerManagementController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/issuer/issuer-validation.schema.ts\n            \n            variable\n            ISSUER_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/notification-request.dto.ts\n            \n            class\n            NotificationRequestDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/offer-request.dto.ts\n            \n            class\n            OfferRequestDto\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/offer-request.dto.ts\n            \n            class\n            OfferResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/oid4vci.controller.ts\n            \n            controller\n            Oid4vciController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/oid4vci.service.ts\n            \n            injectable\n            Oid4vciService\n            \n                83 %\n                (10/12)\n            \n        \n        \n            \n                \n                        src/issuer/oid4vci/util.ts\n            \n            function\n            getHeadersFromRequest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/dto/status-update.dto.ts\n            \n            class\n            StatusUpdateDto\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/status-list/entities/status-list.entity.ts\n            \n            entity\n            StatusListEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/entities/status-mapping.entity.ts\n            \n            entity\n            StatusMapping\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/status-list.controller.ts\n            \n            controller\n            StatusListController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/issuer/status-list/status-list.service.ts\n            \n            injectable\n            StatusListService\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/registrar/dto/access-certificate-response.ts\n            \n            interface\n            AccessCertificateResponse\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/registrar/entities/registrar.entity.ts\n            \n            entity\n            RegistrarEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/registrar/registrar-validation.schema.ts\n            \n            variable\n            REGISTRAR_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/registrar/registrar.service.ts\n            \n            injectable\n            RegistrarService\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/session/entities/session.entity.ts\n            \n            entity\n            Session\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/session/entities/session.entity.ts\n            \n            type alias\n            Notification\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/session/session-validation.schema.ts\n            \n            variable\n            SESSION_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/session/session.controller.ts\n            \n            controller\n            SessionController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                        src/session/session.decorator.ts\n            \n            function\n            SessionEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/session/session.pipe.ts\n            \n            injectable\n            SessionPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/session/session.service.ts\n            \n            injectable\n            SessionService\n            \n                83 %\n                (10/12)\n            \n        \n        \n            \n                \n                src/storage/adapters/local.storage.ts\n            \n            class\n            LocalFileStorage\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/storage/adapters/s3.storage.ts\n            \n            class\n            S3FileStorage\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/storage/dto/file-upload.dto.ts\n            \n            class\n            FileUploadDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/storage/entities/files.entity.ts\n            \n            entity\n            FileEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/storage/files.service.ts\n            \n            injectable\n            FilesService\n            \n                57 %\n                (4/7)\n            \n        \n        \n            \n                \n                        src/storage/storage-validation.schema.ts\n            \n            variable\n            STORAGE_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/storage/storage.controller.ts\n            \n            controller\n            StorageController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                        src/storage/storage.module.ts\n            \n            type alias\n            Driver\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/storage/storage.types.ts\n            \n            interface\n            FileStorage\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            variable\n            FILE_STORAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            type alias\n            PutOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            type alias\n            StoredObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/combined.schema.ts\n            \n            variable\n            VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/config-validation.schema.ts\n            \n            variable\n            CONFIG_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/helpers.ts\n            \n            function\n            extractConditionsFromKeyDesc\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/helpers.ts\n            \n            function\n            flattenMetas\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/helpers.ts\n            \n            function\n            isEffectivelyRequired\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/helpers.ts\n            \n            function\n            summarizeFlags\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/helpers.ts\n            \n            function\n            summarizeSchemaShape\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/helpers.ts\n            \n            function\n            summarizeWhenEntry\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/validation.schema.ts\n            \n            variable\n            BASE_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/logger/log-validation.schema.ts\n            \n            variable\n            LOG_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/logger/logger-config.service.ts\n            \n            injectable\n            LoggerConfigService\n            \n                23 %\n                (3/13)\n            \n        \n        \n            \n                \n                src/utils/logger/logger-config.service.ts\n            \n            interface\n            LoggerConfiguration\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger-context.ts\n            \n            interface\n            SessionLogContext\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger.decorator.ts\n            \n            variable\n            SESSION_LOGGER_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger.decorator.ts\n            \n            variable\n            SessionLogger\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger.interceptor.ts\n            \n            injectable\n            SessionLoggerInterceptor\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger.service.ts\n            \n            injectable\n            SessionLoggerService\n            \n                85 %\n                (12/14)\n            \n        \n        \n            \n                \n                        src/utils/mediaType/media-type.decorator.ts\n            \n            variable\n            ContentType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            ApiKeyConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebHookAuthConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebHookAuthConfigHeader\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebHookAuthConfigNone\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebhookConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.service.ts\n            \n            class\n            WebhookResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.service.ts\n            \n            injectable\n            WebhookService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/authorization-response.dto.ts\n            \n            class\n            AuthorizationResponse\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n            \n            interface\n            PresentationRequestOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/presentation-request.dto.ts\n            \n            class\n            PresentationRequest\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/oid4vp.controller.ts\n            \n            controller\n            Oid4vpController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/oid4vp.service.ts\n            \n            injectable\n            Oid4vpService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/auth-response.dto.ts\n            \n            interface\n            AuthResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/presentation-config-create.dto.ts\n            \n            class\n            PresentationConfigCreateDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/vp-request.dto.ts\n            \n            class\n            RegistrationCertificateRequest\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            entity\n            PresentationConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            ClaimsQuery\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            CredentialQuery\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            CredentialSetQuery\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            DCQL\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            PresentationAttachment\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            TrustedAuthorityQuery\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/presentations.controller.ts\n            \n            controller\n            PresentationManagementController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/verifier/presentations/presentations.service.ts\n            \n            injectable\n            PresentationsService\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/verifier/resolver/dto/issuer-metadata.dto.ts\n            \n            interface\n            IssuerMetadata\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/resolver/resolver.service.ts\n            \n            injectable\n            ResolverService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/well-known/dto/credential-issuer-metadata.dto.ts\n            \n            class\n            CredentialIssuerMetadataDto\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/well-known/dto/jwks-response.dto.ts\n            \n            class\n            EC_Public\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/well-known/dto/jwks-response.dto.ts\n            \n            class\n            JwksResponseDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/well-known/dto/oauth-authorization-server-response.dto.ts\n            \n            class\n            Oauth2AuthorizationServerResponse\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/well-known/well-known.controller.ts\n            \n            controller\n            WellKnownController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/well-known/well-known.service.ts\n            \n            injectable\n            WellKnownService\n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/client-s3 : ^3.864.0\n        \n            @aws-sdk/s3-request-presigner : ^3.864.0\n        \n            @badgateway/oauth2-client : ^3.3.0\n        \n            @keycloak/keycloak-admin-client : ^26.3.2\n        \n            @nestjs/axios : ^4.0.1\n        \n            @nestjs/common : ^11.1.6\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.6\n        \n            @nestjs/event-emitter : ^3.0.1\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.6\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/serve-static : ^5.0.3\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/terminus : ^11.0.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @openid4vc/oauth2 : 0.3.0-alpha-20250714110838\n        \n            @openid4vc/openid4vci : 0.3.0-alpha-20250714110838\n        \n            @openid4vc/openid4vp : 0.3.0-alpha-20250714110838\n        \n            @openid4vc/utils : 0.3.0-alpha-20250714110838\n        \n            @peculiar/x509 : ^1.13.0\n        \n            @sd-jwt/crypto-nodejs : ^0.14.0\n        \n            @sd-jwt/jwt-status-list : ^0.14.0\n        \n            @sd-jwt/sd-jwt-vc : ^0.15.1\n        \n            @sd-jwt/types : ^0.14.0\n        \n            @willsoto/nestjs-prometheus : ^6.0.2\n        \n            axios : ^1.11.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            joi : ^18.0.0\n        \n            jose : ^6.0.12\n        \n            jwks-rsa : ^3.2.0\n        \n            multer : ^2.0.2\n        \n            mysql2 : ^3.14.3\n        \n            nestjs-pino : ^4.4.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.16.3\n        \n            pino-http : ^10.5.0\n        \n            pino-pretty : ^13.1.1\n        \n            prom-client : ^15.1.3\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            sqlite3 : ^5.1.7\n        \n            typeorm : ^0.3.25\n        \n            uuid : ^11.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthConfig   (src/.../webhook.dto.ts)\n                        \n                        \n                            AuthenticationMethod   (src/.../authentication-config.dto.ts)\n                        \n                        \n                            MediaType   (src/.../media-type.enum.ts)\n                        \n                        \n                            ResponseType   (src/.../presentation-request.dto.ts)\n                        \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                        \n                            SessionStatus   (src/.../session.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/webhook/webhook.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthConfig\n                    \n                \n                    \n                        \n                            Enum for the type of authentication used in webhooks.\n\n                        \n                    \n                        \n                            \n                                 API_KEY\n                            \n                        \n                        \n                            \n                                Value : apiKey\n                            \n                        \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n            \n        \n\n    src/issuer/issuance/dto/authentication-config.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthenticationMethod\n                    \n                \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n                        \n                            \n                                 AUTH\n                            \n                        \n                        \n                            \n                                Value : auth\n                            \n                        \n                        \n                            \n                                 PRESENTATION_DURING_ISSUANCE\n                            \n                        \n                        \n                            \n                                Value : presentationDuringIssuance\n                            \n                        \n            \n        \n\n    src/utils/mediaType/media-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        MediaType\n                    \n                \n                    \n                        \n                            Represents the media types used in the application.\n\n                        \n                    \n                        \n                            \n                                 APPLICATION_JSON\n                            \n                        \n                        \n                            \n                                Value : application/json\n                            \n                        \n                        \n                            \n                                 APPLICATION_JWT\n                            \n                        \n                        \n                            \n                                Value : application/jwt\n                            \n                        \n            \n        \n\n    src/verifier/oid4vp/dto/presentation-request.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ResponseType\n                    \n                \n                    \n                        \n                            Enum for the type of response expected from the presentation request.\n\n                        \n                    \n                        \n                            \n                                 QRCode\n                            \n                        \n                        \n                            \n                                Value : qrcode\n                            \n                        \n                        \n                            \n                                 URI\n                            \n                        \n                        \n                            \n                                Value : uri\n                            \n                        \n            \n        \n\n    src/auth/roles/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 Presentations\n                            \n                        \n                        \n                            \n                                Value : presentation:manage\n                            \n                        \n                        \n                            \n                                 PresentationOffer\n                            \n                        \n                        \n                            \n                                Value : presentation:offer\n                            \n                        \n                        \n                            \n                                 Issuances\n                            \n                        \n                        \n                            \n                                Value : issuance:manage\n                            \n                        \n                        \n                            \n                                 IssuanceOffer\n                            \n                        \n                        \n                            \n                                Value : issuance:offer\n                            \n                        \n                        \n                            \n                                 Clients\n                            \n                        \n                        \n                            \n                                Value : clients:manage\n                            \n                        \n                        \n                            \n                                 Tenants\n                            \n                        \n                        \n                            \n                                Value : tenants:manage\n                            \n                        \n            \n        \n\n    src/session/entities/session.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        SessionStatus\n                    \n                \n                        \n                            \n                                 Active\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 Fetched\n                            \n                        \n                        \n                            \n                                Value : fetched\n                            \n                        \n                        \n                            \n                                 Completed\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 Expired\n                            \n                        \n                        \n                            \n                                Value : expired\n                            \n                        \n                        \n                            \n                                 Failed\n                            \n                        \n                        \n                            \n                                Value : failed\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            extractConditionsFromKeyDesc   (src/.../helpers.ts)\n                        \n                        \n                            flattenMetas   (src/.../helpers.ts)\n                        \n                        \n                            getHeadersFromRequest   (src/.../util.ts)\n                        \n                        \n                            isEffectivelyRequired   (src/.../helpers.ts)\n                        \n                        \n                            Secured   (src/.../secure.decorator.ts)\n                        \n                        \n                            SessionEntity   (src/.../session.decorator.ts)\n                        \n                        \n                            summarizeFlags   (src/.../helpers.ts)\n                        \n                        \n                            summarizeSchemaShape   (src/.../helpers.ts)\n                        \n                        \n                            summarizeWhenEntry   (src/.../helpers.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap function to initialize the NestJS application.\n\n\n                \n            \n        \n    \n    src/utils/config-printer/helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        extractConditionsFromKeyDesc\n                        \n                    \n                \n            \n            \n                \nextractConditionsFromKeyDesc(keyDesc: any)\n                \n            \n\n\n\n\n            \n                \n                        Extracts the conditions from a given key description.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                keyDesc\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The key description object to extract conditions from.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                An array of strings representing the extracted conditions.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flattenMetas\n                        \n                    \n                \n            \n            \n                \nflattenMetas(desc: any)\n                \n            \n\n\n\n\n            \n                \n                        Flattens the meta information from a given description object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                desc\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The description object to extract meta information from.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Record\n\n                        \n                            \n                                A record containing the flattened meta information.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEffectivelyRequired\n                        \n                    \n                \n            \n            \n                \nisEffectivelyRequired(key: string, rawEnv: Record)\n                \n            \n\n\n\n\n            \n                \n                        Tests if a config key is effectively required in the current environment.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The config key to test.\n\n                                            \n                                        \n                                        \n                                                rawEnv\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The raw environment variables.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the key is effectively required, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summarizeFlags\n                        \n                    \n                \n            \n            \n                \nsummarizeFlags(flags?: any)\n                \n            \n\n\n\n\n            \n                \n                        Summarizes the flags for a given configuration key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                flags\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The flags object to summarize.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string representation of the flags.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summarizeSchemaShape\n                        \n                    \n                \n            \n            \n                \nsummarizeSchemaShape(s?: any)\n                \n            \n\n\n\n\n            \n                \n                        Summarizes the shape of a given schema.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                s\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The schema object to summarize.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string representation of the schema shape.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summarizeWhenEntry\n                        \n                    \n                \n            \n            \n                \nsummarizeWhenEntry(w: any)\n                \n            \n\n\n\n\n            \n                \n                        Summarizes the conditions for a given \"when\" entry.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                w\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The \"when\" entry object to summarize.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string representation of the \"when\" entry.\n\n                            \n                \n            \n        \n    \n    src/issuer/oid4vci/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getHeadersFromRequest\n                        \n                    \n                \n            \n            \n                \ngetHeadersFromRequest(req: Request)\n                \n            \n\n\n\n\n            \n                \n                        Utility function to extract headers from an Express request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     globalThis.Headers\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/auth/secure.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Secured\n                        \n                    \n                \n            \n            \n                \nSecured(roles)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roles\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/session/session.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SessionEntity\n                        \n                    \n                \n            \n            \n                \nSessionEntity()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     ParameterDecorator\n\n                        \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CryptoImplementatationModule\n\n\n\ncluster_CryptoImplementatationModule_exports\n\n\n\ncluster_CryptoImplementatationModule_providers\n\n\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAuthModule -->\n\nCryptoModule->AuthModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nCryptoService \n\nCryptoService \n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\n\n\nEncryptionService \n\nEncryptionService \n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\nAuthModule -->\n\nIssuerModule->AuthModule\n\n\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nCredentialConfigService \n\nCredentialConfigService \n\nCredentialConfigService  -->\n\nIssuerModule->CredentialConfigService \n\n\n\n\n\nIssuanceService \n\nIssuanceService \n\nIssuanceService  -->\n\nIssuerModule->IssuanceService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nMetricModule\n\nMetricModule\n\nAppModule -->\n\nMetricModule->AppModule\n\n\n\nAuthModule -->\n\nRegistrarModule->AuthModule\n\n\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAuthModule -->\n\nSessionModule->AuthModule\n\n\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nStorageModule\n\nStorageModule\n\nAppModule -->\n\nStorageModule->AppModule\n\n\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nWellKnownService\n\nWellKnownService\n\nAppModule -->\n\nWellKnownService->AppModule\n\n\n\nAuthModule -->\n\nStatusListModule->AuthModule\n\n\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nTenantService\n\nTenantService\n\nAuthModule -->\n\nTenantService->AuthModule\n\n\n\n\n\nCryptoImplementationService \n\nCryptoImplementationService \n\n\n\nCryptoImplementatationModule\n\nCryptoImplementatationModule\n\nCryptoImplementationService  -->\n\nCryptoImplementatationModule->CryptoImplementationService \n\n\n\n\n\nCryptoImplementationService\n\nCryptoImplementationService\n\nCryptoImplementatationModule -->\n\nCryptoImplementationService->CryptoImplementatationModule\n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nDisplayService\n\nDisplayService\n\nIssuerModule -->\n\nDisplayService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nIssuerModule -->\n\nWebhookService->IssuerModule\n\n\n\nOid4vpModule -->\n\nWebhookService->Oid4vpModule\n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nResolverService \n\nResolverService \n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        17 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    19 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    13 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    29 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    68 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    18 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoImplementatationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IssuerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeyModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetricModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        Oid4vpModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PresentationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RegistrarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ResolverModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatusListModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StorageModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VerifierModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : a middleware to interact with the EUDI Wallet\n        \n            Bugs : https://github.com/openwallet-foundation-labs/eudiplo/issues\n        \n            License : Apache-2.0\n        \n            Repository : https://github.com/openwallet-foundation-labs/eudiplo.git\n        \n            Author : Mirko Mollik \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CertificateType   (src/.../cert.entity.ts)\n                        \n                        \n                            CryptoType   (src/.../crypto-implementation.service.ts)\n                        \n                        \n                            Driver   (src/.../storage.module.ts)\n                        \n                        \n                            KeyPair   (src/.../crypto-implementation.ts)\n                        \n                        \n                            KeyUsage   (src/.../keys.entity.ts)\n                        \n                        \n                            Notification   (src/.../session.entity.ts)\n                        \n                        \n                            PolicyType   (src/.../policies.dto.ts)\n                        \n                        \n                            PutOptions   (src/.../storage.types.ts)\n                        \n                        \n                            Signer   (src/.../crypto-implementation.ts)\n                        \n                        \n                            StoredObject   (src/.../storage.types.ts)\n                        \n                        \n                            TenantStatus   (src/.../tenant.entity.ts)\n                        \n                        \n                            Verifier   (src/.../crypto-implementation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/crypto/key/entities/cert.entity.ts\n    \n    \n        \n            \n                \n                    \n                    CertificateType\n                \n            \n            \n                \n                        \"access\" | \"signing\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n    \n    \n        \n            \n                \n                    \n                    CryptoType\n                \n            \n            \n                \n                        \"ES256\" | \"Ed25519\"\n\n                \n            \n        \n    \n    src/storage/storage.module.ts\n    \n    \n        \n            \n                \n                    \n                    Driver\n                \n            \n            \n                \n                        \"local\" | \"s3\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto-implementation/crypto-implementation.ts\n    \n    \n        \n            \n                \n                    \n                    KeyPair\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Signer\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Verifier\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/crypto/key/entities/keys.entity.ts\n    \n    \n        \n            \n                \n                    \n                    KeyUsage\n                \n            \n            \n                \n                    Key usage types.\n\n                \n            \n            \n                \n                        \"sign\" | \"encrypt\"\n\n                \n            \n        \n    \n    src/session/entities/session.entity.ts\n    \n    \n        \n            \n                \n                    \n                    Notification\n                \n            \n            \n                \n                    Represents a session entity for managing user sessions in the application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/issuer/credentials/entities/policies.dto.ts\n    \n    \n        \n            \n                \n                    \n                    PolicyType\n                \n            \n            \n                \n                        \"none\" | \"allowList\" | \"rootOfTrust\" | \"attestationBased\"\n\n                \n            \n        \n    \n    src/storage/storage.types.ts\n    \n    \n        \n            \n                \n                    \n                    PutOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StoredObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/auth/tenant/entitites/tenant.entity.ts\n    \n    \n        \n            \n                \n                    \n                    TenantStatus\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AUTH_VALIDATION_SCHEMA   (src/.../auth-validation.schema.ts)\n                        \n                        \n                            BASE_VALIDATION_SCHEMA   (src/.../validation.schema.ts)\n                        \n                        \n                            CLIENTS_PROVIDER   (src/.../client.provider.ts)\n                        \n                        \n                            CONFIG_VALIDATION_SCHEMA   (src/.../config-validation.schema.ts)\n                        \n                        \n                            ContentType   (src/.../media-type.decorator.ts)\n                        \n                        \n                            CRYPTO_VALIDATION_SCHEMA   (src/.../crypto-validation.schema.ts)\n                        \n                        \n                            DB_VALIDATION_SCHEMA   (src/.../database-validation.schema.ts)\n                        \n                        \n                            DEFAULT_AUTH_CLIENT_ID   (src/.../auth-validation.schema.ts)\n                        \n                        \n                            DEFAULT_AUTH_CLIENT_SECRET   (src/.../auth-validation.schema.ts)\n                        \n                        \n                            DEFAULT_JWT_SECRET   (src/.../auth-validation.schema.ts)\n                        \n                        \n                            ECDSA_P256   (src/.../crypto.service.ts)\n                        \n                        \n                            ED25519   (src/.../ed25519.ts)\n                        \n                        \n                            FILE_STORAGE   (src/.../storage.types.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            ISSUER_VALIDATION_SCHEMA   (src/.../issuer-validation.schema.ts)\n                        \n                        \n                            KEY_VALIDATION_SCHEMA   (src/.../key-validation.schema.ts)\n                        \n                        \n                            LOG_VALIDATION_SCHEMA   (src/.../log-validation.schema.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            REGISTRAR_VALIDATION_SCHEMA   (src/.../registrar-validation.schema.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            SESSION_LOGGER_KEY   (src/.../session-logger.decorator.ts)\n                        \n                        \n                            SESSION_VALIDATION_SCHEMA   (src/.../session-validation.schema.ts)\n                        \n                        \n                            SessionLogger   (src/.../session-logger.decorator.ts)\n                        \n                        \n                            STORAGE_VALIDATION_SCHEMA   (src/.../storage-validation.schema.ts)\n                        \n                        \n                            Token   (src/.../token.decorator.ts)\n                        \n                        \n                            VALIDATION_SCHEMA   (src/.../combined.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Joi.ObjectSchema\n\n                    \n                \n                \n                    \n                        Default value : Joi.object({\n    OIDC: Joi.string()\n        .description(\"Enable OIDC mode\")\n        .meta({ group: \"auth\", order: 10 }),\n\n    OIDC_INTERNAL_ISSUER_URL: Joi.string()\n        .uri()\n        .when(\"OIDC\", {\n            is: Joi.exist(),\n            then: Joi.string().default((config) => config.OIDC),\n            otherwise: Joi.optional(),\n        })\n        .description(\"Internal issuer URL in OIDC mode\")\n        .meta({ group: \"auth\", order: 20 }),\n\n    OIDC_CLIENT_ID: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().required(),\n        otherwise: Joi.optional(),\n    })\n        .description(\"Client ID for OIDC\")\n        .meta({ group: \"auth\", order: 25 }),\n\n    OIDC_CLIENT_SECRET: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().required(),\n        otherwise: Joi.optional(),\n    })\n        .description(\"Client secret for OIDC\")\n        .meta({ group: \"auth\", order: 26 }),\n\n    OIDC_SUB: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().default(\"tenant_id\"),\n        otherwise: Joi.optional(),\n    })\n        .description(\"Claim to use as subject\")\n        .meta({ group: \"auth\", order: 30 }),\n\n    OIDC_ALGORITHM: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().valid(\"RS256\", \"PS256\", \"ES256\").default(\"RS256\"),\n        otherwise: Joi.optional(),\n    })\n        .description(\"Expected JWT alg\")\n        .meta({ group: \"auth\", order: 40 }),\n\n    JWT_SECRET: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().optional(),\n        otherwise: Joi.string().min(32).default(DEFAULT_JWT_SECRET),\n    })\n        .description(\"Local JWT secret (when OIDC is off)\")\n        .meta({ group: \"auth\", order: 50 }),\n\n    JWT_ISSUER: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(\"eudiplo-service\"),\n    })\n        .description(\"Local JWT issuer\")\n        .meta({ group: \"auth\", order: 60 }),\n\n    JWT_EXPIRES_IN: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(\"24h\"),\n    })\n        .description(\"Local JWT expiration\")\n        .meta({ group: \"auth\", order: 70 }),\n\n    AUTH_CLIENT_SECRET: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_SECRET),\n    })\n        .description(\"Client secret (local auth)\")\n        .meta({ group: \"auth\", order: 80 }),\n\n    AUTH_CLIENT_ID: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_ID),\n    })\n        .description(\"Client ID (local auth)\")\n        .meta({ group: \"auth\", order: 90 }),\n}).unknown(true)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_AUTH_CLIENT_ID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"root\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_AUTH_CLIENT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"root\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_JWT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"supersecret\"\n                    \n                \n\n\n        \n    \n\n    src/utils/config-printer/validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BASE_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    FOLDER: Joi.string()\n        .default(\"../../tmp\")\n        .description(\"Root working folder for temp files\")\n        .meta({ group: \"general\", order: 10 }),\n}).unknown(true)\n                    \n                \n\n            \n                \n                    Validation schema for base configuration\n\n                \n            \n\n        \n    \n\n    src/auth/client/client.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CLIENTS_PROVIDER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"CLIENTS_PROVIDER\"\n                    \n                \n\n\n        \n    \n\n    src/utils/config-printer/config-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CONFIG_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    CONFIG_IMPORT: Joi.boolean()\n        .default(false)\n        .description(\"Run one-off config import on startup\")\n        .meta({ group: \"config\", order: 10 }),\n\n    CONFIG_IMPORT_FORCE: Joi.boolean()\n        .default(false)\n        .description(\"Force overwrite on config import\")\n        .meta({ group: \"config\", order: 20 }),\n\n    CONFIG_FOLDER: Joi.string()\n        .default(\"../../assets/config\")\n        .description(\"Path to config import folder\")\n        .meta({ group: \"config\", order: 30 }),\n})\n                    \n                \n\n            \n                \n                    Validation schema for configuration\n\n                \n            \n\n        \n    \n\n    src/utils/mediaType/media-type.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ContentType\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.headers[\"accept\"] as string | undefined;\n    },\n)\n                    \n                \n\n            \n                \n                    Decorator to extract the content type from the request headers.\nThis decorator can be used to determine the media type of the request.\n\n                \n            \n\n        \n    \n\n    src/crypto/key/crypto-implementation/crypto-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CRYPTO_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    CRYPTO_ALG: Joi.string()\n        .valid(\"ES256\")\n        .default(\"ES256\")\n        .description(\"The signing algorithm to use\")\n        .meta({ group: \"crypto\", order: 10 }),\n})\n                    \n                \n\n\n        \n    \n\n    src/database/database-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DB_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    DB_TYPE: Joi.string()\n        .valid(\"sqlite\", \"postgres\")\n        .default(\"sqlite\")\n        .description(\"Database type\")\n        .meta({ group: \"database\", order: 10 }),\n    DB_HOST: Joi.string()\n        .when(\"DB_TYPE\", {\n            is: \"sqlite\",\n            then: Joi.optional(),\n            otherwise: Joi.required(),\n        })\n        .description(\"Database host\")\n        .meta({ group: \"database\", order: 15 }),\n    DB_PORT: Joi.number()\n        .when(\"DB_TYPE\", {\n            is: \"sqlite\",\n            then: Joi.optional(),\n            otherwise: Joi.required(),\n        })\n        .description(\"Database port\")\n        .meta({ group: \"database\", order: 20 }),\n    DB_USERNAME: Joi.string()\n        .when(\"DB_TYPE\", {\n            is: \"sqlite\",\n            then: Joi.optional(),\n            otherwise: Joi.required(),\n        })\n        .description(\"Database username\")\n        .meta({ group: \"database\", order: 30 }),\n    DB_PASSWORD: Joi.string()\n        .when(\"DB_TYPE\", {\n            is: \"sqlite\",\n            then: Joi.optional(),\n            otherwise: Joi.required(),\n        })\n        .description(\"Database password\")\n        .meta({ group: \"database\", order: 40 }),\n    DB_DATABASE: Joi.string()\n        .when(\"DB_TYPE\", {\n            is: \"sqlite\",\n            then: Joi.optional(),\n            otherwise: Joi.required(),\n        })\n        .description(\"Database name\")\n        .meta({ group: \"database\", order: 50 }),\n})\n                    \n                \n\n\n        \n    \n\n    src/crypto/crypto.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ECDSA_P256\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    name: \"ECDSA\",\n    namedCurve: \"P-256\",\n    hash: \"SHA-256\" as const,\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/key/crypto-implementation/ed25519.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ED25519\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                \n                    \n                        Default value : {\n    alg: \"EdDSA\",\n    async generateKeyPair() {\n        const keyPair = await crypto.webcrypto.subtle.generateKey(\n            {\n                name: \"EdDSA\",\n                namedCurve: \"Ed25519\",\n            },\n            true,\n            [\"sign\", \"verify\"],\n        );\n\n        const publicKey = await crypto.webcrypto.subtle.exportKey(\n            \"jwk\",\n            keyPair.publicKey,\n        );\n        const privateKey = await crypto.webcrypto.subtle.exportKey(\n            \"jwk\",\n            keyPair.privateKey,\n        );\n\n        return { publicKey, privateKey };\n    },\n    async getSigner(privateKeyJWK: object) {\n        const privateKey = await crypto.webcrypto.subtle.importKey(\n            \"jwk\",\n            privateKeyJWK,\n            {\n                name: \"EdDSA\",\n                namedCurve: \"Ed25519\",\n            },\n            false,\n            [\"sign\"],\n        );\n\n        return async (data: string) => {\n            const signature = await crypto.webcrypto.subtle.sign(\n                \"EdDSA\",\n                privateKey,\n                new TextEncoder().encode(data),\n            );\n\n            return Buffer.from(signature).toString(\"base64url\");\n        };\n    },\n    async getVerifier(publicKeyJWK: object) {\n        const publicKey = await crypto.webcrypto.subtle.importKey(\n            \"jwk\",\n            publicKeyJWK,\n            {\n                name: \"EdDSA\",\n                namedCurve: \"Ed25519\",\n            },\n            false,\n            [\"verify\"],\n        );\n\n        return async (data: string, signatureBase64url: string) => {\n            const signature = Buffer.from(signatureBase64url, \"base64url\");\n            const isVerified = await crypto.webcrypto.subtle.verify(\n                \"EdDSA\",\n                publicKey,\n                signature,\n                new TextEncoder().encode(data),\n            );\n\n            return isVerified;\n        };\n    },\n}\n                    \n                \n\n\n        \n    \n\n    src/storage/storage.types.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FILE_STORAGE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol(\"FILE_STORAGE\")\n                    \n                \n\n\n        \n    \n\n    src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"isPublic\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/issuer/issuer-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ISSUER_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    PUBLIC_URL: Joi.string()\n        .default(\"http://localhost:3000\")\n        .description(\"The public URL of the issuer\")\n        .meta({ group: \"general\", order: 10 }),\n})\n                    \n                \n\n\n        \n    \n\n    src/crypto/key/key-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        KEY_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    KM_TYPE: Joi.string()\n        .valid(\"db\", \"vault\")\n        .default(\"db\")\n        .description(\"The key management type\")\n        .meta({ group: \"key\", order: 10 }),\n\n    // Vault-related config\n    VAULT_URL: Joi.string()\n        .uri()\n        .when(\"KM_TYPE\", {\n            is: \"vault\",\n            then: Joi.required(),\n            otherwise: Joi.optional(),\n        })\n        .description(\"The URL of the Vault server\")\n        .meta({ group: \"key\", order: 20 }),\n    VAULT_TOKEN: Joi.string()\n        .when(\"KM_TYPE\", {\n            is: \"vault\",\n            then: Joi.required(),\n            otherwise: Joi.optional(),\n        })\n        .description(\"The token for accessing the Vault\")\n        .meta({ group: \"key\", order: 30 }),\n})\n                    \n                \n\n\n        \n    \n\n    src/utils/logger/log-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LOG_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    LOG_LEVEL: Joi.string()\n        .valid(\"trace\", \"debug\", \"info\", \"warn\", \"error\", \"fatal\")\n        .default(process.env.NODE_ENV === \"production\" ? \"warn\" : \"debug\")\n        .description(\"Application log level\")\n        .meta({ group: \"log\", order: 10 }),\n    LOG_ENABLE_HTTP_LOGGER: Joi.boolean()\n        .default(false)\n        .description(\"Enable HTTP request logging\")\n        .meta({ group: \"log\", order: 20 }),\n    LOG_ENABLE_SESSION_LOGGER: Joi.boolean()\n        .default(false)\n        .description(\"Enable session flow logging\")\n        .meta({ group: \"log\", order: 30 }),\n    LOG_DEBUG_MODE: Joi.boolean()\n        .default(false)\n        .description(\"Enable verbose debug logs\")\n        .meta({ group: \"log\", order: 40 }),\n    LOG_FORMAT: Joi.string()\n        .valid(\"json\", \"pretty\")\n        .default(process.env.NODE_ENV === \"production\" ? \"json\" : \"pretty\")\n        .description(\"Log output format\")\n        .meta({ group: \"log\", order: 50 }),\n})\n                    \n                \n\n            \n                \n                    Validation schema for logging configuration\n\n                \n            \n\n        \n    \n\n    src/registrar/registrar-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REGISTRAR_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    REGISTRAR_URL: Joi.string()\n        .description(\"The URL of the registrar\")\n        .meta({ group: \"registrar\", order: 10 }),\n    REGISTRAR_OIDC_URL: Joi.string()\n        .when(\"REGISTRAR_URL\", {\n            is: Joi.exist(),\n            then: Joi.required(),\n        })\n        .description(\"The OIDC URL of the registrar\")\n        .meta({ group: \"registrar\", order: 20 }),\n    REGISTRAR_OIDC_CLIENT_ID: Joi.string()\n        .when(\"REGISTRAR_URL\", {\n            is: Joi.exist(),\n            then: Joi.required(),\n        })\n        .description(\"The OIDC client ID of the registrar\")\n        .meta({ group: \"registrar\", order: 30 }),\n    REGISTRAR_OIDC_CLIENT_SECRET: Joi.string()\n        .when(\"REGISTRAR_URL\", {\n            is: Joi.exist(),\n            then: Joi.required(),\n        })\n        .description(\"The OIDC client secret of the registrar\")\n        .meta({ group: \"registrar\", order: 40 }),\n})\n                    \n                \n\n            \n                \n                    Validation schema for the registrar module.\nDefines the required environment variables and their types.\n\n                \n            \n\n        \n    \n\n    src/auth/roles/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"roles\"\n                    \n                \n\n\n        \n    \n\n    src/utils/logger/session-logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SESSION_LOGGER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"session-logger\"\n                    \n                \n\n            \n                \n                    Key for session logger metadata.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SessionLogger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n    sessionIdParam: string,\n    flowType: \"OID4VCI\" | \"OID4VP\",\n) => SetMetadata(SESSION_LOGGER_KEY, { sessionIdParam, flowType })\n                    \n                \n\n            \n                \n                    Decorator to mark methods that should have session-based logging\n\n                \n            \n\n        \n    \n\n    src/session/session-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SESSION_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    SESSION_TIDY_UP_INTERVAL: Joi.number()\n        .default(60 * 60)\n        .description(\"Interval in seconds to run session tidy up\")\n        .meta({ group: \"session\", order: 10 }),\n    SESSION_TTL: Joi.number()\n        .default(24 * 60 * 60)\n        .description(\"Time to live for sessions in seconds\")\n        .meta({ group: \"session\", order: 20 }),\n})\n                    \n                \n\n            \n                \n                    Module for managing user sessions.\n\n                \n            \n\n        \n    \n\n    src/storage/storage-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        STORAGE_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    STORAGE_DRIVER: Joi.string()\n        .valid(\"local\", \"s3\")\n        .default(\"local\")\n        .description(\"The storage driver to use\")\n        .meta({ group: \"storage\", order: 10 }),\n    LOCAL_STORAGE_DIR: Joi.string()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"local\",\n            then: Joi.string().default((parent) =>\n                join(parent.FOLDER, \"uploads\"),\n            ),\n        })\n        .description(\"The directory to store files in when using local storage\")\n        .meta({ group: \"storage\", order: 20 }),\n    S3_REGION: Joi.string()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"s3\",\n            then: Joi.required(),\n        })\n        .description(\"The AWS region for the S3 bucket\")\n        .meta({ group: \"storage\", order: 30 }),\n    S3_BUCKET: Joi.string()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"s3\",\n            then: Joi.required(),\n        })\n        .description(\"The name of the S3 bucket\")\n        .meta({ group: \"storage\", order: 40 }),\n    S3_ACCESS_KEY_ID: Joi.string()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"s3\",\n            then: Joi.required(),\n        })\n        .description(\"The access key ID for the S3 bucket\")\n        .meta({ group: \"storage\", order: 50 }),\n    S3_SECRET_ACCESS_KEY: Joi.string()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"s3\",\n            then: Joi.required(),\n        })\n        .description(\"The secret access key for the S3 bucket\")\n        .meta({ group: \"storage\", order: 60 }),\n    S3_ENDPOINT: Joi.string()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"s3\",\n            then: Joi.optional(),\n        })\n        .description(\n            \"The endpoint URL for the S3 service (for S3-compatible services)\",\n        )\n        .meta({ group: \"storage\", order: 70 }),\n    S3_FORCE_PATH_STYLE: Joi.boolean()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"s3\",\n            then: Joi.boolean().default(false),\n        })\n        .description(\"Whether to force path-style URLs for S3\")\n        .meta({ group: \"storage\", order: 80 }),\n    S3_PUBLIC_BASE_URL: Joi.string()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"s3\",\n            then: Joi.required(),\n        })\n        .description(\"The public base URL for the S3 bucket\")\n        .meta({ group: \"storage\", order: 90 }),\n})\n                    \n                \n\n\n        \n    \n\n    src/auth/token.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Token\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n)\n                    \n                \n\n            \n                \n                    Token decorator\n\n                \n            \n\n        \n    \n\n    src/utils/config-printer/combined.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : BASE_VALIDATION_SCHEMA.concat(\n    AUTH_VALIDATION_SCHEMA,\n)\n    .concat(DB_VALIDATION_SCHEMA)\n    .concat(CONFIG_VALIDATION_SCHEMA)\n    .concat(LOG_VALIDATION_SCHEMA)\n    .concat(REGISTRAR_VALIDATION_SCHEMA)\n    .concat(KEY_VALIDATION_SCHEMA)\n    .concat(CRYPTO_VALIDATION_SCHEMA)\n    .concat(ISSUER_VALIDATION_SCHEMA)\n    .concat(SESSION_VALIDATION_SCHEMA)\n    .concat(STORAGE_VALIDATION_SCHEMA)\n                    \n                \n\n            \n                \n                    Combined validation schema for the application configuration\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
